design_name,task_id,prompt,ref_solution,testbench
fsm,4_16_40_32_2,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_C == in_D)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S15;
                end
            end
            S1: begin
                next_state = S0;
            end
            S2: begin
                if (~&(in_A)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S10;
                end
            end
            S3: begin
                if (((in_B == 'd0) || in_A)) begin
                    next_state = S8;
                end
                else if (~((in_B || in_A))) begin
                    next_state = S2;
                end
                else if (&(in_C)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S10;
                end
            end
            S4: begin
                if ((in_C && (in_D == 'd0))) begin
                    next_state = S6;
                end
                else if (((in_A || in_B) ^ (in_D || in_A))) begin
                    next_state = S13;
                end
                else begin
                    next_state = S9;
                end
            end
            S5: begin
                next_state = S15;
            end
            S6: begin
                if ((in_D >= (in_A && in_C))) begin
                    next_state = S9;
                end
                else if ((in_A ^ (in_B || in_C))) begin
                    next_state = S4;
                end
                else if (((in_B && in_C) < ~^(in_A))) begin
                    next_state = S15;
                end
                else begin
                    next_state = S7;
                end
            end
            S7: begin
                if ((in_A && (in_D || in_C))) begin
                    next_state = S1;
                end
                else if ((in_A ^ in_C)) begin
                    next_state = S4;
                end
                else if ((in_A ^ in_B)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S14;
                end
            end
            S8: begin
            end
            S9: begin
                if ((in_A == 'd1)) begin
                    next_state = S7;
                end
                else if ((in_B == 'd0)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S9;
                end
            end
            S10: begin
                if ((^(in_A) != &(in_B))) begin
                    next_state = S15;
                end
                else if (((in_A != 'd0) == 'd0)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S2;
                end
            end
            S11: begin
            end
            S12: begin
            end
            S13: begin
                if ((in_B || (in_C && in_A))) begin
                    next_state = S2;
                end
                else if (((in_D || in_A) ^ in_D)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S10;
                end
            end
            S14: begin
                if (~^((in_D != in_C))) begin
                    next_state = S0;
                end
                else if (((in_B == 'd1) != (in_A != 'd1))) begin
                    next_state = S12;
                end
                else if (((in_D ^ in_A) != 'd1)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S2;
                end
            end
            S15: begin
                if (~&(&(in_B))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S10;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_16_40_32_4,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_B != 'd1)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S12;
                end
            end
            S1: begin
                if ((in_C && in_B)) begin
                    next_state = S15;
                end
                else if ((in_C && (in_D == in_A))) begin
                    next_state = S4;
                end
                else begin
                    next_state = S12;
                end
            end
            S2: begin
                if (((in_A != 'd0) == in_D)) begin
                    next_state = S13;
                end
                else if (((in_C ^ in_B) == 'd1)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S7;
                end
            end
            S3: begin
                if ((in_A == 'd0)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S9;
                end
            end
            S4: begin
                if ((~|(in_D) && in_B)) begin
                    next_state = S2;
                end
                else if (((in_C && in_D) ^ |(in_A))) begin
                    next_state = S6;
                end
                else if ((in_A <= (in_B > in_C))) begin
                    next_state = S7;
                end
                else if (((in_C > in_A) || (in_B ^ in_C))) begin
                    next_state = S4;
                end
                else begin
                    next_state = S13;
                end
            end
            S5: begin
                if ((in_D || in_A)) begin
                    next_state = S12;
                end
                else if (((in_D != in_B) == in_C)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S3;
                end
            end
            S6: begin
                if ((in_A == 'd1)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S4;
                end
            end
            S7: begin
                if (((in_B ^ in_A) || &(in_B))) begin
                    next_state = S10;
                end
                else begin
                    next_state = S7;
                end
            end
            S8: begin
                if (!((in_B && in_D))) begin
                    next_state = S5;
                end
                else if (((in_D == 'd1) == 'd1)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S3;
                end
            end
            S9: begin
                if (!(in_A)) begin
                    next_state = S14;
                end
                else if (~&((in_D == in_B))) begin
                    next_state = S13;
                end
                else begin
                    next_state = S11;
                end
            end
            S10: begin
                next_state = S11;
            end
            S11: begin
                if (((in_A && in_D) == 'd0)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S9;
                end
            end
            S12: begin
            end
            S13: begin
                if ((~(in_B) ^ in_C)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S10;
                end
            end
            S14: begin
                if (((in_A < 'd1) < in_C)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S6;
                end
            end
            S15: begin
                if (!(in_C)) begin
                    next_state = S8;
                end
                else if (((in_D != 'd1) && &(in_C))) begin
                    next_state = S9;
                end
                else begin
                    next_state = S2;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_16_40_64_2,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (((in_A && in_C) || in_D)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S12;
                end
            end
            S1: begin
                next_state = S14;
            end
            S2: begin
            end
            S3: begin
            end
            S4: begin
            end
            S5: begin
                next_state = S7;
            end
            S6: begin
                if ((~(in_A) || in_D)) begin
                    next_state = S12;
                end
                else if ((in_B || (in_A && in_C))) begin
                    next_state = S11;
                end
                else begin
                    next_state = S5;
                end
            end
            S7: begin
                if ((in_D != (in_A || in_C))) begin
                    next_state = S6;
                end
                else if (!(in_A)) begin
                    next_state = S8;
                end
                else if ((~(in_A) == 'd1)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S7;
                end
            end
            S8: begin
                if ((in_C ^ ~&(in_B))) begin
                    next_state = S10;
                end
                else if ((in_A || !(in_D))) begin
                    next_state = S5;
                end
                else if (&(in_C)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S6;
                end
            end
            S9: begin
                if ((in_D != (in_B > in_D))) begin
                    next_state = S14;
                end
                else begin
                    next_state = S0;
                end
            end
            S10: begin
                if (((in_D ^ in_A) == in_D)) begin
                    next_state = S5;
                end
                else if ((in_B || ~|(in_C))) begin
                    next_state = S13;
                end
                else begin
                    next_state = S2;
                end
            end
            S11: begin
                if ((~|(in_D) == 'd1)) begin
                    next_state = S1;
                end
                else if ((in_C && in_B)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S4;
                end
            end
            S12: begin
                if ((in_C == 'd1)) begin
                    next_state = S2;
                end
                else if (^((in_D || in_C))) begin
                    next_state = S15;
                end
                else begin
                    next_state = S12;
                end
            end
            S13: begin
                if (((in_D || in_B) ^ in_A)) begin
                    next_state = S0;
                end
                else if ((^(in_D) == 'd1)) begin
                    next_state = S4;
                end
                else if ((in_A <= 'd1)) begin
                    next_state = S2;
                end
                else if ((~(in_D) ^ in_C)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S11;
                end
            end
            S14: begin
                if (~&(in_D)) begin
                    next_state = S7;
                end
                else if (((in_D == 'd0) && in_C)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S2;
                end
            end
            S15: begin
                if (|((in_B || in_A))) begin
                    next_state = S3;
                end
                else if (((in_B > 'd0) || (in_C || in_D))) begin
                    next_state = S11;
                end
                else begin
                    next_state = S0;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_16_40_64_4,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_D != (in_B == 'd0))) begin
                    next_state = S7;
                end
                else if ((in_D ^ (in_A != in_D))) begin
                    next_state = S12;
                end
                else if ((in_B || in_D)) begin
                    next_state = S4;
                end
                else if ((in_B == 'd1)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S11;
                end
            end
            S1: begin
                if (^(in_D)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S1;
                end
            end
            S2: begin
                if (~&(in_B)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S8;
                end
            end
            S3: begin
                if ((in_D ^ in_A)) begin
                    next_state = S13;
                end
                else if ((in_D == (in_B || in_A))) begin
                    next_state = S5;
                end
                else if ((in_A != 'd1)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S3;
                end
            end
            S4: begin
                next_state = S3;
            end
            S5: begin
                if ((in_B && (in_A ^ in_C))) begin
                    next_state = S1;
                end
                else if (~^((in_D && in_A))) begin
                    next_state = S10;
                end
                else begin
                    next_state = S7;
                end
            end
            S6: begin
                if ((in_C ^ (in_A < in_C))) begin
                    next_state = S4;
                end
                else if (((in_A && in_D) < 'd1)) begin
                    next_state = S11;
                end
                else if (((in_A ^ in_C) ^ in_A)) begin
                    next_state = S15;
                end
                else if (((in_D ^ in_A) || (in_D || in_C))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S12;
                end
            end
            S7: begin
                if (&((in_B ^ in_D))) begin
                    next_state = S9;
                end
                else if ((~|(in_C) && in_B)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S13;
                end
            end
            S8: begin
                if ((in_D != (in_A && in_B))) begin
                    next_state = S2;
                end
                else begin
                    next_state = S6;
                end
            end
            S9: begin
                if (((in_B == 'd0) && (in_C != in_B))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S5;
                end
            end
            S10: begin
                next_state = S5;
            end
            S11: begin
                if ((in_A <= 'd1)) begin
                    next_state = S6;
                end
                else if (((in_A != 'd1) != 'd1)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S10;
                end
            end
            S12: begin
                next_state = S15;
            end
            S13: begin
                if (((in_C ^ in_D) || &(in_B))) begin
                    next_state = S14;
                end
                else begin
                    next_state = S2;
                end
            end
            S14: begin
                next_state = S4;
            end
            S15: begin
                next_state = S12;
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_16_80_32_2,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_C || (in_B && in_C))) begin
                    next_state = S9;
                end
                else if ((in_C && ~^(in_D))) begin
                    next_state = S1;
                end
                else begin
                    next_state = S10;
                end
            end
            S1: begin
                if ((in_A == 'd0)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S15;
                end
            end
            S2: begin
                if ((in_B ^ (in_C != in_D))) begin
                    next_state = S15;
                end
                else if (|(in_B)) begin
                    next_state = S0;
                end
                else if ((~^(in_C) < in_B)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S10;
                end
            end
            S3: begin
                if (((in_C && in_B) != 'd1)) begin
                    next_state = S10;
                end
                else if ((in_D ^ &(in_B))) begin
                    next_state = S2;
                end
                else begin
                    next_state = S1;
                end
            end
            S4: begin
                if ((in_B != 'd0)) begin
                    next_state = S6;
                end
                else if ((in_B && (in_D == 'd0))) begin
                    next_state = S4;
                end
                else if (((in_D && in_A) >= (in_C == 'd0))) begin
                    next_state = S10;
                end
                else if (((in_D == 'd1) || (in_C && in_B))) begin
                    next_state = S2;
                end
                else if (((in_D == in_A) != 'd0)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S8;
                end
            end
            S5: begin
                if (&(in_D)) begin
                    next_state = S3;
                end
                else if ((in_A && (in_D ^ in_C))) begin
                    next_state = S2;
                end
                else begin
                    next_state = S12;
                end
            end
            S6: begin
                if ((in_B == 'd0)) begin
                    next_state = S12;
                end
                else if ((in_D == 'd1)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S8;
                end
            end
            S7: begin
                if (((in_C == in_A) ^ in_C)) begin
                    next_state = S4;
                end
                else if ((in_C < (in_A != in_C))) begin
                    next_state = S5;
                end
                else if (~^(in_C)) begin
                    next_state = S12;
                end
                else if (((in_D || in_B) || ~^(in_D))) begin
                    next_state = S1;
                end
                else if ((in_A == 'd0)) begin
                    next_state = S2;
                end
                else if ((in_A == 'd0)) begin
                    next_state = S0;
                end
                else if (((in_A == 'd0) > in_D)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S11;
                end
            end
            S8: begin
                if ((in_B != 'd1)) begin
                    next_state = S14;
                end
                else if ((in_A != 'd1)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S9;
                end
            end
            S9: begin
                if (((in_D && in_C) || in_B)) begin
                    next_state = S0;
                end
                else if ((in_A && in_D)) begin
                    next_state = S8;
                end
                else if (((in_D == 'd0) || (in_C || in_B))) begin
                    next_state = S4;
                end
                else if (((in_B == in_D) && in_C)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S7;
                end
            end
            S10: begin
                if (((in_A > 'd1) != (in_C && in_D))) begin
                    next_state = S15;
                end
                else if ((in_D != 'd0)) begin
                    next_state = S0;
                end
                else if (((in_D < 'd1) ^ in_B)) begin
                    next_state = S8;
                end
                else if (((in_A || in_B) > in_A)) begin
                    next_state = S13;
                end
                else if (((in_A != 'd1) || ~^(in_D))) begin
                    next_state = S4;
                end
                else begin
                    next_state = S7;
                end
            end
            S11: begin
                if (((in_A || in_C) != in_A)) begin
                    next_state = S6;
                end
                else if (!(&(in_A))) begin
                    next_state = S15;
                end
                else if (&(~(in_A))) begin
                    next_state = S13;
                end
                else if (~^(in_A)) begin
                    next_state = S1;
                end
                else if ((in_B > 'd0)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S12;
                end
            end
            S12: begin
                if (~&(~(in_D))) begin
                    next_state = S1;
                end
                else if ((in_C && in_B)) begin
                    next_state = S2;
                end
                else if (~^(in_C)) begin
                    next_state = S10;
                end
                else if (((in_C || in_B) != 'd0)) begin
                    next_state = S15;
                end
                else if (|((in_B == 'd0))) begin
                    next_state = S11;
                end
                else begin
                    next_state = S7;
                end
            end
            S13: begin
                if (((in_D == 'd1) ^ (in_C <= in_B))) begin
                    next_state = S2;
                end
                else begin
                    next_state = S0;
                end
            end
            S14: begin
                if ((in_A || (in_C == 'd0))) begin
                    next_state = S7;
                end
                else if ((in_D && in_C)) begin
                    next_state = S11;
                end
                else if ((in_C || in_D)) begin
                    next_state = S12;
                end
                else if (~&(in_D)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S10;
                end
            end
            S15: begin
                if ((in_A == (in_B != in_D))) begin
                    next_state = S6;
                end
                else if (((in_A < 'd1) || (in_C < 'd1))) begin
                    next_state = S13;
                end
                else if ((!(in_C) && ~^(in_A))) begin
                    next_state = S9;
                end
                else if ((|(in_A) != ~(in_D))) begin
                    next_state = S2;
                end
                else if (((in_C || in_D) && (in_C && in_B))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S15;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_16_80_32_4,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (((in_D != 'd0) && in_C)) begin
                    next_state = S8;
                end
                else if ((|(in_B) == 'd0)) begin
                    next_state = S15;
                end
                else if (~&(in_B)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S13;
                end
            end
            S1: begin
                if (^(~&(in_B))) begin
                    next_state = S12;
                end
                else if ((~|(in_A) && in_B)) begin
                    next_state = S3;
                end
                else if ((in_C == 'd1)) begin
                    next_state = S4;
                end
                else if (|(&(in_C))) begin
                    next_state = S14;
                end
                else if ((in_C != 'd1)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S7;
                end
            end
            S2: begin
                if (((in_D && in_B) && in_D)) begin
                    next_state = S14;
                end
                else if ((in_D == (in_C && in_D))) begin
                    next_state = S15;
                end
                else if ((in_D >= 'd0)) begin
                    next_state = S12;
                end
                else if ((|(in_D) == 'd1)) begin
                    next_state = S0;
                end
                else if (((in_A == 'd0) == 'd0)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S4;
                end
            end
            S3: begin
                if ((in_B ^ ~|(in_C))) begin
                    next_state = S9;
                end
                else if (((in_D ^ in_C) && (in_A == 'd1))) begin
                    next_state = S6;
                end
                else begin
                    next_state = S10;
                end
            end
            S4: begin
                if (((in_A != 'd0) || (in_B != 'd1))) begin
                    next_state = S12;
                end
                else if ((in_C != 'd1)) begin
                    next_state = S4;
                end
                else if (((in_C > in_A) || (in_B || in_D))) begin
                    next_state = S3;
                end
                else if ((in_C && in_A)) begin
                    next_state = S14;
                end
                else if (((in_A || in_B) < 'd1)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S0;
                end
            end
            S5: begin
                if ((|(in_A) < 'd1)) begin
                    next_state = S3;
                end
                else if (((in_D && in_C) != (in_B == 'd0))) begin
                    next_state = S15;
                end
                else if ((in_B != ~&(in_D))) begin
                    next_state = S14;
                end
                else if (((in_A != in_D) || in_B)) begin
                    next_state = S12;
                end
                else if (^(in_A)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S8;
                end
            end
            S6: begin
                if (((in_C == 'd1) && (in_B ^ in_A))) begin
                    next_state = S0;
                end
                else if (((in_D > 'd1) || !(in_C))) begin
                    next_state = S2;
                end
                else if ((in_C <= 'd1)) begin
                    next_state = S4;
                end
                else if ((in_A || (in_D != in_C))) begin
                    next_state = S11;
                end
                else if (((in_D && in_C) == (in_A && in_D))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S12;
                end
            end
            S7: begin
                if (((in_D == in_A) && (in_C ^ in_B))) begin
                    next_state = S2;
                end
                else if ((in_A ^ (in_C != 'd0))) begin
                    next_state = S10;
                end
                else begin
                    next_state = S5;
                end
            end
            S8: begin
                if (((in_D == in_A) < 'd0)) begin
                    next_state = S3;
                end
                else if ((in_C ^ in_B)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S5;
                end
            end
            S9: begin
                if (^(in_C)) begin
                    next_state = S2;
                end
                else if (((in_C != 'd1) <= 'd1)) begin
                    next_state = S12;
                end
                else if (((in_D <= 'd1) && (in_A || in_D))) begin
                    next_state = S14;
                end
                else if ((~^(in_B) ^ (in_D || in_A))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S6;
                end
            end
            S10: begin
                if ((^(in_A) == 'd0)) begin
                    next_state = S11;
                end
                else if (~|(in_B)) begin
                    next_state = S13;
                end
                else if ((in_C && in_B)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S8;
                end
            end
            S11: begin
                if (!((in_D >= 'd1))) begin
                    next_state = S10;
                end
                else if (((in_B && in_A) != (in_C < in_A))) begin
                    next_state = S5;
                end
                else if ((in_A || in_C)) begin
                    next_state = S7;
                end
                else if ((in_C && in_B)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S13;
                end
            end
            S12: begin
                if (^((in_B < 'd0))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S13;
                end
            end
            S13: begin
                if (((in_C || in_B) || in_C)) begin
                    next_state = S1;
                end
                else if (&(in_C)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S3;
                end
            end
            S14: begin
                if (((in_B && in_D) || in_B)) begin
                    next_state = S5;
                end
                else if (((in_B || in_C) < in_B)) begin
                    next_state = S7;
                end
                else if ((in_B != 'd1)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S2;
                end
            end
            S15: begin
                if (((in_D == in_C) == (in_A ^ in_C))) begin
                    next_state = S7;
                end
                else if ((~|(in_A) > (in_C ^ in_B))) begin
                    next_state = S10;
                end
                else if ((in_B == 'd0)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S4;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_16_80_64_2,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_C == 'd1)) begin
                    next_state = S12;
                end
                else if (((in_A && in_B) || in_D)) begin
                    next_state = S9;
                end
                else if (~&(in_D)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S0;
                end
            end
            S1: begin
                if (&((in_C ^ in_D))) begin
                    next_state = S3;
                end
                else if ((in_B && (in_C ^ in_D))) begin
                    next_state = S14;
                end
                else if (&((in_A || in_D))) begin
                    next_state = S13;
                end
                else if ((in_D == 'd0)) begin
                    next_state = S1;
                end
                else if (((in_A == 'd1) || ~&(in_B))) begin
                    next_state = S11;
                end
                else begin
                    next_state = S15;
                end
            end
            S2: begin
                next_state = S7;
            end
            S3: begin
                if ((~^(in_B) == (in_C < 'd1))) begin
                    next_state = S7;
                end
                else if ((in_D == 'd0)) begin
                    next_state = S10;
                end
                else if (~((in_A || in_C))) begin
                    next_state = S8;
                end
                else if (((in_C <= in_B) || (in_C && in_A))) begin
                    next_state = S9;
                end
                else if ((in_A && (in_B || in_A))) begin
                    next_state = S12;
                end
                else if (((in_B ^ in_C) == 'd1)) begin
                    next_state = S13;
                end
                else if (~&(in_B)) begin
                    next_state = S0;
                end
                else if ((in_A != 'd0)) begin
                    next_state = S1;
                end
                else if (((in_A || in_C) ^ in_D)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S4;
                end
            end
            S4: begin
                if ((in_D || in_C)) begin
                    next_state = S5;
                end
                else if (~|(in_B)) begin
                    next_state = S7;
                end
                else if ((in_D || (in_A && in_D))) begin
                    next_state = S1;
                end
                else if ((in_D == 'd0)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S12;
                end
            end
            S5: begin
                next_state = S6;
            end
            S6: begin
                if ((in_D || |(in_B))) begin
                    next_state = S4;
                end
                else if ((in_B == (in_D || in_C))) begin
                    next_state = S3;
                end
                else if ((in_C != 'd0)) begin
                    next_state = S15;
                end
                else if ((in_A >= 'd1)) begin
                    next_state = S14;
                end
                else if ((in_D && in_A)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S1;
                end
            end
            S7: begin
                if ((~&(in_A) <= |(in_C))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S7;
                end
            end
            S8: begin
                if ((in_A ^ ~&(in_C))) begin
                    next_state = S15;
                end
                else if ((in_B != 'd0)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S3;
                end
            end
            S9: begin
                if ((in_C != 'd0)) begin
                    next_state = S6;
                end
                else if ((in_D || !(in_A))) begin
                    next_state = S11;
                end
                else if (!(in_B)) begin
                    next_state = S13;
                end
                else if (((in_D || in_C) ^ in_A)) begin
                    next_state = S2;
                end
                else if ((in_C ^ in_A)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S10;
                end
            end
            S10: begin
                if (((in_D || in_C) == 'd0)) begin
                    next_state = S9;
                end
                else if (~^(in_A)) begin
                    next_state = S15;
                end
                else if (((in_B == 'd0) == &(in_D))) begin
                    next_state = S10;
                end
                else if (((in_A || in_B) || in_A)) begin
                    next_state = S7;
                end
                else if ((in_C && in_D)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S1;
                end
            end
            S11: begin
                if ((in_D > 'd0)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S8;
                end
            end
            S12: begin
                if (((in_B ^ in_C) ^ (in_A ^ in_B))) begin
                    next_state = S11;
                end
                else if ((in_D == in_A)) begin
                    next_state = S5;
                end
                else if (((in_B && in_C) != 'd1)) begin
                    next_state = S7;
                end
                else if ((in_D || in_B)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S4;
                end
            end
            S13: begin
                if ((in_D != 'd0)) begin
                    next_state = S3;
                end
                else if (((in_B && in_A) && (in_D == 'd1))) begin
                    next_state = S7;
                end
                else if (~|(in_D)) begin
                    next_state = S8;
                end
                else if (((in_B == 'd1) == in_D)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S15;
                end
            end
            S14: begin
                if ((in_C == 'd1)) begin
                    next_state = S0;
                end
                else if (((in_B || in_C) || in_A)) begin
                    next_state = S3;
                end
                else if ((in_B && (in_A != 'd0))) begin
                    next_state = S14;
                end
                else if (((in_D != in_B) != 'd0)) begin
                    next_state = S6;
                end
                else if (~|(in_C)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S2;
                end
            end
            S15: begin
                if (~^(in_D)) begin
                    next_state = S1;
                end
                else if (((in_D <= in_C) != 'd1)) begin
                    next_state = S14;
                end
                else if (^((in_A > 'd1))) begin
                    next_state = S4;
                end
                else if (((in_D && in_C) != (in_A != in_C))) begin
                    next_state = S7;
                end
                else begin
                    next_state = S8;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_16_80_64_4,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (((in_B ^ in_D) ^ (in_A >= 'd1))) begin
                    next_state = S1;
                end
                else if (((in_B != in_A) != 'd1)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S14;
                end
            end
            S1: begin
                if ((in_A || in_B)) begin
                    next_state = S3;
                end
                else if (((in_D != in_A) != (in_C != 'd0))) begin
                    next_state = S9;
                end
                else if (((in_C ^ in_D) == !(in_A))) begin
                    next_state = S11;
                end
                else if (((in_B < 'd1) ^ (in_C != in_D))) begin
                    next_state = S13;
                end
                else if (((in_A ^ in_B) <= in_D)) begin
                    next_state = S4;
                end
                else if ((in_A ^ in_C)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S12;
                end
            end
            S2: begin
                if (((in_B || in_D) ^ in_B)) begin
                    next_state = S4;
                end
                else if (((in_C ^ in_B) == 'd0)) begin
                    next_state = S0;
                end
                else if (~^((in_B && in_C))) begin
                    next_state = S6;
                end
                else if (((in_A || in_B) && &(in_C))) begin
                    next_state = S7;
                end
                else if (~^((in_C ^ in_A))) begin
                    next_state = S5;
                end
                else begin
                    next_state = S3;
                end
            end
            S3: begin
                if (~^(~&(in_D))) begin
                    next_state = S2;
                end
                else if ((in_D != 'd1)) begin
                    next_state = S6;
                end
                else if ((~^(in_B) == 'd1)) begin
                    next_state = S14;
                end
                else if ((in_C != in_D)) begin
                    next_state = S13;
                end
                else if ((in_D && in_C)) begin
                    next_state = S3;
                end
                else if ((|(in_C) == 'd0)) begin
                    next_state = S15;
                end
                else if ((in_B == (in_C && in_B))) begin
                    next_state = S1;
                end
                else begin
                    next_state = S10;
                end
            end
            S4: begin
                if (((in_B == in_A) ^ (in_B ^ in_A))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S15;
                end
            end
            S5: begin
                if ((in_C || in_D)) begin
                    next_state = S8;
                end
                else if (((in_C == 'd1) ^ (in_B == 'd0))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S2;
                end
            end
            S6: begin
                if (((in_B ^ in_D) || in_C)) begin
                    next_state = S13;
                end
                else if (((in_B && in_D) != 'd0)) begin
                    next_state = S3;
                end
                else if ((in_A <= (in_B == 'd0))) begin
                    next_state = S9;
                end
                else if ((~(in_C) || in_A)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S7;
                end
            end
            S7: begin
                if ((in_A || (in_D == 'd0))) begin
                    next_state = S10;
                end
                else if (((in_C ^ in_D) == 'd0)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S6;
                end
            end
            S8: begin
                if (((in_B != 'd0) || (in_C == 'd0))) begin
                    next_state = S15;
                end
                else if (((in_A == in_B) || ~(in_D))) begin
                    next_state = S4;
                end
                else if ((in_C && (in_B != 'd1))) begin
                    next_state = S2;
                end
                else if ((in_B && in_D)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S13;
                end
            end
            S9: begin
                if ((in_D || in_A)) begin
                    next_state = S5;
                end
                else if ((^(in_D) == 'd1)) begin
                    next_state = S9;
                end
                else if ((in_C > 'd0)) begin
                    next_state = S3;
                end
                else if (&(in_B)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S8;
                end
            end
            S10: begin
                if ((in_A != 'd0)) begin
                    next_state = S7;
                end
                else if ((in_C ^ (in_D ^ in_B))) begin
                    next_state = S6;
                end
                else if (((in_C >= 'd1) || (in_B || in_D))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S0;
                end
            end
            S11: begin
                if ((in_C || in_A)) begin
                    next_state = S7;
                end
                else if (((in_C == 'd1) || in_B)) begin
                    next_state = S10;
                end
                else if ((in_B < 'd1)) begin
                    next_state = S15;
                end
                else if (^(in_D)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S3;
                end
            end
            S12: begin
                if ((in_C ^ (in_B ^ in_D))) begin
                    next_state = S8;
                end
                else if ((in_D <= (in_A != in_D))) begin
                    next_state = S5;
                end
                else if (&(in_D)) begin
                    next_state = S15;
                end
                else if ((~^(in_D) && in_A)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S13;
                end
            end
            S13: begin
                next_state = S10;
            end
            S14: begin
                if (~&(in_A)) begin
                    next_state = S0;
                end
                else if (!(in_B)) begin
                    next_state = S12;
                end
                else if (~((in_C || in_D))) begin
                    next_state = S1;
                end
                else if (((in_C == in_A) ^ in_C)) begin
                    next_state = S4;
                end
                else if (~((in_B > in_C))) begin
                    next_state = S6;
                end
                else if (~|((in_A <= 'd1))) begin
                    next_state = S14;
                end
                else begin
                    next_state = S7;
                end
            end
            S15: begin
                if ((^(in_D) != 'd0)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S6;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_32_40_32_2,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
            end
            S1: begin
                if ((in_C == in_D)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S29;
                end
            end
            S2: begin
                if (~(in_B)) begin
                    next_state = S11;
                end
                else if ((in_C && (in_D ^ in_C))) begin
                    next_state = S14;
                end
                else if ((|(in_A) == in_C)) begin
                    next_state = S24;
                end
                else begin
                    next_state = S1;
                end
            end
            S3: begin
                next_state = S25;
            end
            S4: begin
                next_state = S13;
            end
            S5: begin
                if (((in_B || in_C) && in_D)) begin
                    next_state = S18;
                end
                else if (~&((in_A != in_C))) begin
                    next_state = S27;
                end
                else begin
                    next_state = S14;
                end
            end
            S6: begin
                next_state = S28;
            end
            S7: begin
                next_state = S22;
            end
            S8: begin
                if (((in_C && in_B) == 'd1)) begin
                    next_state = S20;
                end
                else if (((in_A == in_B) || (in_C != 'd1))) begin
                    next_state = S14;
                end
                else begin
                    next_state = S22;
                end
            end
            S9: begin
                if (|((in_D || in_C))) begin
                    next_state = S16;
                end
                else begin
                    next_state = S30;
                end
            end
            S10: begin
                next_state = S5;
            end
            S11: begin
            end
            S12: begin
            end
            S13: begin
                next_state = S31;
            end
            S14: begin
                next_state = S30;
            end
            S15: begin
            end
            S16: begin
                next_state = S5;
            end
            S17: begin
                next_state = S10;
            end
            S18: begin
                next_state = S27;
            end
            S19: begin
                if ((in_B && in_C)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S7;
                end
            end
            S20: begin
            end
            S21: begin
                if (((in_B > 'd0) ^ (in_C && in_B))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S23;
                end
            end
            S22: begin
            end
            S23: begin
                if (((in_C == 'd0) != (in_D && in_A))) begin
                    next_state = S1;
                end
                else begin
                    next_state = S15;
                end
            end
            S24: begin
                next_state = S21;
            end
            S25: begin
                if (~|(in_D)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S6;
                end
            end
            S26: begin
            end
            S27: begin
                if ((in_A != 'd0)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S17;
                end
            end
            S28: begin
                next_state = S8;
            end
            S29: begin
                if (((in_A || in_B) ^ (in_C || in_B))) begin
                    next_state = S4;
                end
                else if ((in_D == 'd1)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S19;
                end
            end
            S30: begin
            end
            S31: begin
                next_state = S26;
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_32_40_32_4,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_D || (in_A ^ in_B))) begin
                    next_state = S8;
                end
                else if ((in_B >= 'd1)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S17;
                end
            end
            S1: begin
                if (((in_C ^ in_D) != (in_A == 'd1))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S19;
                end
            end
            S2: begin
                next_state = S28;
            end
            S3: begin
            end
            S4: begin
                if ((in_A ^ in_D)) begin
                    next_state = S21;
                end
                else begin
                    next_state = S17;
                end
            end
            S5: begin
            end
            S6: begin
            end
            S7: begin
                next_state = S21;
            end
            S8: begin
                if (&((in_C != in_A))) begin
                    next_state = S6;
                end
                else begin
                    next_state = S3;
                end
            end
            S9: begin
                if (((in_A != 'd0) && in_C)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S22;
                end
            end
            S10: begin
                if ((in_C != 'd1)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S23;
                end
            end
            S11: begin
                if ((in_A != 'd0)) begin
                    next_state = S24;
                end
                else begin
                    next_state = S26;
                end
            end
            S12: begin
            end
            S13: begin
            end
            S14: begin
            end
            S15: begin
                if (((in_A || in_B) != 'd0)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S0;
                end
            end
            S16: begin
                if ((in_A != 'd0)) begin
                    next_state = S22;
                end
                else begin
                    next_state = S29;
                end
            end
            S17: begin
                if ((in_A > 'd1)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S1;
                end
            end
            S18: begin
            end
            S19: begin
                next_state = S20;
            end
            S20: begin
                next_state = S15;
            end
            S21: begin
            end
            S22: begin
                next_state = S9;
            end
            S23: begin
                next_state = S2;
            end
            S24: begin
                next_state = S30;
            end
            S25: begin
                if (~&(in_D)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S27;
                end
            end
            S26: begin
                next_state = S12;
            end
            S27: begin
                if (((in_A ^ in_D) != 'd0)) begin
                    next_state = S16;
                end
                else if ((~&(in_C) != 'd0)) begin
                    next_state = S21;
                end
                else begin
                    next_state = S25;
                end
            end
            S28: begin
                if ((~(in_C) >= 'd0)) begin
                    next_state = S18;
                end
                else if (((in_C == in_A) || (in_C && in_A))) begin
                    next_state = S25;
                end
                else begin
                    next_state = S31;
                end
            end
            S29: begin
            end
            S30: begin
                next_state = S13;
            end
            S31: begin
                if (((in_A ^ in_C) ^ in_D)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S10;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_32_40_64_2,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                next_state = S1;
            end
            S1: begin
                if (((in_D ^ in_B) == 'd0)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S20;
                end
            end
            S2: begin
                next_state = S21;
            end
            S3: begin
                next_state = S26;
            end
            S4: begin
                next_state = S22;
            end
            S5: begin
                next_state = S13;
            end
            S6: begin
                next_state = S12;
            end
            S7: begin
            end
            S8: begin
                if ((in_B != (in_D ^ in_A))) begin
                    next_state = S11;
                end
                else if ((in_B && in_C)) begin
                    next_state = S18;
                end
                else begin
                    next_state = S19;
                end
            end
            S9: begin
                if (((in_A || in_D) ^ in_B)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S26;
                end
            end
            S10: begin
            end
            S11: begin
            end
            S12: begin
                if (((in_D && in_B) == (in_A != 'd1))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S29;
                end
            end
            S13: begin
                next_state = S27;
            end
            S14: begin
            end
            S15: begin
                next_state = S4;
            end
            S16: begin
                if ((~^(in_C) ^ (in_B == 'd1))) begin
                    next_state = S0;
                end
                else if ((in_B || in_D)) begin
                    next_state = S6;
                end
                else if ((in_C != 'd0)) begin
                    next_state = S20;
                end
                else if ((in_C == in_B)) begin
                    next_state = S30;
                end
                else begin
                    next_state = S16;
                end
            end
            S17: begin
            end
            S18: begin
                next_state = S17;
            end
            S19: begin
                next_state = S9;
            end
            S20: begin
                next_state = S15;
            end
            S21: begin
            end
            S22: begin
                if (&(in_C)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S10;
                end
            end
            S23: begin
                next_state = S2;
            end
            S24: begin
            end
            S25: begin
            end
            S26: begin
                if (~((in_D && in_A))) begin
                    next_state = S23;
                end
                else if (~^(in_D)) begin
                    next_state = S25;
                end
                else begin
                    next_state = S26;
                end
            end
            S27: begin
                if (((in_D ^ in_A) ^ in_B)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S28;
                end
            end
            S28: begin
                if (^((in_B || in_C))) begin
                    next_state = S24;
                end
                else if ((~^(in_C) && in_A)) begin
                    next_state = S31;
                end
                else begin
                    next_state = S26;
                end
            end
            S29: begin
                next_state = S14;
            end
            S30: begin
            end
            S31: begin
                if (~^(in_A)) begin
                    next_state = S22;
                end
                else begin
                    next_state = S28;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_32_40_64_4,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                next_state = S29;
            end
            S1: begin
                next_state = S20;
            end
            S2: begin
            end
            S3: begin
                next_state = S9;
            end
            S4: begin
                if ((in_D < 'd1)) begin
                    next_state = S0;
                end
                else if (|(in_A)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S19;
                end
            end
            S5: begin
                if (~&((in_C != in_B))) begin
                    next_state = S16;
                end
                else begin
                    next_state = S17;
                end
            end
            S6: begin
                if ((in_B && in_C)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S24;
                end
            end
            S7: begin
                if ((~^(in_C) || in_A)) begin
                    next_state = S25;
                end
                else begin
                    next_state = S0;
                end
            end
            S8: begin
                if ((in_C ^ (in_B && in_C))) begin
                    next_state = S31;
                end
                else begin
                    next_state = S28;
                end
            end
            S9: begin
                if ((~(in_A) == in_D)) begin
                    next_state = S22;
                end
                else begin
                    next_state = S27;
                end
            end
            S10: begin
                if (~&((in_A == in_B))) begin
                    next_state = S5;
                end
                else if (((in_C && in_D) == 'd1)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S21;
                end
            end
            S11: begin
                next_state = S4;
            end
            S12: begin
            end
            S13: begin
                if ((in_C && in_A)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S11;
                end
            end
            S14: begin
                next_state = S28;
            end
            S15: begin
            end
            S16: begin
                next_state = S30;
            end
            S17: begin
                next_state = S6;
            end
            S18: begin
                next_state = S11;
            end
            S19: begin
            end
            S20: begin
            end
            S21: begin
                next_state = S15;
            end
            S22: begin
                next_state = S1;
            end
            S23: begin
                next_state = S18;
            end
            S24: begin
            end
            S25: begin
                if (^(in_D)) begin
                    next_state = S23;
                end
                else begin
                    next_state = S28;
                end
            end
            S26: begin
                next_state = S1;
            end
            S27: begin
                next_state = S10;
            end
            S28: begin
                next_state = S30;
            end
            S29: begin
                if (~((in_C != in_B))) begin
                    next_state = S3;
                end
                else if (~^(in_B)) begin
                    next_state = S7;
                end
                else if ((in_D ^ in_C)) begin
                    next_state = S17;
                end
                else if (((in_C || in_B) == 'd0)) begin
                    next_state = S26;
                end
                else begin
                    next_state = S20;
                end
            end
            S30: begin
            end
            S31: begin
                next_state = S8;
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_32_80_32_2,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (((in_A == 'd1) && (in_C == 'd0))) begin
                    next_state = S24;
                end
                else begin
                    next_state = S14;
                end
            end
            S1: begin
                if (((in_C == 'd0) && (in_D && in_A))) begin
                    next_state = S2;
                end
                else if ((in_D == (in_B ^ in_C))) begin
                    next_state = S7;
                end
                else if ((in_D == 'd0)) begin
                    next_state = S18;
                end
                else if (((in_B && in_D) && in_A)) begin
                    next_state = S31;
                end
                else if ((in_D <= (in_B != 'd0))) begin
                    next_state = S24;
                end
                else begin
                    next_state = S26;
                end
            end
            S2: begin
                next_state = S13;
            end
            S3: begin
                if (((in_C != 'd0) ^ in_D)) begin
                    next_state = S21;
                end
                else if (((in_B ^ in_C) && in_D)) begin
                    next_state = S28;
                end
                else if ((in_B == 'd0)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S6;
                end
            end
            S4: begin
                if (~&((in_C || in_B))) begin
                    next_state = S3;
                end
                else if ((in_D != 'd1)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S17;
                end
            end
            S5: begin
                if ((|(in_D) != 'd0)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S6;
                end
            end
            S6: begin
                next_state = S26;
            end
            S7: begin
                if ((in_A != 'd1)) begin
                    next_state = S23;
                end
                else if (~(|(in_D))) begin
                    next_state = S26;
                end
                else begin
                    next_state = S24;
                end
            end
            S8: begin
                if ((~&(in_C) && in_A)) begin
                    next_state = S1;
                end
                else if ((&(in_A) ^ (in_D == 'd1))) begin
                    next_state = S22;
                end
                else if (~&(in_B)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S24;
                end
            end
            S9: begin
                if ((in_A || (in_D || in_C))) begin
                    next_state = S10;
                end
                else if ((in_A >= (in_D == 'd1))) begin
                    next_state = S25;
                end
                else if (((in_C == 'd0) == 'd0)) begin
                    next_state = S27;
                end
                else if ((in_A ^ in_B)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S12;
                end
            end
            S10: begin
                if (((in_D == 'd0) && (in_C || in_A))) begin
                    next_state = S4;
                end
                else if (~(in_B)) begin
                    next_state = S11;
                end
                else if (~&(in_B)) begin
                    next_state = S30;
                end
                else begin
                    next_state = S31;
                end
            end
            S11: begin
                if (((in_A ^ in_B) && (in_C && in_A))) begin
                    next_state = S5;
                end
                else begin
                    next_state = S9;
                end
            end
            S12: begin
                if ((|(in_C) || (in_B && in_A))) begin
                    next_state = S22;
                end
                else if ((~(in_D) == 'd1)) begin
                    next_state = S30;
                end
                else begin
                    next_state = S27;
                end
            end
            S13: begin
                if (((in_C ^ in_D) == 'd1)) begin
                    next_state = S0;
                end
                else if (~&(in_C)) begin
                    next_state = S31;
                end
                else if (~^(in_C)) begin
                    next_state = S15;
                end
                else if ((in_A != 'd0)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S26;
                end
            end
            S14: begin
                next_state = S11;
            end
            S15: begin
                next_state = S5;
            end
            S16: begin
                next_state = S12;
            end
            S17: begin
                if (((in_C == 'd1) ^ (in_D && in_C))) begin
                    next_state = S6;
                end
                else if (((in_A ^ in_B) || in_D)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S7;
                end
            end
            S18: begin
                if ((in_D == in_C)) begin
                    next_state = S1;
                end
                else if ((~|(in_C) && (in_D == 'd0))) begin
                    next_state = S4;
                end
                else if ((in_B != in_D)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S10;
                end
            end
            S19: begin
                if (((in_B == in_A) != in_B)) begin
                    next_state = S15;
                end
                else if (((in_C && in_D) != (in_C != 'd0))) begin
                    next_state = S29;
                end
                else begin
                    next_state = S10;
                end
            end
            S20: begin
                if (((in_B == 'd0) && in_C)) begin
                    next_state = S14;
                end
                else if (~|((in_D == in_C))) begin
                    next_state = S19;
                end
                else begin
                    next_state = S21;
                end
            end
            S21: begin
                if ((in_A && (in_B && in_D))) begin
                    next_state = S29;
                end
                else begin
                    next_state = S7;
                end
            end
            S22: begin
            end
            S23: begin
                if ((in_C == in_B)) begin
                    next_state = S20;
                end
                else if (((in_A || in_B) && in_D)) begin
                    next_state = S29;
                end
                else begin
                    next_state = S6;
                end
            end
            S24: begin
                if (^(in_D)) begin
                    next_state = S12;
                end
                else if (((in_C ^ in_D) == in_B)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S30;
                end
            end
            S25: begin
            end
            S26: begin
                next_state = S16;
            end
            S27: begin
                if (((in_D && in_B) || (in_A == in_D))) begin
                    next_state = S17;
                end
                else if ((in_A ^ in_D)) begin
                    next_state = S24;
                end
                else begin
                    next_state = S26;
                end
            end
            S28: begin
            end
            S29: begin
                if (~(in_C)) begin
                    next_state = S8;
                end
                else if ((in_A || (in_B == 'd0))) begin
                    next_state = S4;
                end
                else begin
                    next_state = S1;
                end
            end
            S30: begin
                next_state = S4;
            end
            S31: begin
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_32_80_32_4,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((!(in_B) && in_A)) begin
                    next_state = S21;
                end
                else begin
                    next_state = S18;
                end
            end
            S1: begin
                if ((in_C != 'd0)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S1;
                end
            end
            S2: begin
                if (((in_D ^ in_B) > 'd0)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S4;
                end
            end
            S3: begin
                next_state = S23;
            end
            S4: begin
                if (^(in_A)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S13;
                end
            end
            S5: begin
                next_state = S14;
            end
            S6: begin
                if ((~&(in_D) != 'd1)) begin
                    next_state = S11;
                end
                else if (~&(in_D)) begin
                    next_state = S13;
                end
                else if ((in_A != 'd1)) begin
                    next_state = S15;
                end
                else if ((in_D != 'd1)) begin
                    next_state = S19;
                end
                else if ((in_A || in_C)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S29;
                end
            end
            S7: begin
                if ((in_C ^ in_A)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S27;
                end
            end
            S8: begin
                if ((in_D != (in_A == 'd0))) begin
                    next_state = S14;
                end
                else if ((in_B ^ in_C)) begin
                    next_state = S22;
                end
                else begin
                    next_state = S18;
                end
            end
            S9: begin
                if ((in_C != 'd0)) begin
                    next_state = S23;
                end
                else begin
                    next_state = S24;
                end
            end
            S10: begin
                if ((in_C == ^(in_A))) begin
                    next_state = S8;
                end
                else if (((in_A && in_D) || (in_C || in_D))) begin
                    next_state = S28;
                end
                else begin
                    next_state = S15;
                end
            end
            S11: begin
                next_state = S23;
            end
            S12: begin
                next_state = S1;
            end
            S13: begin
                if (~|(in_B)) begin
                    next_state = S25;
                end
                else if (((in_D && in_C) ^ ~(in_B))) begin
                    next_state = S3;
                end
                else if ((in_A != in_C)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S4;
                end
            end
            S14: begin
                if (|((in_B || in_D))) begin
                    next_state = S9;
                end
                else if (((in_D == 'd0) == in_B)) begin
                    next_state = S25;
                end
                else begin
                    next_state = S15;
                end
            end
            S15: begin
                if ((in_A || in_D)) begin
                    next_state = S24;
                end
                else begin
                    next_state = S15;
                end
            end
            S16: begin
                if (((in_D != in_A) || (in_B ^ in_C))) begin
                    next_state = S1;
                end
                else if ((in_A != (in_D || in_A))) begin
                    next_state = S29;
                end
                else begin
                    next_state = S17;
                end
            end
            S17: begin
                if (((in_B >= in_D) >= 'd0)) begin
                    next_state = S7;
                end
                else if (((in_D && in_C) != in_B)) begin
                    next_state = S20;
                end
                else if (((in_A != 'd0) || (in_B && in_C))) begin
                    next_state = S0;
                end
                else if ((in_B >= 'd0)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S10;
                end
            end
            S18: begin
                if ((in_C ^ (in_A != 'd1))) begin
                    next_state = S3;
                end
                else if (|(^(in_C))) begin
                    next_state = S27;
                end
                else begin
                    next_state = S18;
                end
            end
            S19: begin
                if ((in_A ^ in_B)) begin
                    next_state = S6;
                end
                else if ((in_B != 'd0)) begin
                    next_state = S26;
                end
                else begin
                    next_state = S30;
                end
            end
            S20: begin
                if ((in_C != (in_A && in_D))) begin
                    next_state = S10;
                end
                else begin
                    next_state = S24;
                end
            end
            S21: begin
                if (((in_A != 'd1) && in_C)) begin
                    next_state = S31;
                end
                else if (((in_A ^ in_B) || in_C)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S3;
                end
            end
            S22: begin
                next_state = S15;
            end
            S23: begin
                if (((in_D != 'd1) != 'd0)) begin
                    next_state = S9;
                end
                else if (((in_B != in_D) ^ in_B)) begin
                    next_state = S10;
                end
                else if ((in_B != 'd0)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S25;
                end
            end
            S24: begin
                if (!((in_B < 'd0))) begin
                    next_state = S6;
                end
                else if ((in_D == 'd1)) begin
                    next_state = S15;
                end
                else if (((in_D == 'd0) ^ in_A)) begin
                    next_state = S28;
                end
                else begin
                    next_state = S16;
                end
            end
            S25: begin
                if (((in_D ^ in_C) != (in_A || in_D))) begin
                    next_state = S0;
                end
                else if (((in_A <= 'd0) == 'd1)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S28;
                end
            end
            S26: begin
                if ((in_D && in_B)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S18;
                end
            end
            S27: begin
                if ((in_D == 'd1)) begin
                    next_state = S20;
                end
                else begin
                    next_state = S3;
                end
            end
            S28: begin
                if ((in_A == 'd0)) begin
                    next_state = S17;
                end
                else begin
                    next_state = S29;
                end
            end
            S29: begin
            end
            S30: begin
                if ((in_C ^ (in_A || in_D))) begin
                    next_state = S4;
                end
                else begin
                    next_state = S19;
                end
            end
            S31: begin
                if (((in_D == 'd0) <= 'd0)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S2;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_32_80_64_2,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_C || in_A)) begin
                    next_state = S25;
                end
                else begin
                    next_state = S10;
                end
            end
            S1: begin
                next_state = S25;
            end
            S2: begin
                if ((in_D >= 'd0)) begin
                    next_state = S17;
                end
                else if ((|(in_D) && (in_A == 'd0))) begin
                    next_state = S18;
                end
                else begin
                    next_state = S27;
                end
            end
            S3: begin
            end
            S4: begin
                if ((in_A ^ in_C)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S20;
                end
            end
            S5: begin
                next_state = S2;
            end
            S6: begin
                if (((in_D && in_A) || (in_B <= 'd0))) begin
                    next_state = S22;
                end
                else begin
                    next_state = S12;
                end
            end
            S7: begin
                if ((in_A || (in_C && in_A))) begin
                    next_state = S6;
                end
                else if ((in_D != 'd1)) begin
                    next_state = S9;
                end
                else if (!((in_C || in_D))) begin
                    next_state = S26;
                end
                else begin
                    next_state = S30;
                end
            end
            S8: begin
                next_state = S5;
            end
            S9: begin
            end
            S10: begin
                next_state = S31;
            end
            S11: begin
                next_state = S26;
            end
            S12: begin
                if (((in_D != 'd0) < 'd0)) begin
                    next_state = S3;
                end
                else if (^((in_D ^ in_C))) begin
                    next_state = S4;
                end
                else if ((in_D && (in_A ^ in_C))) begin
                    next_state = S10;
                end
                else if (((in_B == 'd0) && in_C)) begin
                    next_state = S16;
                end
                else if (((in_A == in_C) != 'd1)) begin
                    next_state = S19;
                end
                else if (((in_C && in_B) && (in_A != 'd1))) begin
                    next_state = S23;
                end
                else begin
                    next_state = S2;
                end
            end
            S13: begin
                if ((~|(in_B) != 'd0)) begin
                    next_state = S30;
                end
                else if ((in_A || (in_D && in_C))) begin
                    next_state = S23;
                end
                else if (((in_C || in_A) ^ (in_B > 'd0))) begin
                    next_state = S0;
                end
                else if (~&(in_D)) begin
                    next_state = S27;
                end
                else begin
                    next_state = S29;
                end
            end
            S14: begin
                if (((in_A == 'd1) == 'd1)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S23;
                end
            end
            S15: begin
                if ((in_A == 'd1)) begin
                    next_state = S20;
                end
                else if (((in_B == 'd1) || in_C)) begin
                    next_state = S27;
                end
                else if (((in_D ^ in_A) == 'd0)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S13;
                end
            end
            S16: begin
                next_state = S23;
            end
            S17: begin
                if ((in_B || ~|(in_A))) begin
                    next_state = S5;
                end
                else if (((in_A != 'd1) && (in_D && in_C))) begin
                    next_state = S2;
                end
                else begin
                    next_state = S25;
                end
            end
            S18: begin
                if (((in_C == in_D) || in_B)) begin
                    next_state = S15;
                end
                else if (~^((in_B != 'd1))) begin
                    next_state = S18;
                end
                else if (~^((in_C >= 'd0))) begin
                    next_state = S30;
                end
                else begin
                    next_state = S25;
                end
            end
            S19: begin
                if ((~(in_A) ^ (in_C ^ in_D))) begin
                    next_state = S2;
                end
                else begin
                    next_state = S16;
                end
            end
            S20: begin
                if ((in_D == 'd0)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S14;
                end
            end
            S21: begin
                next_state = S26;
            end
            S22: begin
                if (^((in_C ^ in_B))) begin
                    next_state = S1;
                end
                else if (~&(in_D)) begin
                    next_state = S31;
                end
                else begin
                    next_state = S4;
                end
            end
            S23: begin
                if (!((in_C == 'd1))) begin
                    next_state = S12;
                end
                else if (~&(in_C)) begin
                    next_state = S13;
                end
                else if ((in_A ^ in_C)) begin
                    next_state = S19;
                end
                else begin
                    next_state = S4;
                end
            end
            S24: begin
                if (!((in_A && in_C))) begin
                    next_state = S5;
                end
                else if ((in_B > in_C)) begin
                    next_state = S29;
                end
                else begin
                    next_state = S7;
                end
            end
            S25: begin
                if ((!(in_C) >= 'd1)) begin
                    next_state = S23;
                end
                else if (((in_B > 'd1) && in_C)) begin
                    next_state = S28;
                end
                else begin
                    next_state = S30;
                end
            end
            S26: begin
                next_state = S29;
            end
            S27: begin
                if (((in_A && in_D) == 'd0)) begin
                    next_state = S28;
                end
                else begin
                    next_state = S29;
                end
            end
            S28: begin
                if (!(in_D)) begin
                    next_state = S0;
                end
                else if ((~&(in_B) && ~&(in_A))) begin
                    next_state = S24;
                end
                else if ((in_A ^ (in_D == in_C))) begin
                    next_state = S26;
                end
                else begin
                    next_state = S14;
                end
            end
            S29: begin
                if ((in_B || in_C)) begin
                    next_state = S21;
                end
                else if ((~&(in_C) != 'd1)) begin
                    next_state = S25;
                end
                else begin
                    next_state = S27;
                end
            end
            S30: begin
                if (!(in_D)) begin
                    next_state = S7;
                end
                else if ((in_C == 'd1)) begin
                    next_state = S18;
                end
                else begin
                    next_state = S15;
                end
            end
            S31: begin
                if ((in_A != in_C)) begin
                    next_state = S14;
                end
                else if (((in_D < 'd0) == 'd0)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S18;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_32_80_64_4,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                next_state = S1;
            end
            S1: begin
                next_state = S5;
            end
            S2: begin
                if (~|(in_B)) begin
                    next_state = S13;
                end
                else if (~(in_C)) begin
                    next_state = S14;
                end
                else if (~&(in_C)) begin
                    next_state = S24;
                end
                else begin
                    next_state = S0;
                end
            end
            S3: begin
            end
            S4: begin
                if (((in_A ^ in_C) != (in_A <= in_D))) begin
                    next_state = S30;
                end
                else begin
                    next_state = S24;
                end
            end
            S5: begin
                next_state = S10;
            end
            S6: begin
                if (((in_C && in_B) || (in_A != 'd1))) begin
                    next_state = S7;
                end
                else if ((in_B ^ in_A)) begin
                    next_state = S11;
                end
                else if (((in_B != 'd1) == in_D)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S25;
                end
            end
            S7: begin
                if ((~(in_A) && in_D)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S23;
                end
            end
            S8: begin
                if ((in_A != in_B)) begin
                    next_state = S15;
                end
                else if (((in_B > in_D) == ~(in_C))) begin
                    next_state = S21;
                end
                else if (((in_A <= in_D) || (in_A <= 'd1))) begin
                    next_state = S24;
                end
                else begin
                    next_state = S10;
                end
            end
            S9: begin
                if ((in_A && in_C)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S7;
                end
            end
            S10: begin
                if (((in_A || in_C) == 'd0)) begin
                    next_state = S27;
                end
                else if (!(in_B)) begin
                    next_state = S31;
                end
                else if ((in_C && (in_D || in_B))) begin
                    next_state = S7;
                end
                else begin
                    next_state = S26;
                end
            end
            S11: begin
                if (((in_A != 'd0) == (in_D < in_A))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S22;
                end
            end
            S12: begin
                if (((in_A >= 'd0) ^ in_C)) begin
                    next_state = S31;
                end
                else if (((in_A != 'd1) < 'd1)) begin
                    next_state = S28;
                end
                else begin
                    next_state = S2;
                end
            end
            S13: begin
                if ((in_B != (in_C != 'd0))) begin
                    next_state = S7;
                end
                else if (&((in_C ^ in_B))) begin
                    next_state = S24;
                end
                else begin
                    next_state = S9;
                end
            end
            S14: begin
                next_state = S12;
            end
            S15: begin
                if ((in_C != 'd1)) begin
                    next_state = S9;
                end
                else if (~((in_A || in_B))) begin
                    next_state = S20;
                end
                else if ((in_A ^ in_B)) begin
                    next_state = S28;
                end
                else if (|((in_B != in_A))) begin
                    next_state = S19;
                end
                else if ((in_C != 'd1)) begin
                    next_state = S24;
                end
                else begin
                    next_state = S0;
                end
            end
            S16: begin
                if (((in_A && in_B) || (in_C == in_D))) begin
                    next_state = S6;
                end
                else if ((in_B ^ (in_D == 'd0))) begin
                    next_state = S12;
                end
                else begin
                    next_state = S5;
                end
            end
            S17: begin
                next_state = S31;
            end
            S18: begin
                if ((in_C ^ in_D)) begin
                    next_state = S1;
                end
                else if (|((in_A != in_D))) begin
                    next_state = S26;
                end
                else if ((in_A ^ in_C)) begin
                    next_state = S29;
                end
                else if (((in_B ^ in_A) && in_B)) begin
                    next_state = S8;
                end
                else if ((in_D == (in_B && in_D))) begin
                    next_state = S11;
                end
                else begin
                    next_state = S3;
                end
            end
            S19: begin
                if (~&(!(in_D))) begin
                    next_state = S5;
                end
                else if (((in_B == 'd1) != (in_C ^ in_D))) begin
                    next_state = S10;
                end
                else if ((in_C && in_B)) begin
                    next_state = S26;
                end
                else begin
                    next_state = S22;
                end
            end
            S20: begin
                if ((in_D != 'd1)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S1;
                end
            end
            S21: begin
                if ((in_B && in_A)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S28;
                end
            end
            S22: begin
                if (((in_A != 'd0) == (in_C ^ in_A))) begin
                    next_state = S15;
                end
                else begin
                    next_state = S18;
                end
            end
            S23: begin
                if (((in_A && in_D) && (in_C && in_B))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S18;
                end
            end
            S24: begin
                if ((in_A != in_C)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S2;
                end
            end
            S25: begin
                if (&(in_C)) begin
                    next_state = S2;
                end
                else if ((in_D >= in_B)) begin
                    next_state = S17;
                end
                else begin
                    next_state = S29;
                end
            end
            S26: begin
                if (((in_C == 'd1) && in_A)) begin
                    next_state = S19;
                end
                else begin
                    next_state = S21;
                end
            end
            S27: begin
            end
            S28: begin
                if (((in_C || in_A) != in_B)) begin
                    next_state = S25;
                end
                else if (~^(in_D)) begin
                    next_state = S18;
                end
                else begin
                    next_state = S10;
                end
            end
            S29: begin
                next_state = S9;
            end
            S30: begin
                if ((in_C != in_A)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S26;
                end
            end
            S31: begin
                if ((~(in_C) < 'd1)) begin
                    next_state = S30;
                end
                else begin
                    next_state = S3;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_16_40_32_2,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                next_state = S14;
            end
            S1: begin
                if ((in_F || in_D)) begin
                    next_state = S15;
                end
                else if (|((in_A || in_F))) begin
                    next_state = S2;
                end
                else begin
                    next_state = S5;
                end
            end
            S2: begin
                if (((in_A ^ in_D) != 'd0)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S1;
                end
            end
            S3: begin
                if ((in_A == 'd1)) begin
                    next_state = S6;
                end
                else if (~&(in_B)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S2;
                end
            end
            S4: begin
                next_state = S8;
            end
            S5: begin
                next_state = S10;
            end
            S6: begin
                if (~&(&(in_F))) begin
                    next_state = S3;
                end
                else if (((in_E && in_D) != 'd0)) begin
                    next_state = S9;
                end
                else if (((in_E < 'd0) && (in_G && in_F))) begin
                    next_state = S5;
                end
                else begin
                    next_state = S0;
                end
            end
            S7: begin
                if (((in_F != in_A) != &(in_G))) begin
                    next_state = S8;
                end
                else if ((in_D ^ (in_C ^ in_G))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S14;
                end
            end
            S8: begin
                if (((in_B && in_E) || in_B)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S4;
                end
            end
            S9: begin
                if ((in_C ^ in_G)) begin
                    next_state = S0;
                end
                else if (((in_G != 'd0) != in_C)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S13;
                end
            end
            S10: begin
                next_state = S15;
            end
            S11: begin
                if ((in_A != 'd0)) begin
                    next_state = S1;
                end
                else if ((in_B ^ in_H)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S5;
                end
            end
            S12: begin
                if ((in_F < 'd1)) begin
                    next_state = S7;
                end
                else if ((in_D && (in_B == in_H))) begin
                    next_state = S15;
                end
                else if (((in_H ^ in_G) == 'd0)) begin
                    next_state = S5;
                end
                else if ((in_C != 'd1)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S0;
                end
            end
            S13: begin
                if ((in_E ^ in_A)) begin
                    next_state = S7;
                end
                else if ((in_A == in_B)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S12;
                end
            end
            S14: begin
            end
            S15: begin
                if (((in_D && in_B) ^ in_C)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S14;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_16_40_32_4,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (~^((in_E != 'd0))) begin
                    next_state = S14;
                end
                else begin
                    next_state = S7;
                end
            end
            S1: begin
                if ((in_F || in_E)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S10;
                end
            end
            S2: begin
            end
            S3: begin
                next_state = S12;
            end
            S4: begin
                if (((in_A == 'd1) == 'd0)) begin
                    next_state = S0;
                end
                else if (((in_E == 'd0) == (in_D != 'd1))) begin
                    next_state = S7;
                end
                else if ((in_H == 'd0)) begin
                    next_state = S8;
                end
                else if ((in_E == 'd0)) begin
                    next_state = S10;
                end
                else if ((in_G || in_E)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S6;
                end
            end
            S5: begin
                next_state = S2;
            end
            S6: begin
                if (((in_A >= 'd0) != 'd1)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S2;
                end
            end
            S7: begin
                if ((in_D == 'd1)) begin
                    next_state = S2;
                end
                else if (&((in_G == 'd1))) begin
                    next_state = S3;
                end
                else if ((in_F == 'd1)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S11;
                end
            end
            S8: begin
                if (~(in_G)) begin
                    next_state = S1;
                end
                else if ((in_B ^ (in_G ^ in_E))) begin
                    next_state = S9;
                end
                else if (~^(in_H)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S13;
                end
            end
            S9: begin
                if ((in_G <= 'd0)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S7;
                end
            end
            S10: begin
                if (((in_C != 'd0) == (in_G == in_D))) begin
                    next_state = S6;
                end
                else if (((in_B && in_F) && ^(in_E))) begin
                    next_state = S11;
                end
                else if (((in_F && in_D) != (in_H && in_G))) begin
                    next_state = S15;
                end
                else if (((in_B == in_A) ^ (in_F ^ in_H))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S10;
                end
            end
            S11: begin
                next_state = S13;
            end
            S12: begin
                if (~((in_B && in_D))) begin
                    next_state = S5;
                end
                else begin
                    next_state = S13;
                end
            end
            S13: begin
                next_state = S9;
            end
            S14: begin
                if ((in_A != in_G)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S11;
                end
            end
            S15: begin
                if ((in_B || in_E)) begin
                    next_state = S4;
                end
                else if ((in_E != 'd0)) begin
                    next_state = S13;
                end
                else if (((in_B || in_E) && in_F)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S5;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_16_40_64_2,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                next_state = S13;
            end
            S1: begin
                if (!(in_G)) begin
                    next_state = S4;
                end
                else if ((~^(in_F) != in_E)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S9;
                end
            end
            S2: begin
            end
            S3: begin
                if ((in_B > 'd1)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S10;
                end
            end
            S4: begin
                next_state = S4;
            end
            S5: begin
                if ((in_E <= 'd0)) begin
                    next_state = S1;
                end
                else if ((in_D > 'd0)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S9;
                end
            end
            S6: begin
                if (((in_D ^ in_G) && (in_C == in_A))) begin
                    next_state = S5;
                end
                else if (((in_B == in_D) || in_F)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S0;
                end
            end
            S7: begin
                if (((in_A != 'd1) != (in_C != in_F))) begin
                    next_state = S11;
                end
                else if ((~|(in_C) == 'd1)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S5;
                end
            end
            S8: begin
                if (((in_G == in_H) <= 'd0)) begin
                    next_state = S6;
                end
                else if (((in_G != 'd0) < 'd1)) begin
                    next_state = S14;
                end
                else if (((in_D <= in_E) <= in_B)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S10;
                end
            end
            S9: begin
                if (((in_G && in_D) && (in_F ^ in_C))) begin
                    next_state = S7;
                end
                else begin
                    next_state = S10;
                end
            end
            S10: begin
                next_state = S4;
            end
            S11: begin
                if (((in_G == in_H) || (in_F >= 'd1))) begin
                    next_state = S3;
                end
                else if ((|(in_C) == 'd1)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S12;
                end
            end
            S12: begin
                if ((in_D ^ &(in_C))) begin
                    next_state = S2;
                end
                else if ((~(in_G) && (in_C ^ in_E))) begin
                    next_state = S9;
                end
                else begin
                    next_state = S8;
                end
            end
            S13: begin
                if (~|((in_D || in_G))) begin
                    next_state = S0;
                end
                else if ((in_A ^ (in_G != 'd0))) begin
                    next_state = S10;
                end
                else begin
                    next_state = S15;
                end
            end
            S14: begin
                if (^(in_G)) begin
                    next_state = S11;
                end
                else if ((in_F == 'd1)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S15;
                end
            end
            S15: begin
                if ((in_F || ~(in_A))) begin
                    next_state = S12;
                end
                else if ((!(in_A) || (in_B == 'd1))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S11;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_16_40_64_4,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_G ^ (in_B && in_E))) begin
                    next_state = S11;
                end
                else if (((in_C == 'd1) ^ (in_B == 'd1))) begin
                    next_state = S12;
                end
                else begin
                    next_state = S6;
                end
            end
            S1: begin
                if (~|(in_C)) begin
                    next_state = S11;
                end
                else if ((in_F || in_A)) begin
                    next_state = S1;
                end
                else if ((in_C && in_E)) begin
                    next_state = S0;
                end
                else if ((in_C && in_F)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S10;
                end
            end
            S2: begin
            end
            S3: begin
                if (((in_F || in_D) || (in_A ^ in_D))) begin
                    next_state = S4;
                end
                else if ((in_A <= 'd0)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S3;
                end
            end
            S4: begin
            end
            S5: begin
                if ((in_F == 'd1)) begin
                    next_state = S1;
                end
                else if ((in_D ^ (in_H ^ in_A))) begin
                    next_state = S7;
                end
                else if (((in_G ^ in_C) == 'd1)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S3;
                end
            end
            S6: begin
                if (&((in_B || in_C))) begin
                    next_state = S15;
                end
                else begin
                    next_state = S9;
                end
            end
            S7: begin
                if (!((in_D || in_C))) begin
                    next_state = S2;
                end
                else if (~|((in_G <= 'd0))) begin
                    next_state = S9;
                end
                else if (&((in_B ^ in_C))) begin
                    next_state = S12;
                end
                else begin
                    next_state = S3;
                end
            end
            S8: begin
                if ((in_D ^ in_C)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S14;
                end
            end
            S9: begin
                if ((in_F ^ (in_A && in_G))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S8;
                end
            end
            S10: begin
                if ((!(in_E) == 'd0)) begin
                    next_state = S4;
                end
                else if ((in_D == in_F)) begin
                    next_state = S15;
                end
                else if ((in_C ^ (in_E != 'd1))) begin
                    next_state = S3;
                end
                else if (((in_H && in_C) && in_F)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S12;
                end
            end
            S11: begin
                if ((in_A == (in_C < 'd1))) begin
                    next_state = S5;
                end
                else begin
                    next_state = S14;
                end
            end
            S12: begin
                next_state = S3;
            end
            S13: begin
                next_state = S11;
            end
            S14: begin
            end
            S15: begin
                if ((~&(in_C) == 'd0)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S13;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_16_80_32_2,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (((in_A > 'd0) || (in_G || in_C))) begin
                    next_state = S7;
                end
                else if (((in_E != 'd1) || in_F)) begin
                    next_state = S0;
                end
                else if ((in_C != (in_D && in_E))) begin
                    next_state = S13;
                end
                else if ((~(in_F) || in_G)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S10;
                end
            end
            S1: begin
                if ((in_D != 'd0)) begin
                    next_state = S13;
                end
                else if ((in_G == in_A)) begin
                    next_state = S12;
                end
                else if (~((in_H != 'd1))) begin
                    next_state = S14;
                end
                else if (((in_A ^ in_F) ^ in_A)) begin
                    next_state = S0;
                end
                else if (~^((in_B ^ in_E))) begin
                    next_state = S3;
                end
                else if ((in_A != (in_G == 'd1))) begin
                    next_state = S10;
                end
                else if ((in_A != in_C)) begin
                    next_state = S8;
                end
                else if ((in_H <= 'd1)) begin
                    next_state = S11;
                end
                else if ((in_D < 'd0)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S5;
                end
            end
            S2: begin
                if ((in_C || (in_D ^ in_F))) begin
                    next_state = S0;
                end
                else if (((in_C > 'd1) != 'd0)) begin
                    next_state = S6;
                end
                else if ((in_G || in_B)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S2;
                end
            end
            S3: begin
                if ((in_H != 'd1)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S10;
                end
            end
            S4: begin
                if (((in_H || in_G) == 'd1)) begin
                    next_state = S3;
                end
                else if (((in_G || in_C) == 'd1)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S12;
                end
            end
            S5: begin
                if ((in_C != in_F)) begin
                    next_state = S10;
                end
                else if ((in_H || (in_B ^ in_F))) begin
                    next_state = S13;
                end
                else if (((in_H && in_F) && in_B)) begin
                    next_state = S15;
                end
                else if (((in_B != 'd1) != 'd0)) begin
                    next_state = S12;
                end
                else if (~(^(in_B))) begin
                    next_state = S4;
                end
                else begin
                    next_state = S3;
                end
            end
            S6: begin
                if ((in_G != 'd1)) begin
                    next_state = S15;
                end
                else if ((in_E < 'd1)) begin
                    next_state = S9;
                end
                else if ((in_B == 'd1)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S4;
                end
            end
            S7: begin
                if ((in_D != (in_H == 'd0))) begin
                    next_state = S12;
                end
                else if (((in_B == in_E) ^ in_F)) begin
                    next_state = S1;
                end
                else if (((in_F ^ in_D) != 'd1)) begin
                    next_state = S0;
                end
                else if (~|(in_D)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S3;
                end
            end
            S8: begin
                if (&((in_A == 'd1))) begin
                    next_state = S2;
                end
                else if ((in_B != 'd1)) begin
                    next_state = S3;
                end
                else if ((in_E != (in_C == in_F))) begin
                    next_state = S6;
                end
                else if (^(in_E)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S5;
                end
            end
            S9: begin
                if ((in_A ^ (in_H || in_A))) begin
                    next_state = S8;
                end
                else if ((~^(in_C) > 'd1)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S11;
                end
            end
            S10: begin
                if ((in_C < (in_E ^ in_A))) begin
                    next_state = S9;
                end
                else if (((in_G != in_H) < (in_A != 'd1))) begin
                    next_state = S12;
                end
                else begin
                    next_state = S13;
                end
            end
            S11: begin
                next_state = S14;
            end
            S12: begin
                if (|(in_C)) begin
                    next_state = S4;
                end
                else if (((in_C ^ in_G) && in_D)) begin
                    next_state = S11;
                end
                else if (~(in_H)) begin
                    next_state = S13;
                end
                else if ((~^(in_A) ^ ~&(in_F))) begin
                    next_state = S10;
                end
                else if (((in_D ^ in_G) && in_D)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S12;
                end
            end
            S13: begin
                if ((in_E == 'd0)) begin
                    next_state = S12;
                end
                else if (~(in_A)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S13;
                end
            end
            S14: begin
                if (((in_F && in_D) || in_A)) begin
                    next_state = S1;
                end
                else if (((in_A != 'd1) == in_F)) begin
                    next_state = S13;
                end
                else if ((in_B ^ in_C)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S5;
                end
            end
            S15: begin
                if (^(in_H)) begin
                    next_state = S1;
                end
                else if ((in_G == 'd0)) begin
                    next_state = S5;
                end
                else if ((in_E == in_B)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S15;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_16_80_32_4,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_D && (in_H && in_D))) begin
                    next_state = S4;
                end
                else begin
                    next_state = S7;
                end
            end
            S1: begin
                if ((in_G ^ in_B)) begin
                    next_state = S2;
                end
                else if ((in_C != 'd1)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S14;
                end
            end
            S2: begin
                if (((in_G ^ in_C) == 'd1)) begin
                    next_state = S11;
                end
                else if (^(~|(in_C))) begin
                    next_state = S14;
                end
                else if (&(&(in_F))) begin
                    next_state = S6;
                end
                else if (~^(in_D)) begin
                    next_state = S12;
                end
                else if (^(in_F)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S1;
                end
            end
            S3: begin
                if (~(!(in_G))) begin
                    next_state = S11;
                end
                else if ((^(in_C) != 'd1)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S13;
                end
            end
            S4: begin
                if ((in_H && in_B)) begin
                    next_state = S1;
                end
                else if (((in_G && in_F) == 'd0)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S8;
                end
            end
            S5: begin
                if ((in_C == (in_A != in_F))) begin
                    next_state = S3;
                end
                else if ((in_D == (in_F >= in_H))) begin
                    next_state = S9;
                end
                else if (~&((in_E ^ in_G))) begin
                    next_state = S10;
                end
                else if ((in_H && (in_A ^ in_G))) begin
                    next_state = S11;
                end
                else if ((in_F <= 'd0)) begin
                    next_state = S2;
                end
                else if (~|(in_A)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S4;
                end
            end
            S6: begin
                if (((in_D == 'd1) || (in_C != 'd1))) begin
                    next_state = S8;
                end
                else if ((in_C != 'd0)) begin
                    next_state = S15;
                end
                else if ((in_F >= 'd1)) begin
                    next_state = S3;
                end
                else if (((in_E && in_F) && in_B)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S4;
                end
            end
            S7: begin
                if ((in_C ^ in_F)) begin
                    next_state = S14;
                end
                else if ((in_B ^ in_A)) begin
                    next_state = S11;
                end
                else if (((in_D == 'd0) && in_H)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S1;
                end
            end
            S8: begin
                if (~&((in_A ^ in_D))) begin
                    next_state = S14;
                end
                else if (&(in_F)) begin
                    next_state = S9;
                end
                else if ((in_H ^ (in_A || in_F))) begin
                    next_state = S6;
                end
                else if ((in_A != 'd0)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S2;
                end
            end
            S9: begin
                if (((in_G != 'd1) || (in_A && in_E))) begin
                    next_state = S12;
                end
                else if ((in_G && (in_A == in_E))) begin
                    next_state = S10;
                end
                else begin
                    next_state = S6;
                end
            end
            S10: begin
                if (!(in_D)) begin
                    next_state = S13;
                end
                else if ((~^(in_G) ^ (in_A == 'd1))) begin
                    next_state = S2;
                end
                else if (^((in_H ^ in_F))) begin
                    next_state = S9;
                end
                else begin
                    next_state = S6;
                end
            end
            S11: begin
                if (((in_H <= 'd1) != 'd0)) begin
                    next_state = S0;
                end
                else if (((in_C < in_B) || (in_F != 'd1))) begin
                    next_state = S13;
                end
                else if (((in_A == 'd0) || ~|(in_D))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S14;
                end
            end
            S12: begin
                if ((in_H || (in_D < 'd1))) begin
                    next_state = S6;
                end
                else begin
                    next_state = S8;
                end
            end
            S13: begin
                if (((in_H && in_D) ^ in_H)) begin
                    next_state = S15;
                end
                else if (((in_A == 'd0) ^ (in_B ^ in_G))) begin
                    next_state = S8;
                end
                else if (|(in_F)) begin
                    next_state = S3;
                end
                else if (^((in_G && in_H))) begin
                    next_state = S10;
                end
                else if ((in_B ^ ~&(in_F))) begin
                    next_state = S11;
                end
                else if (((in_B && in_D) ^ in_B)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S4;
                end
            end
            S14: begin
                if (((in_F == 'd1) || in_A)) begin
                    next_state = S0;
                end
                else if (((in_C < in_B) ^ (in_F == 'd0))) begin
                    next_state = S5;
                end
                else if (~(in_G)) begin
                    next_state = S2;
                end
                else if ((in_D || (in_C != in_H))) begin
                    next_state = S14;
                end
                else begin
                    next_state = S11;
                end
            end
            S15: begin
                if (~|((in_G != 'd0))) begin
                    next_state = S2;
                end
                else if (&((in_E == in_A))) begin
                    next_state = S4;
                end
                else if (&(in_G)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S11;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_16_80_64_2,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_B || (in_E == 'd0))) begin
                    next_state = S4;
                end
                else if ((in_A != 'd0)) begin
                    next_state = S11;
                end
                else if (((in_F >= in_H) == (in_A || in_E))) begin
                    next_state = S12;
                end
                else if (((in_H ^ in_B) || in_E)) begin
                    next_state = S0;
                end
                else if (((in_D == in_G) != ~&(in_H))) begin
                    next_state = S14;
                end
                else begin
                    next_state = S13;
                end
            end
            S1: begin
                if (((in_G || in_H) || (in_D <= 'd0))) begin
                    next_state = S0;
                end
                else if (((in_E && in_F) == 'd0)) begin
                    next_state = S13;
                end
                else if ((in_F != 'd1)) begin
                    next_state = S15;
                end
                else if ((in_B || ~^(in_F))) begin
                    next_state = S14;
                end
                else begin
                    next_state = S9;
                end
            end
            S2: begin
                if ((in_C != 'd0)) begin
                    next_state = S12;
                end
                else if (((in_D || in_H) < 'd0)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S3;
                end
            end
            S3: begin
                if ((in_A && |(in_C))) begin
                    next_state = S2;
                end
                else begin
                    next_state = S10;
                end
            end
            S4: begin
                if (((in_G && in_H) != 'd0)) begin
                    next_state = S5;
                end
                else if ((~|(in_D) && (in_H == 'd0))) begin
                    next_state = S9;
                end
                else if (^(in_H)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S8;
                end
            end
            S5: begin
                if ((in_E && (in_A <= 'd0))) begin
                    next_state = S11;
                end
                else if ((in_C < 'd1)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S5;
                end
            end
            S6: begin
                if (((in_C && in_H) == 'd0)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S2;
                end
            end
            S7: begin
                if (^(in_F)) begin
                    next_state = S2;
                end
                else if ((in_F == in_C)) begin
                    next_state = S1;
                end
                else if (((in_E != in_C) == in_G)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S11;
                end
            end
            S8: begin
                if ((~^(in_E) ^ in_G)) begin
                    next_state = S2;
                end
                else if ((in_H ^ in_G)) begin
                    next_state = S7;
                end
                else if (((in_D || in_B) ^ (in_F ^ in_C))) begin
                    next_state = S3;
                end
                else if ((in_G <= 'd0)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S0;
                end
            end
            S9: begin
                if ((in_H == in_F)) begin
                    next_state = S3;
                end
                else if ((in_A || (in_C || in_G))) begin
                    next_state = S8;
                end
                else if ((~|(in_F) >= 'd1)) begin
                    next_state = S13;
                end
                else if ((~&(in_H) ^ in_D)) begin
                    next_state = S15;
                end
                else if (!(!(in_A))) begin
                    next_state = S7;
                end
                else if (((in_E ^ in_G) == 'd0)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S2;
                end
            end
            S10: begin
                if ((~&(in_E) ^ (in_C || in_G))) begin
                    next_state = S1;
                end
                else if ((in_B != 'd0)) begin
                    next_state = S4;
                end
                else if ((in_A && in_B)) begin
                    next_state = S7;
                end
                else if ((in_D ^ (in_F ^ in_B))) begin
                    next_state = S3;
                end
                else if ((in_G && (in_F && in_C))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S2;
                end
            end
            S11: begin
                if ((in_G || in_F)) begin
                    next_state = S7;
                end
                else if (~^((in_H == 'd0))) begin
                    next_state = S14;
                end
                else if ((in_E != 'd1)) begin
                    next_state = S15;
                end
                else if (((in_H != 'd0) == (in_E != 'd1))) begin
                    next_state = S0;
                end
                else if ((in_F > 'd0)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S9;
                end
            end
            S12: begin
                if ((in_B ^ in_C)) begin
                    next_state = S10;
                end
                else if ((in_D || (in_C ^ in_G))) begin
                    next_state = S9;
                end
                else if ((in_E != 'd1)) begin
                    next_state = S2;
                end
                else if ((in_C == 'd0)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S3;
                end
            end
            S13: begin
                if (((in_B || in_H) ^ (in_D && in_E))) begin
                    next_state = S6;
                end
                else if (!(in_F)) begin
                    next_state = S4;
                end
                else if (|(in_A)) begin
                    next_state = S11;
                end
                else if ((|(in_D) != 'd1)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S10;
                end
            end
            S14: begin
                if ((in_H && &(in_E))) begin
                    next_state = S14;
                end
                else if (((in_G && in_A) ^ in_H)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S8;
                end
            end
            S15: begin
                if ((in_A != in_D)) begin
                    next_state = S9;
                end
                else if (((in_H != 'd0) || in_E)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S2;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_16_80_64_4,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_D && (in_C || in_D))) begin
                    next_state = S4;
                end
                else if (((in_D >= in_C) == 'd0)) begin
                    next_state = S8;
                end
                else if (~|(in_D)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S6;
                end
            end
            S1: begin
                if ((in_D != 'd0)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S15;
                end
            end
            S2: begin
                if ((in_G && (in_H || in_A))) begin
                    next_state = S6;
                end
                else begin
                    next_state = S10;
                end
            end
            S3: begin
                if ((in_F != 'd0)) begin
                    next_state = S12;
                end
                else if ((in_F && (in_E == in_C))) begin
                    next_state = S6;
                end
                else if ((in_E && in_F)) begin
                    next_state = S7;
                end
                else if ((in_E == 'd0)) begin
                    next_state = S14;
                end
                else if ((&(in_H) || in_E)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S5;
                end
            end
            S4: begin
                if (((in_A == in_E) ^ (in_F || in_C))) begin
                    next_state = S13;
                end
                else if ((in_C && ~(in_G))) begin
                    next_state = S2;
                end
                else if (((in_C && in_B) ^ (in_D < in_B))) begin
                    next_state = S10;
                end
                else if ((in_B > 'd0)) begin
                    next_state = S7;
                end
                else if (&((in_F != in_B))) begin
                    next_state = S9;
                end
                else if (((in_C || in_B) == (in_A != 'd0))) begin
                    next_state = S0;
                end
                else if (((in_A > 'd1) && (in_G ^ in_C))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S15;
                end
            end
            S5: begin
                if ((in_E ^ (in_F == in_A))) begin
                    next_state = S2;
                end
                else if (~((in_E != 'd1))) begin
                    next_state = S9;
                end
                else begin
                    next_state = S0;
                end
            end
            S6: begin
                if (!(in_C)) begin
                    next_state = S12;
                end
                else if (((in_B == 'd1) != 'd0)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S4;
                end
            end
            S7: begin
                if ((in_B != 'd0)) begin
                    next_state = S3;
                end
                else if ((in_F <= 'd1)) begin
                    next_state = S6;
                end
                else if ((in_D != &(in_A))) begin
                    next_state = S15;
                end
                else begin
                    next_state = S7;
                end
            end
            S8: begin
                if (!((in_B && in_G))) begin
                    next_state = S4;
                end
                else begin
                    next_state = S3;
                end
            end
            S9: begin
                if (((in_H || in_E) == 'd0)) begin
                    next_state = S15;
                end
                else if (((in_B == in_E) != 'd1)) begin
                    next_state = S13;
                end
                else if ((in_F || in_C)) begin
                    next_state = S8;
                end
                else if ((in_H && in_B)) begin
                    next_state = S5;
                end
                else if (!(in_H)) begin
                    next_state = S11;
                end
                else if ((~&(in_E) ^ in_H)) begin
                    next_state = S6;
                end
                else if (((in_E != 'd1) && in_H)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S9;
                end
            end
            S10: begin
                if (^((in_B && in_C))) begin
                    next_state = S0;
                end
                else if (((in_A != 'd0) && (in_G || in_C))) begin
                    next_state = S5;
                end
                else if (((in_G == 'd0) ^ !(in_H))) begin
                    next_state = S14;
                end
                else if ((in_H ^ in_G)) begin
                    next_state = S8;
                end
                else if (((in_E > 'd0) != 'd0)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S15;
                end
            end
            S11: begin
                if (((in_C == 'd0) ^ in_B)) begin
                    next_state = S4;
                end
                else if ((in_F || (in_B ^ in_D))) begin
                    next_state = S5;
                end
                else if ((in_G && in_F)) begin
                    next_state = S14;
                end
                else if ((in_D || in_H)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S9;
                end
            end
            S12: begin
                if ((in_D && in_G)) begin
                    next_state = S9;
                end
                else if (((in_G && in_D) != ~&(in_G))) begin
                    next_state = S5;
                end
                else begin
                    next_state = S1;
                end
            end
            S13: begin
                if (~(in_B)) begin
                    next_state = S1;
                end
                else if (^((in_G && in_A))) begin
                    next_state = S11;
                end
                else begin
                    next_state = S8;
                end
            end
            S14: begin
                next_state = S11;
            end
            S15: begin
                if (((in_B && in_G) == 'd1)) begin
                    next_state = S7;
                end
                else if ((in_C != 'd0)) begin
                    next_state = S9;
                end
                else if (((in_F == in_C) ^ in_B)) begin
                    next_state = S3;
                end
                else if (~&((in_B || in_C))) begin
                    next_state = S0;
                end
                else if (&(in_G)) begin
                    next_state = S5;
                end
                else if ((^(in_H) || (in_B && in_G))) begin
                    next_state = S12;
                end
                else begin
                    next_state = S11;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 4;

    parameter S0 = 4'b0000;
    parameter S1 = 4'b0001;
    parameter S2 = 4'b0010;
    parameter S3 = 4'b0011;
    parameter S4 = 4'b0100;
    parameter S5 = 4'b0101;
    parameter S6 = 4'b0110;
    parameter S7 = 4'b0111;
    parameter S8 = 4'b1000;
    parameter S9 = 4'b1001;
    parameter S10 = 4'b1010;
    parameter S11 = 4'b1011;
    parameter S12 = 4'b1100;
    parameter S13 = 4'b1101;
    parameter S14 = 4'b1110;
    parameter S15 = 4'b1111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_32_40_32_2,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (~(!(in_G))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S25;
                end
            end
            S1: begin
                if (((in_D != 'd0) ^ in_C)) begin
                    next_state = S21;
                end
                else begin
                    next_state = S26;
                end
            end
            S2: begin
                next_state = S19;
            end
            S3: begin
                if (~^(in_E)) begin
                    next_state = S27;
                end
                else begin
                    next_state = S31;
                end
            end
            S4: begin
            end
            S5: begin
                next_state = S7;
            end
            S6: begin
                next_state = S20;
            end
            S7: begin
                next_state = S23;
            end
            S8: begin
                if (~^(in_E)) begin
                    next_state = S15;
                end
                else if (&((in_B < 'd1))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S8;
                end
            end
            S9: begin
                if (((in_D == 'd0) > 'd1)) begin
                    next_state = S3;
                end
                else if (((in_F || in_A) || (in_E == in_A))) begin
                    next_state = S13;
                end
                else begin
                    next_state = S18;
                end
            end
            S10: begin
                next_state = S11;
            end
            S11: begin
                if ((in_G != 'd1)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S16;
                end
            end
            S12: begin
                next_state = S6;
            end
            S13: begin
                next_state = S30;
            end
            S14: begin
                if ((in_F ^ in_E)) begin
                    next_state = S2;
                end
                else if (((in_D == 'd0) != 'd0)) begin
                    next_state = S22;
                end
                else begin
                    next_state = S11;
                end
            end
            S15: begin
            end
            S16: begin
                if (((in_H == 'd0) || (in_D || in_C))) begin
                    next_state = S5;
                end
                else begin
                    next_state = S21;
                end
            end
            S17: begin
            end
            S18: begin
                next_state = S9;
            end
            S19: begin
                next_state = S24;
            end
            S20: begin
                next_state = S20;
            end
            S21: begin
                next_state = S29;
            end
            S22: begin
            end
            S23: begin
                if (((in_B ^ in_A) >= 'd0)) begin
                    next_state = S4;
                end
                else if (((in_H && in_E) || in_B)) begin
                    next_state = S28;
                end
                else if (((in_C != in_H) ^ (in_A || in_F))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S19;
                end
            end
            S24: begin
                if (((in_C != 'd1) == 'd0)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S10;
                end
            end
            S25: begin
                next_state = S1;
            end
            S26: begin
                if (((in_A == 'd0) >= 'd0)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S17;
                end
            end
            S27: begin
                next_state = S27;
            end
            S28: begin
            end
            S29: begin
            end
            S30: begin
            end
            S31: begin
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_32_40_32_4,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
            end
            S1: begin
                if (((in_E != 'd0) ^ (in_B && in_A))) begin
                    next_state = S4;
                end
                else begin
                    next_state = S6;
                end
            end
            S2: begin
                next_state = S3;
            end
            S3: begin
            end
            S4: begin
            end
            S5: begin
                next_state = S17;
            end
            S6: begin
                next_state = S2;
            end
            S7: begin
                if (((in_A == in_H) <= 'd0)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S23;
                end
            end
            S8: begin
                next_state = S19;
            end
            S9: begin
                if (|(in_F)) begin
                    next_state = S31;
                end
                else begin
                    next_state = S13;
                end
            end
            S10: begin
                if ((in_B != in_D)) begin
                    next_state = S14;
                end
                else if ((in_G != (in_E || in_H))) begin
                    next_state = S24;
                end
                else begin
                    next_state = S25;
                end
            end
            S11: begin
                if ((in_H < 'd1)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S10;
                end
            end
            S12: begin
                if (~^((in_D == 'd0))) begin
                    next_state = S16;
                end
                else begin
                    next_state = S1;
                end
            end
            S13: begin
                if (((in_B && in_F) ^ ~&(in_B))) begin
                    next_state = S7;
                end
                else if (((in_G || in_C) != 'd0)) begin
                    next_state = S26;
                end
                else begin
                    next_state = S20;
                end
            end
            S14: begin
            end
            S15: begin
            end
            S16: begin
            end
            S17: begin
            end
            S18: begin
                if (((in_G && in_D) > 'd1)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S27;
                end
            end
            S19: begin
                if ((in_C || !(in_G))) begin
                    next_state = S0;
                end
                else if ((in_A != (in_F != 'd1))) begin
                    next_state = S20;
                end
                else begin
                    next_state = S23;
                end
            end
            S20: begin
            end
            S21: begin
                next_state = S8;
            end
            S22: begin
            end
            S23: begin
                next_state = S18;
            end
            S24: begin
                if ((in_G == in_F)) begin
                    next_state = S15;
                end
                else if ((in_F == in_C)) begin
                    next_state = S29;
                end
                else if (((in_E || in_H) || in_G)) begin
                    next_state = S31;
                end
                else begin
                    next_state = S30;
                end
            end
            S25: begin
            end
            S26: begin
            end
            S27: begin
                next_state = S9;
            end
            S28: begin
            end
            S29: begin
                if ((in_A != 'd1)) begin
                    next_state = S5;
                end
                else if (((in_F ^ in_H) == 'd0)) begin
                    next_state = S11;
                end
                else if (((in_D && in_E) == 'd1)) begin
                    next_state = S13;
                end
                else if ((in_B != 'd0)) begin
                    next_state = S27;
                end
                else begin
                    next_state = S30;
                end
            end
            S30: begin
                next_state = S21;
            end
            S31: begin
                if (((in_F == 'd1) == 'd1)) begin
                    next_state = S22;
                end
                else begin
                    next_state = S28;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_32_40_64_2,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                next_state = S30;
            end
            S1: begin
                if ((in_C == ~&(in_A))) begin
                    next_state = S6;
                end
                else begin
                    next_state = S8;
                end
            end
            S2: begin
                next_state = S5;
            end
            S3: begin
                next_state = S25;
            end
            S4: begin
                if ((in_F == 'd0)) begin
                    next_state = S22;
                end
                else begin
                    next_state = S23;
                end
            end
            S5: begin
            end
            S6: begin
                if ((^(in_A) && in_B)) begin
                    next_state = S0;
                end
                else if (~|((in_G == in_A))) begin
                    next_state = S27;
                end
                else begin
                    next_state = S6;
                end
            end
            S7: begin
            end
            S8: begin
                next_state = S17;
            end
            S9: begin
                if (((in_C && in_B) > (in_H || in_F))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S19;
                end
            end
            S10: begin
            end
            S11: begin
                next_state = S31;
            end
            S12: begin
                next_state = S24;
            end
            S13: begin
                next_state = S16;
            end
            S14: begin
            end
            S15: begin
                if ((in_D ^ in_C)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S8;
                end
            end
            S16: begin
                next_state = S2;
            end
            S17: begin
                next_state = S26;
            end
            S18: begin
                if ((in_F && in_H)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S28;
                end
            end
            S19: begin
                if (((in_C && in_E) && (in_A < 'd1))) begin
                    next_state = S1;
                end
                else begin
                    next_state = S27;
                end
            end
            S20: begin
                next_state = S29;
            end
            S21: begin
                next_state = S12;
            end
            S22: begin
            end
            S23: begin
                if (((in_A || in_F) || in_H)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S18;
                end
            end
            S24: begin
                if ((~(in_F) != (in_B == 'd0))) begin
                    next_state = S4;
                end
                else if ((in_B == in_A)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S20;
                end
            end
            S25: begin
                next_state = S10;
            end
            S26: begin
                next_state = S19;
            end
            S27: begin
                next_state = S21;
            end
            S28: begin
            end
            S29: begin
                next_state = S31;
            end
            S30: begin
                if (((in_B == 'd0) ^ ~(in_D))) begin
                    next_state = S11;
                end
                else begin
                    next_state = S10;
                end
            end
            S31: begin
                if (((in_C && in_E) || in_B)) begin
                    next_state = S9;
                end
                else if (((in_E == 'd1) || in_F)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S20;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_32_40_64_4,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                next_state = S31;
            end
            S1: begin
            end
            S2: begin
                next_state = S12;
            end
            S3: begin
                if ((in_G == 'd1)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S19;
                end
            end
            S4: begin
            end
            S5: begin
                if (((in_B ^ in_E) && (in_B != 'd0))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S12;
                end
            end
            S6: begin
                if ((in_A <= 'd1)) begin
                    next_state = S7;
                end
                else if (~^(in_D)) begin
                    next_state = S17;
                end
                else if (^(in_C)) begin
                    next_state = S26;
                end
                else begin
                    next_state = S29;
                end
            end
            S7: begin
            end
            S8: begin
                if (((in_A == 'd1) != in_B)) begin
                    next_state = S18;
                end
                else begin
                    next_state = S22;
                end
            end
            S9: begin
                if ((in_D == 'd0)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S27;
                end
            end
            S10: begin
                next_state = S15;
            end
            S11: begin
                next_state = S16;
            end
            S12: begin
            end
            S13: begin
                next_state = S14;
            end
            S14: begin
                next_state = S5;
            end
            S15: begin
            end
            S16: begin
                next_state = S25;
            end
            S17: begin
                next_state = S21;
            end
            S18: begin
                next_state = S10;
            end
            S19: begin
                next_state = S20;
            end
            S20: begin
                next_state = S13;
            end
            S21: begin
                if ((^(in_C) && (in_F || in_B))) begin
                    next_state = S9;
                end
                else begin
                    next_state = S30;
                end
            end
            S22: begin
                if ((in_D == in_B)) begin
                    next_state = S27;
                end
                else if (~^((in_H || in_B))) begin
                    next_state = S12;
                end
                else begin
                    next_state = S24;
                end
            end
            S23: begin
            end
            S24: begin
                next_state = S14;
            end
            S25: begin
                next_state = S1;
            end
            S26: begin
                if ((in_E != 'd0)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S17;
                end
            end
            S27: begin
                if ((in_F ^ (in_D != 'd1))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S24;
                end
            end
            S28: begin
                if (((in_C == in_A) == in_C)) begin
                    next_state = S6;
                end
                else if (((in_E ^ in_H) && in_F)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S23;
                end
            end
            S29: begin
                next_state = S21;
            end
            S30: begin
                next_state = S28;
            end
            S31: begin
                next_state = S11;
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_32_80_32_2,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (~^(|(in_A))) begin
                    next_state = S24;
                end
                else if ((in_D || (in_E || in_H))) begin
                    next_state = S7;
                end
                else if (!(!(in_F))) begin
                    next_state = S15;
                end
                else begin
                    next_state = S6;
                end
            end
            S1: begin
                if (|(in_E)) begin
                    next_state = S7;
                end
                else if (((in_A == 'd1) != 'd0)) begin
                    next_state = S28;
                end
                else if (((in_H && in_E) || (in_A || in_E))) begin
                    next_state = S2;
                end
                else begin
                    next_state = S13;
                end
            end
            S2: begin
                if (((in_C == 'd0) == in_F)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S9;
                end
            end
            S3: begin
                next_state = S16;
            end
            S4: begin
            end
            S5: begin
                if ((in_C ^ in_A)) begin
                    next_state = S30;
                end
                else begin
                    next_state = S7;
                end
            end
            S6: begin
                if (((in_D >= in_B) ^ in_E)) begin
                    next_state = S5;
                end
                else if (~^((in_A == in_F))) begin
                    next_state = S20;
                end
                else if (((in_G && in_D) || ^(in_H))) begin
                    next_state = S21;
                end
                else begin
                    next_state = S29;
                end
            end
            S7: begin
                if ((in_E && in_H)) begin
                    next_state = S3;
                end
                else if (((in_D && in_F) == 'd1)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S8;
                end
            end
            S8: begin
                if ((in_A != (in_H == 'd1))) begin
                    next_state = S24;
                end
                else if ((in_C == 'd1)) begin
                    next_state = S26;
                end
                else begin
                    next_state = S17;
                end
            end
            S9: begin
            end
            S10: begin
                if (|(in_D)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S2;
                end
            end
            S11: begin
                if ((in_A && (in_B ^ in_A))) begin
                    next_state = S18;
                end
                else begin
                    next_state = S31;
                end
            end
            S12: begin
                if ((~^(in_B) ^ (in_C ^ in_F))) begin
                    next_state = S8;
                end
                else if ((in_C > 'd1)) begin
                    next_state = S3;
                end
                else if (~((in_A == 'd0))) begin
                    next_state = S27;
                end
                else begin
                    next_state = S9;
                end
            end
            S13: begin
                if ((in_H == 'd1)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S22;
                end
            end
            S14: begin
                if (((in_D || in_G) == 'd1)) begin
                    next_state = S11;
                end
                else if ((in_B ^ in_D)) begin
                    next_state = S19;
                end
                else if ((in_H == in_F)) begin
                    next_state = S27;
                end
                else if ((in_G == 'd0)) begin
                    next_state = S6;
                end
                else if ((in_D == ~(in_E))) begin
                    next_state = S10;
                end
                else if ((in_D && in_B)) begin
                    next_state = S20;
                end
                else begin
                    next_state = S2;
                end
            end
            S15: begin
                next_state = S6;
            end
            S16: begin
                if (~|(in_H)) begin
                    next_state = S21;
                end
                else begin
                    next_state = S27;
                end
            end
            S17: begin
                if (((in_A == 'd0) <= 'd1)) begin
                    next_state = S22;
                end
                else begin
                    next_state = S3;
                end
            end
            S18: begin
                next_state = S7;
            end
            S19: begin
                if (~|(in_G)) begin
                    next_state = S25;
                end
                else begin
                    next_state = S11;
                end
            end
            S20: begin
                if (((in_D && in_G) || in_A)) begin
                    next_state = S2;
                end
                else if ((in_E && in_G)) begin
                    next_state = S13;
                end
                else if ((in_A || in_C)) begin
                    next_state = S23;
                end
                else if (&((in_G == 'd0))) begin
                    next_state = S24;
                end
                else if ((in_G == 'd0)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S25;
                end
            end
            S21: begin
                if ((in_B != 'd1)) begin
                    next_state = S14;
                end
                else if ((|(in_D) || in_F)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S26;
                end
            end
            S22: begin
                if (((in_F || in_A) == 'd0)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S2;
                end
            end
            S23: begin
                if (((in_C || in_D) && in_A)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S11;
                end
            end
            S24: begin
                if (|(in_D)) begin
                    next_state = S17;
                end
                else begin
                    next_state = S29;
                end
            end
            S25: begin
                next_state = S23;
            end
            S26: begin
                if (((in_A ^ in_H) ^ in_B)) begin
                    next_state = S10;
                end
                else if ((in_F == 'd0)) begin
                    next_state = S22;
                end
                else begin
                    next_state = S8;
                end
            end
            S27: begin
                if ((in_F && in_C)) begin
                    next_state = S16;
                end
                else if ((in_A ^ ~^(in_C))) begin
                    next_state = S1;
                end
                else if (((in_C ^ in_A) != 'd0)) begin
                    next_state = S25;
                end
                else if (((in_H || in_E) && (in_F || in_E))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S18;
                end
            end
            S28: begin
                next_state = S18;
            end
            S29: begin
            end
            S30: begin
                if (((in_C != 'd1) || in_G)) begin
                    next_state = S22;
                end
                else if ((in_D || (in_A && in_C))) begin
                    next_state = S31;
                end
                else if (^(in_A)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S4;
                end
            end
            S31: begin
                next_state = S10;
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_32_80_32_4,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                next_state = S20;
            end
            S1: begin
                if ((in_F != 'd0)) begin
                    next_state = S4;
                end
                else if ((in_B >= 'd1)) begin
                    next_state = S22;
                end
                else if (((in_B || in_A) != 'd0)) begin
                    next_state = S23;
                end
                else if (~|((in_B && in_A))) begin
                    next_state = S15;
                end
                else begin
                    next_state = S5;
                end
            end
            S2: begin
                if (((in_B || in_H) || in_B)) begin
                    next_state = S13;
                end
                else if (~((in_G && in_B))) begin
                    next_state = S11;
                end
                else if (((in_A >= 'd0) == in_B)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S30;
                end
            end
            S3: begin
                if ((in_G == 'd0)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S10;
                end
            end
            S4: begin
                next_state = S17;
            end
            S5: begin
                if ((in_G ^ in_A)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S23;
                end
            end
            S6: begin
                if (((in_G != in_B) ^ in_E)) begin
                    next_state = S24;
                end
                else if ((in_H && in_E)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S7;
                end
            end
            S7: begin
                if (((in_F ^ in_H) ^ (in_A ^ in_C))) begin
                    next_state = S9;
                end
                else if (((in_D > 'd1) ^ (in_G || in_H))) begin
                    next_state = S11;
                end
                else begin
                    next_state = S31;
                end
            end
            S8: begin
                if (~((in_B || in_H))) begin
                    next_state = S25;
                end
                else if (~|((in_C != 'd1))) begin
                    next_state = S10;
                end
                else if (((in_F && in_A) != 'd0)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S7;
                end
            end
            S9: begin
                if (~^(in_D)) begin
                    next_state = S18;
                end
                else if ((in_D > 'd1)) begin
                    next_state = S27;
                end
                else begin
                    next_state = S26;
                end
            end
            S10: begin
                if (((in_G != in_C) != in_G)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S3;
                end
            end
            S11: begin
                if (((in_C ^ in_G) ^ (in_B || in_F))) begin
                    next_state = S15;
                end
                else begin
                    next_state = S7;
                end
            end
            S12: begin
                if (&((in_H == 'd0))) begin
                    next_state = S7;
                end
                else if ((in_F ^ (in_B && in_H))) begin
                    next_state = S0;
                end
                else if (((in_A != 'd1) == 'd0)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S4;
                end
            end
            S13: begin
                if (((in_F != 'd1) && in_A)) begin
                    next_state = S1;
                end
                else if (((in_E ^ in_G) != 'd0)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S28;
                end
            end
            S14: begin
            end
            S15: begin
                if ((in_H && in_E)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S7;
                end
            end
            S16: begin
                if ((in_A ^ in_F)) begin
                    next_state = S19;
                end
                else if (~((in_E != 'd0))) begin
                    next_state = S21;
                end
                else begin
                    next_state = S22;
                end
            end
            S17: begin
                if ((in_E != in_F)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S25;
                end
            end
            S18: begin
                if (((in_G == 'd0) != in_E)) begin
                    next_state = S12;
                end
                else if ((in_A && in_D)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S8;
                end
            end
            S19: begin
                if (((in_B == 'd1) && (in_D ^ in_G))) begin
                    next_state = S18;
                end
                else begin
                    next_state = S3;
                end
            end
            S20: begin
                next_state = S14;
            end
            S21: begin
                next_state = S13;
            end
            S22: begin
                if (&(in_A)) begin
                    next_state = S29;
                end
                else if (((in_B != in_D) != in_G)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S20;
                end
            end
            S23: begin
                if (~((in_A != in_H))) begin
                    next_state = S2;
                end
                else if ((in_D <= in_A)) begin
                    next_state = S27;
                end
                else if ((in_F || in_C)) begin
                    next_state = S30;
                end
                else if ((in_G && in_A)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S4;
                end
            end
            S24: begin
                if (((in_C != in_A) != in_E)) begin
                    next_state = S26;
                end
                else begin
                    next_state = S23;
                end
            end
            S25: begin
                next_state = S28;
            end
            S26: begin
                next_state = S27;
            end
            S27: begin
                if ((in_H && (in_G == 'd1))) begin
                    next_state = S6;
                end
                else if ((in_G != (in_H && in_A))) begin
                    next_state = S30;
                end
                else begin
                    next_state = S20;
                end
            end
            S28: begin
                if (&((in_A == 'd1))) begin
                    next_state = S3;
                end
                else if ((^(in_C) || in_G)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S18;
                end
            end
            S29: begin
                if (((in_A == 'd0) != 'd1)) begin
                    next_state = S10;
                end
                else if ((in_G ^ in_F)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S18;
                end
            end
            S30: begin
                if ((in_A != 'd0)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S17;
                end
            end
            S31: begin
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_32_80_64_2,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (((in_B || in_F) != 'd1)) begin
                    next_state = S26;
                end
                else begin
                    next_state = S19;
                end
            end
            S1: begin
                next_state = S21;
            end
            S2: begin
                next_state = S3;
            end
            S3: begin
                if ((~|(in_E) != 'd0)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S27;
                end
            end
            S4: begin
                if ((in_G ^ (in_H || in_E))) begin
                    next_state = S19;
                end
                else if (((in_G ^ in_F) && in_C)) begin
                    next_state = S1;
                end
                else if (((in_A != 'd1) == |(in_E))) begin
                    next_state = S11;
                end
                else begin
                    next_state = S20;
                end
            end
            S5: begin
                if (((in_D || in_F) == 'd0)) begin
                    next_state = S18;
                end
                else if (((in_C && in_G) != 'd0)) begin
                    next_state = S14;
                end
                else if (~^((in_C && in_A))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S25;
                end
            end
            S6: begin
                if ((!(in_C) > (in_A != 'd1))) begin
                    next_state = S16;
                end
                else if (((in_G ^ in_C) == 'd0)) begin
                    next_state = S25;
                end
                else begin
                    next_state = S29;
                end
            end
            S7: begin
                if (|((in_C || in_H))) begin
                    next_state = S30;
                end
                else begin
                    next_state = S29;
                end
            end
            S8: begin
                if (!(in_H)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S28;
                end
            end
            S9: begin
                if (^(in_B)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S11;
                end
            end
            S10: begin
                if (|(in_C)) begin
                    next_state = S27;
                end
                else if (!(in_D)) begin
                    next_state = S22;
                end
                else begin
                    next_state = S9;
                end
            end
            S11: begin
                if ((in_A ^ (in_C ^ in_G))) begin
                    next_state = S17;
                end
                else begin
                    next_state = S15;
                end
            end
            S12: begin
                if (((in_B || in_A) == (in_B ^ in_A))) begin
                    next_state = S14;
                end
                else begin
                    next_state = S6;
                end
            end
            S13: begin
                if (((in_E > 'd1) == 'd1)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S12;
                end
            end
            S14: begin
                if (((in_H && in_E) != (in_B == in_F))) begin
                    next_state = S29;
                end
                else begin
                    next_state = S7;
                end
            end
            S15: begin
                if (~|(in_B)) begin
                    next_state = S27;
                end
                else if ((in_F == in_G)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S20;
                end
            end
            S16: begin
                if ((in_A >= 'd1)) begin
                    next_state = S10;
                end
                else if ((in_D || in_F)) begin
                    next_state = S15;
                end
                else if ((in_A == 'd1)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S7;
                end
            end
            S17: begin
                if ((in_B != 'd0)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S13;
                end
            end
            S18: begin
                if ((in_H || in_B)) begin
                    next_state = S24;
                end
                else if (((in_D ^ in_G) != 'd1)) begin
                    next_state = S21;
                end
                else begin
                    next_state = S20;
                end
            end
            S19: begin
                next_state = S8;
            end
            S20: begin
                if ((in_E || in_A)) begin
                    next_state = S12;
                end
                else if (((in_G != 'd0) != in_A)) begin
                    next_state = S24;
                end
                else begin
                    next_state = S8;
                end
            end
            S21: begin
                if ((~(in_H) && (in_G ^ in_C))) begin
                    next_state = S3;
                end
                else if ((in_F <= 'd0)) begin
                    next_state = S26;
                end
                else begin
                    next_state = S27;
                end
            end
            S22: begin
                if ((in_A ^ in_H)) begin
                    next_state = S18;
                end
                else if ((in_G > in_E)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S29;
                end
            end
            S23: begin
                if ((in_H != in_D)) begin
                    next_state = S1;
                end
                else if ((~(in_G) || ~^(in_H))) begin
                    next_state = S30;
                end
                else if ((~|(in_H) >= (in_E == in_A))) begin
                    next_state = S11;
                end
                else begin
                    next_state = S4;
                end
            end
            S24: begin
                if (((in_C && in_B) && (in_A || in_G))) begin
                    next_state = S22;
                end
                else begin
                    next_state = S0;
                end
            end
            S25: begin
                if ((in_E ^ (in_B >= 'd1))) begin
                    next_state = S5;
                end
                else if (~|(in_D)) begin
                    next_state = S27;
                end
                else begin
                    next_state = S18;
                end
            end
            S26: begin
                next_state = S23;
            end
            S27: begin
                next_state = S23;
            end
            S28: begin
                if ((in_D || (in_E && in_H))) begin
                    next_state = S7;
                end
                else if ((in_A ^ in_G)) begin
                    next_state = S31;
                end
                else if (((in_H != 'd0) ^ in_F)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S23;
                end
            end
            S29: begin
                next_state = S4;
            end
            S30: begin
                if ((in_H == (in_F == 'd0))) begin
                    next_state = S19;
                end
                else begin
                    next_state = S14;
                end
            end
            S31: begin
                next_state = S20;
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_32_80_64_4,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_F == 'd0)) begin
                    next_state = S30;
                end
                else begin
                    next_state = S11;
                end
            end
            S1: begin
                if ((in_A == 'd1)) begin
                    next_state = S7;
                end
                else if ((in_G == 'd0)) begin
                    next_state = S12;
                end
                else if (((in_E || in_C) && in_D)) begin
                    next_state = S17;
                end
                else begin
                    next_state = S10;
                end
            end
            S2: begin
                next_state = S0;
            end
            S3: begin
                if ((in_D == 'd0)) begin
                    next_state = S27;
                end
                else begin
                    next_state = S24;
                end
            end
            S4: begin
            end
            S5: begin
                next_state = S30;
            end
            S6: begin
                if (~(in_A)) begin
                    next_state = S6;
                end
                else if ((in_H < 'd1)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S19;
                end
            end
            S7: begin
                if (((in_F == in_H) != 'd0)) begin
                    next_state = S5;
                end
                else if (((in_F == in_G) && (in_C && in_F))) begin
                    next_state = S23;
                end
                else begin
                    next_state = S9;
                end
            end
            S8: begin
                if ((~^(in_B) && in_A)) begin
                    next_state = S22;
                end
                else begin
                    next_state = S24;
                end
            end
            S9: begin
                if (((in_G != 'd1) || ~&(in_C))) begin
                    next_state = S10;
                end
                else begin
                    next_state = S25;
                end
            end
            S10: begin
                if ((in_C != 'd1)) begin
                    next_state = S21;
                end
                else if (^(^(in_F))) begin
                    next_state = S23;
                end
                else if (((in_H ^ in_D) ^ (in_C == 'd1))) begin
                    next_state = S25;
                end
                else begin
                    next_state = S24;
                end
            end
            S11: begin
                if ((in_B < in_A)) begin
                    next_state = S2;
                end
                else if ((in_A != 'd1)) begin
                    next_state = S3;
                end
                else if (~^((in_H && in_A))) begin
                    next_state = S6;
                end
                else if ((in_E && ~&(in_G))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S24;
                end
            end
            S12: begin
                if ((in_A >= 'd0)) begin
                    next_state = S17;
                end
                else if (~|(in_G)) begin
                    next_state = S31;
                end
                else begin
                    next_state = S26;
                end
            end
            S13: begin
                if (((in_B < 'd0) && in_G)) begin
                    next_state = S12;
                end
                else if ((~&(in_B) == 'd0)) begin
                    next_state = S26;
                end
                else begin
                    next_state = S20;
                end
            end
            S14: begin
                if (((in_E != 'd1) != (in_A != 'd1))) begin
                    next_state = S20;
                end
                else if ((in_A && in_G)) begin
                    next_state = S13;
                end
                else if (~^(in_A)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S0;
                end
            end
            S15: begin
                next_state = S4;
            end
            S16: begin
                if (~(in_G)) begin
                    next_state = S1;
                end
                else if (((in_A != 'd0) ^ ~^(in_F))) begin
                    next_state = S5;
                end
                else begin
                    next_state = S2;
                end
            end
            S17: begin
                if ((in_F != 'd1)) begin
                    next_state = S25;
                end
                else if (((in_H ^ in_G) ^ in_D)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S8;
                end
            end
            S18: begin
                if ((^(in_B) != in_H)) begin
                    next_state = S31;
                end
                else if (((in_B == in_E) == 'd0)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S16;
                end
            end
            S19: begin
                next_state = S23;
            end
            S20: begin
                if (~|(in_B)) begin
                    next_state = S26;
                end
                else if ((in_E && (in_H == in_A))) begin
                    next_state = S2;
                end
                else begin
                    next_state = S5;
                end
            end
            S21: begin
                if ((in_C == 'd0)) begin
                    next_state = S21;
                end
                else begin
                    next_state = S30;
                end
            end
            S22: begin
                if ((in_D > (in_H == 'd0))) begin
                    next_state = S28;
                end
                else begin
                    next_state = S15;
                end
            end
            S23: begin
                if ((in_B ^ in_A)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S20;
                end
            end
            S24: begin
                if (|((in_H != 'd1))) begin
                    next_state = S9;
                end
                else if ((in_D ^ (in_A > in_F))) begin
                    next_state = S18;
                end
                else if (~(in_B)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S14;
                end
            end
            S25: begin
                if (((in_H && in_C) && in_G)) begin
                    next_state = S11;
                end
                else if (((in_F <= 'd0) != 'd1)) begin
                    next_state = S29;
                end
                else begin
                    next_state = S15;
                end
            end
            S26: begin
                if ((in_G || (in_C == 'd0))) begin
                    next_state = S16;
                end
                else if ((in_H == 'd0)) begin
                    next_state = S27;
                end
                else if (~^((in_D && in_C))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S25;
                end
            end
            S27: begin
                if ((in_B != 'd0)) begin
                    next_state = S12;
                end
                else if (((in_G ^ in_A) != 'd1)) begin
                    next_state = S13;
                end
                else if ((in_B && in_D)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S25;
                end
            end
            S28: begin
                if ((in_C != 'd0)) begin
                    next_state = S19;
                end
                else begin
                    next_state = S25;
                end
            end
            S29: begin
                next_state = S15;
            end
            S30: begin
                next_state = S8;
            end
            S31: begin
                next_state = S12;
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;
    parameter S20 = 5'b10100;
    parameter S21 = 5'b10101;
    parameter S22 = 5'b10110;
    parameter S23 = 5'b10111;
    parameter S24 = 5'b11000;
    parameter S25 = 5'b11001;
    parameter S26 = 5'b11010;
    parameter S27 = 5'b11011;
    parameter S28 = 5'b11100;
    parameter S29 = 5'b11101;
    parameter S30 = 5'b11110;
    parameter S31 = 5'b11111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
