design_name,task_id,prompt,ref_solution,testbench
pipeline_single,ns_2-w_128-d_20-0,"`define WIDTH 128
`define DEPTH 20

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 9;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 3) | (data[i] >>> 2)) | ((data[i] - 5) & (data[i] + 6))) >>> ((data[i] - 9) + (data[i] >>> 9)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 10;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 4) <<< (in_data <<< 2)) >>> (in_data ^ 4)) >>> 9);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 20

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data ^ 3) | (in_data >>> 2)) | ((in_data - 5) & (in_data + 6))) >>> ((in_data - 9) + (in_data >>> 9)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 ^ 3) | (data_0 >>> 2)) | ((data_0 - 5) & (data_0 + 6))) >>> ((data_0 - 9) + (data_0 >>> 9)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 ^ 3) | (data_1 >>> 2)) | ((data_1 - 5) & (data_1 + 6))) >>> ((data_1 - 9) + (data_1 >>> 9)));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 ^ 3) | (data_2 >>> 2)) | ((data_2 - 5) & (data_2 + 6))) >>> ((data_2 - 9) + (data_2 >>> 9)));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 ^ 3) | (data_3 >>> 2)) | ((data_3 - 5) & (data_3 + 6))) >>> ((data_3 - 9) + (data_3 >>> 9)));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 ^ 3) | (data_4 >>> 2)) | ((data_4 - 5) & (data_4 + 6))) >>> ((data_4 - 9) + (data_4 >>> 9)));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((((data_5 ^ 3) | (data_5 >>> 2)) | ((data_5 - 5) & (data_5 + 6))) >>> ((data_5 - 9) + (data_5 >>> 9)));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((((data_6 ^ 3) | (data_6 >>> 2)) | ((data_6 - 5) & (data_6 + 6))) >>> ((data_6 - 9) + (data_6 >>> 9)));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((((data_7 ^ 3) | (data_7 >>> 2)) | ((data_7 - 5) & (data_7 + 6))) >>> ((data_7 - 9) + (data_7 >>> 9)));
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((((data_8 & 4) <<< (data_8 <<< 2)) >>> (data_8 ^ 4)) >>> 9);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_9, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-d_50-0,"`define WIDTH 128
`define DEPTH 50

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 10) >>> 10);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 48;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 9) & 9);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 50

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data & 9) & 9);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 + 10) >>> 10);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_1, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-d_100-0,"`define WIDTH 128
`define DEPTH 100

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 3) ^ 5);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 7) + (in_data ^ 5));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 98;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[100]), 
        .out_vld(ready[100])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 100

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data >>> 3) ^ 5);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 ^ 7) + (data_0 ^ 5));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_1, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_256-d_20-0,"`define WIDTH 256
`define DEPTH 20

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data >>> 1) - 6) - 1) | (in_data - 4)) | (((in_data | 2) + (in_data + 1)) ^ 9));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 18;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 10) <<< 1) - 3);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );
endmodule",,"`define WIDTH 256
`define DEPTH 20

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((((in_data >>> 1) - 6) - 1) | (in_data - 4)) | (((in_data | 2) + (in_data + 1)) ^ 9));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 | 10) <<< 1) - 3);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_1, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_256-d_50-0,"`define WIDTH 256
`define DEPTH 50

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 15;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 7) + ((data[i] - 4) & (data[i] + 3)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 11;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 3) & ((data[i] & 6) <<< (data[i] <<< 5)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 24;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );
endmodule",,"`define WIDTH 256
`define DEPTH 50

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data <<< 7) + ((in_data - 4) & (in_data + 3)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 <<< 7) + ((data_0 - 4) & (data_0 + 3)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 <<< 7) + ((data_1 - 4) & (data_1 + 3)));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 <<< 7) + ((data_2 - 4) & (data_2 + 3)));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 <<< 7) + ((data_3 - 4) & (data_3 + 3)));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 <<< 7) + ((data_4 - 4) & (data_4 + 3)));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 <<< 7) + ((data_5 - 4) & (data_5 + 3)));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 <<< 7) + ((data_6 - 4) & (data_6 + 3)));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 <<< 7) + ((data_7 - 4) & (data_7 + 3)));
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 <<< 7) + ((data_8 - 4) & (data_8 + 3)));
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 <<< 7) + ((data_9 - 4) & (data_9 + 3)));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 <<< 7) + ((data_10 - 4) & (data_10 + 3)));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 <<< 7) + ((data_11 - 4) & (data_11 + 3)));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 <<< 7) + ((data_12 - 4) & (data_12 + 3)));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 <<< 7) + ((data_13 - 4) & (data_13 + 3)));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 | 3) & ((data_14 & 6) <<< (data_14 <<< 5)));
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 | 3) & ((data_15 & 6) <<< (data_15 <<< 5)));
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((data_16 | 3) & ((data_16 & 6) <<< (data_16 <<< 5)));
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((data_17 | 3) & ((data_17 & 6) <<< (data_17 <<< 5)));
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 | 3) & ((data_18 & 6) <<< (data_18 <<< 5)));
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 | 3) & ((data_19 & 6) <<< (data_19 <<< 5)));
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((data_20 | 3) & ((data_20 & 6) <<< (data_20 <<< 5)));
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((data_21 | 3) & ((data_21 & 6) <<< (data_21 <<< 5)));
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 | 3) & ((data_22 & 6) <<< (data_22 <<< 5)));
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 | 3) & ((data_23 & 6) <<< (data_23 <<< 5)));
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((data_24 | 3) & ((data_24 & 6) <<< (data_24 <<< 5)));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_25, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_256-d_100-0,"`define WIDTH 256
`define DEPTH 100

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 96;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 3) & (data[i] | 7)) - 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 4) + ((in_data >>> 7) | (in_data >>> 10)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[100]), 
        .out_vld(ready[100])
    );
endmodule",,"`define WIDTH 256
`define DEPTH 100

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data ^ 3) & (in_data | 7)) - 8);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 ^ 3) & (data_0 | 7)) - 8);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 ^ 3) & (data_1 | 7)) - 8);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 - 4) + ((data_2 >>> 7) | (data_2 >>> 10)));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_3, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-d_20-0,"`define WIDTH 128
`define DEPTH 20

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 5) ^ (((in_data >>> 6) >>> 9) <<< 4));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 6;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 10) & (data[i] & 3)) ^ 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 7) | ((in_data + 7) <<< 2)) + 1) ^ (in_data | 6));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 8;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 2) + ((data[i] - 2) ^ 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) >>> 2) | ((((in_data ^ 8) ^ (in_data | 7)) - (in_data ^ 3)) - 5));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 20

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data >>> 7) | ((in_data + 7) <<< 2)) + 1) ^ (in_data | 6));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 ^ 2) + ((data_0 - 2) ^ 4));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 ^ 2) + ((data_1 - 2) ^ 4));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 ^ 2) + ((data_2 - 2) ^ 4));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 ^ 2) + ((data_3 - 2) ^ 4));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 ^ 2) + ((data_4 - 2) ^ 4));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 ^ 2) + ((data_5 - 2) ^ 4));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 ^ 2) + ((data_6 - 2) ^ 4));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 ^ 2) + ((data_7 - 2) ^ 4));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 ^ 6) >>> 2) | ((((data_8 ^ 8) ^ (data_8 | 7)) - (data_8 ^ 3)) - 5));
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 & 10) & (data_9 & 3)) ^ 5);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 & 10) & (data_10 & 3)) ^ 5);
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 & 10) & (data_11 & 3)) ^ 5);
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 & 10) & (data_12 & 3)) ^ 5);
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 & 10) & (data_13 & 3)) ^ 5);
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((data_14 & 10) & (data_14 & 3)) ^ 5);
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 - 5) ^ (((data_15 >>> 6) >>> 9) <<< 4));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_16, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-d_50-0,"`define WIDTH 128
`define DEPTH 50

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 1) + 2);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 27;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 10) ^ (in_data - 7));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 6) - 5);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 4) >>> 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 16;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 4) | 5);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 50

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data | 1) + 2);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 >>> 10) ^ (data_0 - 7));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 - 6) - 5);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 <<< 4) >>> 1);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 <<< 4) >>> 1);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 <<< 4) >>> 1);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 <<< 4) >>> 1);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 >>> 4) | 5);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 >>> 4) | 5);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 >>> 4) | 5);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 >>> 4) | 5);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 >>> 4) | 5);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 >>> 4) | 5);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 >>> 4) | 5);
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 >>> 4) | 5);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 >>> 4) | 5);
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 >>> 4) | 5);
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((data_16 >>> 4) | 5);
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((data_17 >>> 4) | 5);
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 >>> 4) | 5);
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 >>> 4) | 5);
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((data_20 >>> 4) | 5);
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((data_21 >>> 4) | 5);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_22, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-d_100-0,"`define WIDTH 128
`define DEPTH 100

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 5) >>> 1) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 8) - ((in_data - 3) + 9));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 25;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 10) + 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 5) <<< 6) ^ 10);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 20;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 9) - (data[i] + 9)) + 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 49;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[100]), 
        .out_vld(ready[100])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 100

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data - 5) <<< 6) ^ 10);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 >>> 8) - ((data_0 - 3) + 9));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 ^ 9) - (data_1 + 9)) + 8);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 ^ 9) - (data_2 + 9)) + 8);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 ^ 9) - (data_3 + 9)) + 8);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 ^ 9) - (data_4 + 9)) + 8);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 ^ 9) - (data_5 + 9)) + 8);
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 ^ 9) - (data_6 + 9)) + 8);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 ^ 9) - (data_7 + 9)) + 8);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 ^ 9) - (data_8 + 9)) + 8);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 ^ 9) - (data_9 + 9)) + 8);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 ^ 9) - (data_10 + 9)) + 8);
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 ^ 9) - (data_11 + 9)) + 8);
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 ^ 9) - (data_12 + 9)) + 8);
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 ^ 9) - (data_13 + 9)) + 8);
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((data_14 ^ 9) - (data_14 + 9)) + 8);
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((data_15 ^ 9) - (data_15 + 9)) + 8);
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((data_16 ^ 9) - (data_16 + 9)) + 8);
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((data_17 ^ 9) - (data_17 + 9)) + 8);
    wire [WIDTH-1:0] data_19;
    assign data_19 = (((data_18 ^ 9) - (data_18 + 9)) + 8);
    wire [WIDTH-1:0] data_20;
    assign data_20 = (((data_19 ^ 9) - (data_19 + 9)) + 8);
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((data_20 ^ 9) - (data_20 + 9)) + 8);
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((data_21 ^ 10) + 7);
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 ^ 10) + 7);
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 ^ 10) + 7);
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((data_24 ^ 10) + 7);
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((data_25 ^ 10) + 7);
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((data_26 ^ 10) + 7);
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((data_27 ^ 10) + 7);
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((data_28 ^ 10) + 7);
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((data_29 ^ 10) + 7);
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((data_30 ^ 10) + 7);
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((data_31 ^ 10) + 7);
    wire [WIDTH-1:0] data_33;
    assign data_33 = ((data_32 ^ 10) + 7);
    wire [WIDTH-1:0] data_34;
    assign data_34 = ((data_33 ^ 10) + 7);
    wire [WIDTH-1:0] data_35;
    assign data_35 = ((data_34 ^ 10) + 7);
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((data_35 ^ 10) + 7);
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((data_36 ^ 10) + 7);
    wire [WIDTH-1:0] data_38;
    assign data_38 = ((data_37 ^ 10) + 7);
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((data_38 ^ 10) + 7);
    wire [WIDTH-1:0] data_40;
    assign data_40 = ((data_39 ^ 10) + 7);
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((data_40 ^ 10) + 7);
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((data_41 ^ 10) + 7);
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 ^ 10) + 7);
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((data_43 ^ 10) + 7);
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((data_44 ^ 10) + 7);
    wire [WIDTH-1:0] data_46;
    assign data_46 = ((data_45 ^ 10) + 7);
    wire [WIDTH-1:0] data_47;
    assign data_47 = (((data_46 - 5) >>> 1) | 7);
    wire [WIDTH-1:0] data_48;
    assign data_48 = (((data_47 - 5) >>> 1) | 7);
    wire [WIDTH-1:0] data_49;
    assign data_49 = (((data_48 - 5) >>> 1) | 7);
    wire [WIDTH-1:0] data_50;
    assign data_50 = (((data_49 - 5) >>> 1) | 7);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_50, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_256-d_20-0,"`define WIDTH 256
`define DEPTH 20

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] & 2) & 3) <<< (data[i] >>> 4)) <<< (data[i] | 8)) >>> 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 9) ^ 10) + (in_data | 9)) - ((in_data + 2) + ((in_data + 8) + (in_data | 1))));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 6;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 10) + 3) - (data[i] | 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 6;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 6) >>> (in_data ^ 6));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 3) + 2) >>> 6);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );
endmodule",,"`define WIDTH 256
`define DEPTH 20

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data + 10) + 3) - (in_data | 1));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 + 10) + 3) - (data_0 | 1));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 + 10) + 3) - (data_1 | 1));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 + 10) + 3) - (data_2 | 1));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 + 10) + 3) - (data_3 | 1));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 + 10) + 3) - (data_4 | 1));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 - 6) >>> (data_5 ^ 6));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((((data_6 & 2) & 3) <<< (data_6 >>> 4)) <<< (data_6 | 8)) >>> 8);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((((data_7 & 2) & 3) <<< (data_7 >>> 4)) <<< (data_7 | 8)) >>> 8);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((((data_8 & 2) & 3) <<< (data_8 >>> 4)) <<< (data_8 | 8)) >>> 8);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((((data_9 & 2) & 3) <<< (data_9 >>> 4)) <<< (data_9 | 8)) >>> 8);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((((data_10 + 9) ^ 10) + (data_10 | 9)) - ((data_10 + 2) + ((data_10 + 8) + (data_10 | 1))));
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 & 3) + 2) >>> 6);
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 & 3) + 2) >>> 6);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_13, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_256-d_50-0,"`define WIDTH 256
`define DEPTH 50

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 7) ^ (data[i] | 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 6) | (in_data + 2));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 4) | 6);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 21;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 1) - 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 4) & 3);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 24;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );
endmodule",,"`define WIDTH 256
`define DEPTH 50

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data + 4) | 6);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 ^ 6) | (data_0 + 2));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 - 4) & 3);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 | 1) - 4);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 | 1) - 4);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 | 1) - 4);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 | 1) - 4);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 | 1) - 4);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 | 1) - 4);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 | 1) - 4);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 | 1) - 4);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 | 1) - 4);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 | 1) - 4);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 | 1) - 4);
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 | 1) - 4);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 | 1) - 4);
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 | 1) - 4);
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((data_16 | 1) - 4);
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((data_17 | 1) - 4);
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 | 1) - 4);
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 | 1) - 4);
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((data_20 | 1) - 4);
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((data_21 | 1) - 4);
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 | 1) - 4);
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 - 7) ^ (data_23 | 3));
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((data_24 - 7) ^ (data_24 | 3));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_25, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_256-d_100-0,"`define WIDTH 256
`define DEPTH 100

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 18;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 7) >>> 8) & ((data[i] | 2) | 6)) | (data[i] - 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 11;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 10) & (data[i] + 5)) ^ (data[i] & 2)) <<< 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 68;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 1) | 4);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 9) - ((in_data <<< 9) ^ 4));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 10) & (in_data <<< 8)) <<< 8);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[100]), 
        .out_vld(ready[100])
    );
endmodule",,"`define WIDTH 256
`define DEPTH 100

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data | 7) >>> 8) & ((in_data | 2) | 6)) | (in_data - 5));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 | 7) >>> 8) & ((data_0 | 2) | 6)) | (data_0 - 5));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 | 7) >>> 8) & ((data_1 | 2) | 6)) | (data_1 - 5));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 | 7) >>> 8) & ((data_2 | 2) | 6)) | (data_2 - 5));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 | 7) >>> 8) & ((data_3 | 2) | 6)) | (data_3 - 5));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 | 7) >>> 8) & ((data_4 | 2) | 6)) | (data_4 - 5));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((((data_5 | 7) >>> 8) & ((data_5 | 2) | 6)) | (data_5 - 5));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((((data_6 | 7) >>> 8) & ((data_6 | 2) | 6)) | (data_6 - 5));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((((data_7 | 7) >>> 8) & ((data_7 | 2) | 6)) | (data_7 - 5));
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((((data_8 | 7) >>> 8) & ((data_8 | 2) | 6)) | (data_8 - 5));
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((((data_9 | 7) >>> 8) & ((data_9 | 2) | 6)) | (data_9 - 5));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((((data_10 | 7) >>> 8) & ((data_10 | 2) | 6)) | (data_10 - 5));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((((data_11 | 7) >>> 8) & ((data_11 | 2) | 6)) | (data_11 - 5));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((((data_12 | 7) >>> 8) & ((data_12 | 2) | 6)) | (data_12 - 5));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((((data_13 | 7) >>> 8) & ((data_13 | 2) | 6)) | (data_13 - 5));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((((data_14 | 7) >>> 8) & ((data_14 | 2) | 6)) | (data_14 - 5));
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((((data_15 | 7) >>> 8) & ((data_15 | 2) | 6)) | (data_15 - 5));
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((((data_16 | 7) >>> 8) & ((data_16 | 2) | 6)) | (data_16 - 5));
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((data_17 ^ 10) & (data_17 <<< 8)) <<< 8);
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 <<< 1) | 4);
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((((data_19 - 10) & (data_19 + 5)) ^ (data_19 & 2)) <<< 1);
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((((data_20 - 10) & (data_20 + 5)) ^ (data_20 & 2)) <<< 1);
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((((data_21 - 10) & (data_21 + 5)) ^ (data_21 & 2)) <<< 1);
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((((data_22 - 10) & (data_22 + 5)) ^ (data_22 & 2)) <<< 1);
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((((data_23 - 10) & (data_23 + 5)) ^ (data_23 & 2)) <<< 1);
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((((data_24 - 10) & (data_24 + 5)) ^ (data_24 & 2)) <<< 1);
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((((data_25 - 10) & (data_25 + 5)) ^ (data_25 & 2)) <<< 1);
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((((data_26 - 10) & (data_26 + 5)) ^ (data_26 & 2)) <<< 1);
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((((data_27 - 10) & (data_27 + 5)) ^ (data_27 & 2)) <<< 1);
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((((data_28 - 10) & (data_28 + 5)) ^ (data_28 & 2)) <<< 1);
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((((data_29 - 10) & (data_29 + 5)) ^ (data_29 & 2)) <<< 1);
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((data_30 & 9) - ((data_30 <<< 9) ^ 4));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_31, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-d_20-0,"`define WIDTH 128
`define DEPTH 20

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 3) ^ ((in_data >>> 8) + (in_data <<< 4))) >>> 1) <<< 8);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 8) | 1) | 1) - ((in_data + 7) + ((in_data >>> 5) + ((in_data + 7) - 3))));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 6) ^ 7) - ((in_data | 6) ^ 2)) - (in_data ^ 1));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 8) - (in_data - 4)) <<< 3);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) & 7);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 6;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 10) + ((data[i] + 3) | (((data[i] & 10) & 6) - 3)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) <<< 9) <<< (in_data & 6));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 7) + (in_data & 1)) | 9) - ((in_data <<< 5) ^ 7));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 10) & ((data[i] & 7) + (data[i] <<< 9))) + ((data[i] ^ 8) <<< (data[i] <<< 8))) - (data[i] & 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 9) | 6) & 5) >>> (((in_data + 2) >>> 7) | 8)) + 4);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 20

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data & 8) | 1) | 1) - ((in_data + 7) + ((in_data >>> 5) + ((in_data + 7) - 3))));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 <<< 7) & 7);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 | 8) - (data_1 - 4)) <<< 3);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 - 10) & ((data_2 & 7) + (data_2 <<< 9))) + ((data_2 ^ 8) <<< (data_2 <<< 8))) - (data_2 & 1));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 - 10) & ((data_3 & 7) + (data_3 <<< 9))) + ((data_3 ^ 8) <<< (data_3 <<< 8))) - (data_3 & 1));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 - 10) & ((data_4 & 7) + (data_4 <<< 9))) + ((data_4 ^ 8) <<< (data_4 <<< 8))) - (data_4 & 1));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((((data_5 - 6) ^ 7) - ((data_5 | 6) ^ 2)) - (data_5 ^ 1));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((((data_6 & 9) | 6) & 5) >>> (((data_6 + 2) >>> 7) | 8)) + 4);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 | 10) + ((data_7 + 3) | (((data_7 & 10) & 6) - 3)));
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 | 10) + ((data_8 + 3) | (((data_8 & 10) & 6) - 3)));
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 | 10) + ((data_9 + 3) | (((data_9 & 10) & 6) - 3)));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 | 10) + ((data_10 + 3) | (((data_10 & 10) & 6) - 3)));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 | 10) + ((data_11 + 3) | (((data_11 & 10) & 6) - 3)));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 | 10) + ((data_12 + 3) | (((data_12 & 10) & 6) - 3)));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((((data_13 - 7) + (data_13 & 1)) | 9) - ((data_13 <<< 5) ^ 7));
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((data_14 >>> 4) <<< 9) <<< (data_14 & 6));
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((((data_15 - 3) ^ ((data_15 >>> 8) + (data_15 <<< 4))) >>> 1) <<< 8);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_16, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-d_50-0,"`define WIDTH 128
`define DEPTH 50

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 19;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 4) >>> (data[i] - 6)) + 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 5) & (((in_data & 3) - (in_data - 6)) ^ (in_data >>> 1)));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 7) <<< (((in_data + 7) <<< (in_data - 1)) & ((in_data + 6) ^ (in_data >>> 3))));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 5) + 10);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 8) + 8);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 1) <<< 3) + 6);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 18;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 10) ^ 3) + ((data[i] + 5) <<< (data[i] <<< 7)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 5) & 8) & 3);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) <<< ((in_data <<< 10) + 5)) + 9);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 5) & 1) + 3) >>> ((in_data >>> 3) - 2));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 5;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 50

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data + 1) <<< 3) + 6);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 - 4) >>> (data_0 - 6)) + 4);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 - 4) >>> (data_1 - 6)) + 4);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 - 4) >>> (data_2 - 6)) + 4);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 - 4) >>> (data_3 - 6)) + 4);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 - 4) >>> (data_4 - 6)) + 4);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 - 4) >>> (data_5 - 6)) + 4);
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 - 4) >>> (data_6 - 6)) + 4);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 - 4) >>> (data_7 - 6)) + 4);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 - 4) >>> (data_8 - 6)) + 4);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 - 4) >>> (data_9 - 6)) + 4);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 - 4) >>> (data_10 - 6)) + 4);
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 - 4) >>> (data_11 - 6)) + 4);
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 - 4) >>> (data_12 - 6)) + 4);
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 - 4) >>> (data_13 - 6)) + 4);
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((data_14 - 4) >>> (data_14 - 6)) + 4);
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((data_15 - 4) >>> (data_15 - 6)) + 4);
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((data_16 - 4) >>> (data_16 - 6)) + 4);
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((data_17 - 4) >>> (data_17 - 6)) + 4);
    wire [WIDTH-1:0] data_19;
    assign data_19 = (((data_18 - 4) >>> (data_18 - 6)) + 4);
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 | 7) <<< (((data_19 + 7) <<< (data_19 - 1)) & ((data_19 + 6) ^ (data_19 >>> 3))));
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((data_20 >>> 10) ^ 3) + ((data_20 + 5) <<< (data_20 <<< 7)));
    wire [WIDTH-1:0] data_22;
    assign data_22 = (((data_21 >>> 10) ^ 3) + ((data_21 + 5) <<< (data_21 <<< 7)));
    wire [WIDTH-1:0] data_23;
    assign data_23 = (((data_22 >>> 10) ^ 3) + ((data_22 + 5) <<< (data_22 <<< 7)));
    wire [WIDTH-1:0] data_24;
    assign data_24 = (((data_23 >>> 10) ^ 3) + ((data_23 + 5) <<< (data_23 <<< 7)));
    wire [WIDTH-1:0] data_25;
    assign data_25 = (((data_24 >>> 10) ^ 3) + ((data_24 + 5) <<< (data_24 <<< 7)));
    wire [WIDTH-1:0] data_26;
    assign data_26 = (((data_25 >>> 10) ^ 3) + ((data_25 + 5) <<< (data_25 <<< 7)));
    wire [WIDTH-1:0] data_27;
    assign data_27 = (((data_26 >>> 10) ^ 3) + ((data_26 + 5) <<< (data_26 <<< 7)));
    wire [WIDTH-1:0] data_28;
    assign data_28 = (((data_27 >>> 10) ^ 3) + ((data_27 + 5) <<< (data_27 <<< 7)));
    wire [WIDTH-1:0] data_29;
    assign data_29 = (((data_28 >>> 10) ^ 3) + ((data_28 + 5) <<< (data_28 <<< 7)));
    wire [WIDTH-1:0] data_30;
    assign data_30 = (((data_29 >>> 10) ^ 3) + ((data_29 + 5) <<< (data_29 <<< 7)));
    wire [WIDTH-1:0] data_31;
    assign data_31 = (((data_30 >>> 10) ^ 3) + ((data_30 + 5) <<< (data_30 <<< 7)));
    wire [WIDTH-1:0] data_32;
    assign data_32 = (((data_31 >>> 10) ^ 3) + ((data_31 + 5) <<< (data_31 <<< 7)));
    wire [WIDTH-1:0] data_33;
    assign data_33 = (((data_32 >>> 10) ^ 3) + ((data_32 + 5) <<< (data_32 <<< 7)));
    wire [WIDTH-1:0] data_34;
    assign data_34 = (((data_33 >>> 10) ^ 3) + ((data_33 + 5) <<< (data_33 <<< 7)));
    wire [WIDTH-1:0] data_35;
    assign data_35 = (((data_34 >>> 10) ^ 3) + ((data_34 + 5) <<< (data_34 <<< 7)));
    wire [WIDTH-1:0] data_36;
    assign data_36 = (((data_35 >>> 10) ^ 3) + ((data_35 + 5) <<< (data_35 <<< 7)));
    wire [WIDTH-1:0] data_37;
    assign data_37 = (((data_36 >>> 10) ^ 3) + ((data_36 + 5) <<< (data_36 <<< 7)));
    wire [WIDTH-1:0] data_38;
    assign data_38 = (((data_37 >>> 10) ^ 3) + ((data_37 + 5) <<< (data_37 <<< 7)));
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((data_38 - 8) + 8);
    wire [WIDTH-1:0] data_40;
    assign data_40 = (((data_39 ^ 5) & 8) & 3);
    wire [WIDTH-1:0] data_41;
    assign data_41 = (((data_40 | 6) <<< ((data_40 <<< 10) + 5)) + 9);
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((data_41 | 5) & (((data_41 & 3) - (data_41 - 6)) ^ (data_41 >>> 1)));
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 & 5) + 10);
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((((data_43 <<< 5) & 1) + 3) >>> ((data_43 >>> 3) - 2));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_44, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-d_100-0,"`define WIDTH 128
`define DEPTH 100

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 6) & 9);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 5) | 1);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 6) | (data[i] - 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 2) ^ 6);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 33;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 8) >>> 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 3) >>> 1);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 49;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 3) & 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 7) >>> 5);
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 8;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 7) >>> 2);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 10) & (in_data & 1));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[88]), 
        .out_vld(ready[88])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[88]),
        .in_vld(ready[88]),
        .out_data(data[89]), 
        .out_vld(ready[89])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[89]),
        .in_vld(ready[89]),
        .out_data(data[92]), 
        .out_vld(ready[92])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[92]),
        .in_vld(ready[92]),
        .out_data(data[100]), 
        .out_vld(ready[100])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 100

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data - 6) & 9);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 - 5) | 1);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((data_16 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((data_17 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((data_20 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((data_21 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((data_24 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((data_25 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((data_26 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((data_27 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((data_28 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((data_29 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((data_30 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((data_31 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_33;
    assign data_33 = ((data_32 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_34;
    assign data_34 = ((data_33 <<< 8) >>> 7);
    wire [WIDTH-1:0] data_35;
    assign data_35 = ((data_34 + 7) >>> 2);
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((data_35 & 10) & (data_35 & 1));
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((data_36 | 7) >>> 5);
    wire [WIDTH-1:0] data_38;
    assign data_38 = ((data_37 ^ 3) >>> 1);
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((data_38 ^ 3) & 6);
    wire [WIDTH-1:0] data_40;
    assign data_40 = ((data_39 ^ 3) & 6);
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((data_40 ^ 3) & 6);
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((data_41 ^ 3) & 6);
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 ^ 3) & 6);
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((data_43 ^ 3) & 6);
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((data_44 ^ 3) & 6);
    wire [WIDTH-1:0] data_46;
    assign data_46 = ((data_45 ^ 3) & 6);
    wire [WIDTH-1:0] data_47;
    assign data_47 = ((data_46 ^ 3) & 6);
    wire [WIDTH-1:0] data_48;
    assign data_48 = ((data_47 ^ 3) & 6);
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((data_48 ^ 3) & 6);
    wire [WIDTH-1:0] data_50;
    assign data_50 = ((data_49 ^ 3) & 6);
    wire [WIDTH-1:0] data_51;
    assign data_51 = ((data_50 ^ 3) & 6);
    wire [WIDTH-1:0] data_52;
    assign data_52 = ((data_51 ^ 3) & 6);
    wire [WIDTH-1:0] data_53;
    assign data_53 = ((data_52 ^ 3) & 6);
    wire [WIDTH-1:0] data_54;
    assign data_54 = ((data_53 ^ 3) & 6);
    wire [WIDTH-1:0] data_55;
    assign data_55 = ((data_54 ^ 3) & 6);
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((data_55 ^ 3) & 6);
    wire [WIDTH-1:0] data_57;
    assign data_57 = ((data_56 ^ 3) & 6);
    wire [WIDTH-1:0] data_58;
    assign data_58 = ((data_57 ^ 3) & 6);
    wire [WIDTH-1:0] data_59;
    assign data_59 = ((data_58 ^ 3) & 6);
    wire [WIDTH-1:0] data_60;
    assign data_60 = ((data_59 ^ 3) & 6);
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((data_60 ^ 3) & 6);
    wire [WIDTH-1:0] data_62;
    assign data_62 = ((data_61 ^ 3) & 6);
    wire [WIDTH-1:0] data_63;
    assign data_63 = ((data_62 ^ 3) & 6);
    wire [WIDTH-1:0] data_64;
    assign data_64 = ((data_63 ^ 3) & 6);
    wire [WIDTH-1:0] data_65;
    assign data_65 = ((data_64 ^ 3) & 6);
    wire [WIDTH-1:0] data_66;
    assign data_66 = ((data_65 ^ 3) & 6);
    wire [WIDTH-1:0] data_67;
    assign data_67 = ((data_66 ^ 3) & 6);
    wire [WIDTH-1:0] data_68;
    assign data_68 = ((data_67 ^ 3) & 6);
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((data_68 ^ 3) & 6);
    wire [WIDTH-1:0] data_70;
    assign data_70 = ((data_69 ^ 3) & 6);
    wire [WIDTH-1:0] data_71;
    assign data_71 = ((data_70 ^ 3) & 6);
    wire [WIDTH-1:0] data_72;
    assign data_72 = ((data_71 ^ 3) & 6);
    wire [WIDTH-1:0] data_73;
    assign data_73 = ((data_72 ^ 3) & 6);
    wire [WIDTH-1:0] data_74;
    assign data_74 = ((data_73 ^ 3) & 6);
    wire [WIDTH-1:0] data_75;
    assign data_75 = ((data_74 ^ 3) & 6);
    wire [WIDTH-1:0] data_76;
    assign data_76 = ((data_75 ^ 3) & 6);
    wire [WIDTH-1:0] data_77;
    assign data_77 = ((data_76 ^ 3) & 6);
    wire [WIDTH-1:0] data_78;
    assign data_78 = ((data_77 ^ 3) & 6);
    wire [WIDTH-1:0] data_79;
    assign data_79 = ((data_78 ^ 3) & 6);
    wire [WIDTH-1:0] data_80;
    assign data_80 = ((data_79 ^ 3) & 6);
    wire [WIDTH-1:0] data_81;
    assign data_81 = ((data_80 ^ 3) & 6);
    wire [WIDTH-1:0] data_82;
    assign data_82 = ((data_81 ^ 3) & 6);
    wire [WIDTH-1:0] data_83;
    assign data_83 = ((data_82 ^ 3) & 6);
    wire [WIDTH-1:0] data_84;
    assign data_84 = ((data_83 ^ 3) & 6);
    wire [WIDTH-1:0] data_85;
    assign data_85 = ((data_84 ^ 3) & 6);
    wire [WIDTH-1:0] data_86;
    assign data_86 = ((data_85 ^ 3) & 6);
    wire [WIDTH-1:0] data_87;
    assign data_87 = ((data_86 ^ 3) & 6);
    wire [WIDTH-1:0] data_88;
    assign data_88 = ((data_87 <<< 2) ^ 6);
    wire [WIDTH-1:0] data_89;
    assign data_89 = ((data_88 + 6) | (data_88 - 5));
    wire [WIDTH-1:0] data_90;
    assign data_90 = ((data_89 + 6) | (data_89 - 5));
    wire [WIDTH-1:0] data_91;
    assign data_91 = ((data_90 + 6) | (data_90 - 5));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_91, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_256-d_20-0,"`define WIDTH 256
`define DEPTH 20

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 2) + (in_data | 6)) <<< ((in_data >>> 8) ^ (in_data + 8)));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 2) >>> ((in_data ^ 4) + 3));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 2) >>> (in_data & 10));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 1) + ((in_data - 3) & (in_data - 4)));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) - (in_data ^ 1)) + 4);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 7;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 2) ^ 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 6) - 7);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) ^ 6);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 8) & (in_data >>> 1)) | (in_data | 5));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 6) ^ 3) >>> 8);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );
endmodule",,"`define WIDTH 256
`define DEPTH 20

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data >>> 6) ^ 3) >>> 8);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 <<< 3) - (data_0 ^ 1)) + 4);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 + 2) >>> (data_1 & 10));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 >>> 2) >>> ((data_2 ^ 4) + 3));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 & 2) + (data_3 | 6)) <<< ((data_3 >>> 8) ^ (data_3 + 8)));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 + 6) - 7);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 <<< 8) & (data_5 >>> 1)) | (data_5 | 5));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 & 2) ^ 2);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 & 2) ^ 2);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 & 2) ^ 2);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 & 2) ^ 2);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 & 2) ^ 2);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 & 2) ^ 2);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 & 2) ^ 2);
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 & 1) + ((data_13 - 3) & (data_13 - 4)));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 <<< 7) ^ 6);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_15, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_256-d_50-0,"`define WIDTH 256
`define DEPTH 50

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 6) >>> 5) & ((in_data - 5) & (in_data ^ 6))) + 8);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 3) <<< (in_data ^ 6)) <<< 1);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 16;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 3) <<< (data[i] - 3)) | 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 7) <<< (in_data | 7)) ^ 6) ^ 8);
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 8;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 5) | 7) | 4) + 7) + (in_data & 9));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 18;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 6) <<< (data[i] | 9)) & ((data[i] - 3) | (data[i] ^ 9)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) ^ 8);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 6) + 7) ^ 5) ^ 3);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) - 9) | 2);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 7) ^ (in_data + 1)) >>> ((((in_data >>> 2) >>> (in_data ^ 3)) & ((in_data ^ 4) <<< (in_data <<< 7))) & ((in_data | 10) ^ 3)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );
endmodule",,"`define WIDTH 256
`define DEPTH 50

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((((in_data & 5) | 7) | 4) + 7) + (in_data & 9));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 - 7) <<< (data_0 | 7)) ^ 6) ^ 8);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 & 6) >>> 5) & ((data_1 - 5) & (data_1 ^ 6))) + 8);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 & 3) <<< (data_2 ^ 6)) <<< 1);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 ^ 3) <<< (data_3 - 3)) | 10);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 ^ 3) <<< (data_4 - 3)) | 10);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 ^ 3) <<< (data_5 - 3)) | 10);
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 ^ 3) <<< (data_6 - 3)) | 10);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 ^ 3) <<< (data_7 - 3)) | 10);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 ^ 3) <<< (data_8 - 3)) | 10);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 ^ 3) <<< (data_9 - 3)) | 10);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 ^ 3) <<< (data_10 - 3)) | 10);
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 ^ 3) <<< (data_11 - 3)) | 10);
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 ^ 3) <<< (data_12 - 3)) | 10);
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 ^ 3) <<< (data_13 - 3)) | 10);
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((data_14 ^ 3) <<< (data_14 - 3)) | 10);
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((data_15 ^ 3) <<< (data_15 - 3)) | 10);
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((data_16 ^ 3) <<< (data_16 - 3)) | 10);
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((data_17 ^ 3) <<< (data_17 - 3)) | 10);
    wire [WIDTH-1:0] data_19;
    assign data_19 = (((data_18 ^ 3) <<< (data_18 - 3)) | 10);
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((((data_19 - 6) + 7) ^ 5) ^ 3);
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((data_20 | 6) <<< (data_20 | 9)) & ((data_20 - 3) | (data_20 ^ 9)));
    wire [WIDTH-1:0] data_22;
    assign data_22 = (((data_21 | 6) <<< (data_21 | 9)) & ((data_21 - 3) | (data_21 ^ 9)));
    wire [WIDTH-1:0] data_23;
    assign data_23 = (((data_22 | 6) <<< (data_22 | 9)) & ((data_22 - 3) | (data_22 ^ 9)));
    wire [WIDTH-1:0] data_24;
    assign data_24 = (((data_23 | 6) <<< (data_23 | 9)) & ((data_23 - 3) | (data_23 ^ 9)));
    wire [WIDTH-1:0] data_25;
    assign data_25 = (((data_24 | 6) <<< (data_24 | 9)) & ((data_24 - 3) | (data_24 ^ 9)));
    wire [WIDTH-1:0] data_26;
    assign data_26 = (((data_25 | 6) <<< (data_25 | 9)) & ((data_25 - 3) | (data_25 ^ 9)));
    wire [WIDTH-1:0] data_27;
    assign data_27 = (((data_26 | 6) <<< (data_26 | 9)) & ((data_26 - 3) | (data_26 ^ 9)));
    wire [WIDTH-1:0] data_28;
    assign data_28 = (((data_27 | 6) <<< (data_27 | 9)) & ((data_27 - 3) | (data_27 ^ 9)));
    wire [WIDTH-1:0] data_29;
    assign data_29 = (((data_28 | 6) <<< (data_28 | 9)) & ((data_28 - 3) | (data_28 ^ 9)));
    wire [WIDTH-1:0] data_30;
    assign data_30 = (((data_29 | 6) <<< (data_29 | 9)) & ((data_29 - 3) | (data_29 ^ 9)));
    wire [WIDTH-1:0] data_31;
    assign data_31 = (((data_30 | 6) <<< (data_30 | 9)) & ((data_30 - 3) | (data_30 ^ 9)));
    wire [WIDTH-1:0] data_32;
    assign data_32 = (((data_31 | 6) <<< (data_31 | 9)) & ((data_31 - 3) | (data_31 ^ 9)));
    wire [WIDTH-1:0] data_33;
    assign data_33 = (((data_32 | 6) <<< (data_32 | 9)) & ((data_32 - 3) | (data_32 ^ 9)));
    wire [WIDTH-1:0] data_34;
    assign data_34 = (((data_33 | 6) <<< (data_33 | 9)) & ((data_33 - 3) | (data_33 ^ 9)));
    wire [WIDTH-1:0] data_35;
    assign data_35 = (((data_34 | 6) <<< (data_34 | 9)) & ((data_34 - 3) | (data_34 ^ 9)));
    wire [WIDTH-1:0] data_36;
    assign data_36 = (((data_35 | 6) <<< (data_35 | 9)) & ((data_35 - 3) | (data_35 ^ 9)));
    wire [WIDTH-1:0] data_37;
    assign data_37 = (((data_36 | 6) <<< (data_36 | 9)) & ((data_36 - 3) | (data_36 ^ 9)));
    wire [WIDTH-1:0] data_38;
    assign data_38 = (((data_37 | 6) <<< (data_37 | 9)) & ((data_37 - 3) | (data_37 ^ 9)));
    wire [WIDTH-1:0] data_39;
    assign data_39 = (((data_38 - 7) ^ (data_38 + 1)) >>> ((((data_38 >>> 2) >>> (data_38 ^ 3)) & ((data_38 ^ 4) <<< (data_38 <<< 7))) & ((data_38 | 10) ^ 3)));
    wire [WIDTH-1:0] data_40;
    assign data_40 = (((data_39 ^ 2) - 9) | 2);
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((data_40 & 3) ^ 8);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_41, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_256-d_100-0,"`define WIDTH 256
`define DEPTH 100

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 44;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 6) ^ (data[i] ^ 9)) + (data[i] + 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 5;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 10) + 7) >>> (((in_data + 9) + (in_data - 4)) - 2));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 3) & ((in_data & 7) - (in_data >>> 2)));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 34;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 3) + 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 8) >>> 8);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 7) | ((in_data >>> 4) + ((in_data | 1) & 8)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 6) & 4);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 8) ^ (in_data ^ 9)) | 1) | 8);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 2) | 5) <<< 6) ^ ((in_data & 8) & ((in_data | 10) <<< 7)));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 10;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 1) & 7) & 9) - 7);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[93]), 
        .out_vld(ready[93])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[93]),
        .in_vld(ready[93]),
        .out_data(data[94]), 
        .out_vld(ready[94])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[94]),
        .in_vld(ready[94]),
        .out_data(data[95]), 
        .out_vld(ready[95])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[95]),
        .in_vld(ready[95]),
        .out_data(data[100]), 
        .out_vld(ready[100])
    );
endmodule",,"`define WIDTH 256
`define DEPTH 100

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data ^ 6) & 4);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 | 3) & ((data_0 & 7) - (data_0 >>> 2)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 & 2) | 5) <<< 6) ^ ((data_1 & 8) & ((data_1 | 10) <<< 7)));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 | 1) & 7) & 9) - 7);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 | 1) & 7) & 9) - 7);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 | 1) & 7) & 9) - 7);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((((data_5 | 1) & 7) & 9) - 7);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((((data_6 | 1) & 7) & 9) - 7);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((((data_7 | 1) & 7) & 9) - 7);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((((data_8 | 1) & 7) & 9) - 7);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((((data_9 | 1) & 7) & 9) - 7);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((((data_10 | 1) & 7) & 9) - 7);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((((data_11 | 1) & 7) & 9) - 7);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 & 3) + 7);
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 & 3) + 7);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 & 3) + 7);
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 & 3) + 7);
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((data_16 & 3) + 7);
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((data_17 & 3) + 7);
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 & 3) + 7);
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 & 3) + 7);
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((data_20 & 3) + 7);
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((data_21 & 3) + 7);
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 & 3) + 7);
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 & 3) + 7);
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((data_24 & 3) + 7);
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((data_25 & 3) + 7);
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((data_26 & 3) + 7);
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((data_27 & 3) + 7);
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((data_28 & 3) + 7);
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((data_29 & 3) + 7);
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((data_30 & 3) + 7);
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((data_31 & 3) + 7);
    wire [WIDTH-1:0] data_33;
    assign data_33 = ((data_32 & 3) + 7);
    wire [WIDTH-1:0] data_34;
    assign data_34 = ((data_33 & 3) + 7);
    wire [WIDTH-1:0] data_35;
    assign data_35 = ((data_34 & 3) + 7);
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((data_35 & 3) + 7);
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((data_36 & 3) + 7);
    wire [WIDTH-1:0] data_38;
    assign data_38 = ((data_37 & 3) + 7);
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((data_38 & 3) + 7);
    wire [WIDTH-1:0] data_40;
    assign data_40 = ((data_39 & 3) + 7);
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((data_40 & 3) + 7);
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((data_41 & 3) + 7);
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 & 3) + 7);
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((data_43 & 3) + 7);
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((data_44 & 3) + 7);
    wire [WIDTH-1:0] data_46;
    assign data_46 = ((data_45 & 3) + 7);
    wire [WIDTH-1:0] data_47;
    assign data_47 = (((data_46 >>> 10) + 7) >>> (((data_46 + 9) + (data_46 - 4)) - 2));
    wire [WIDTH-1:0] data_48;
    assign data_48 = ((((data_47 <<< 8) ^ (data_47 ^ 9)) | 1) | 8);
    wire [WIDTH-1:0] data_49;
    assign data_49 = (((data_48 <<< 6) ^ (data_48 ^ 9)) + (data_48 + 8));
    wire [WIDTH-1:0] data_50;
    assign data_50 = (((data_49 <<< 6) ^ (data_49 ^ 9)) + (data_49 + 8));
    wire [WIDTH-1:0] data_51;
    assign data_51 = (((data_50 <<< 6) ^ (data_50 ^ 9)) + (data_50 + 8));
    wire [WIDTH-1:0] data_52;
    assign data_52 = (((data_51 <<< 6) ^ (data_51 ^ 9)) + (data_51 + 8));
    wire [WIDTH-1:0] data_53;
    assign data_53 = (((data_52 <<< 6) ^ (data_52 ^ 9)) + (data_52 + 8));
    wire [WIDTH-1:0] data_54;
    assign data_54 = (((data_53 <<< 6) ^ (data_53 ^ 9)) + (data_53 + 8));
    wire [WIDTH-1:0] data_55;
    assign data_55 = (((data_54 <<< 6) ^ (data_54 ^ 9)) + (data_54 + 8));
    wire [WIDTH-1:0] data_56;
    assign data_56 = (((data_55 <<< 6) ^ (data_55 ^ 9)) + (data_55 + 8));
    wire [WIDTH-1:0] data_57;
    assign data_57 = (((data_56 <<< 6) ^ (data_56 ^ 9)) + (data_56 + 8));
    wire [WIDTH-1:0] data_58;
    assign data_58 = (((data_57 <<< 6) ^ (data_57 ^ 9)) + (data_57 + 8));
    wire [WIDTH-1:0] data_59;
    assign data_59 = (((data_58 <<< 6) ^ (data_58 ^ 9)) + (data_58 + 8));
    wire [WIDTH-1:0] data_60;
    assign data_60 = (((data_59 <<< 6) ^ (data_59 ^ 9)) + (data_59 + 8));
    wire [WIDTH-1:0] data_61;
    assign data_61 = (((data_60 <<< 6) ^ (data_60 ^ 9)) + (data_60 + 8));
    wire [WIDTH-1:0] data_62;
    assign data_62 = (((data_61 <<< 6) ^ (data_61 ^ 9)) + (data_61 + 8));
    wire [WIDTH-1:0] data_63;
    assign data_63 = (((data_62 <<< 6) ^ (data_62 ^ 9)) + (data_62 + 8));
    wire [WIDTH-1:0] data_64;
    assign data_64 = (((data_63 <<< 6) ^ (data_63 ^ 9)) + (data_63 + 8));
    wire [WIDTH-1:0] data_65;
    assign data_65 = (((data_64 <<< 6) ^ (data_64 ^ 9)) + (data_64 + 8));
    wire [WIDTH-1:0] data_66;
    assign data_66 = (((data_65 <<< 6) ^ (data_65 ^ 9)) + (data_65 + 8));
    wire [WIDTH-1:0] data_67;
    assign data_67 = (((data_66 <<< 6) ^ (data_66 ^ 9)) + (data_66 + 8));
    wire [WIDTH-1:0] data_68;
    assign data_68 = (((data_67 <<< 6) ^ (data_67 ^ 9)) + (data_67 + 8));
    wire [WIDTH-1:0] data_69;
    assign data_69 = (((data_68 <<< 6) ^ (data_68 ^ 9)) + (data_68 + 8));
    wire [WIDTH-1:0] data_70;
    assign data_70 = (((data_69 <<< 6) ^ (data_69 ^ 9)) + (data_69 + 8));
    wire [WIDTH-1:0] data_71;
    assign data_71 = (((data_70 <<< 6) ^ (data_70 ^ 9)) + (data_70 + 8));
    wire [WIDTH-1:0] data_72;
    assign data_72 = (((data_71 <<< 6) ^ (data_71 ^ 9)) + (data_71 + 8));
    wire [WIDTH-1:0] data_73;
    assign data_73 = (((data_72 <<< 6) ^ (data_72 ^ 9)) + (data_72 + 8));
    wire [WIDTH-1:0] data_74;
    assign data_74 = (((data_73 <<< 6) ^ (data_73 ^ 9)) + (data_73 + 8));
    wire [WIDTH-1:0] data_75;
    assign data_75 = (((data_74 <<< 6) ^ (data_74 ^ 9)) + (data_74 + 8));
    wire [WIDTH-1:0] data_76;
    assign data_76 = (((data_75 <<< 6) ^ (data_75 ^ 9)) + (data_75 + 8));
    wire [WIDTH-1:0] data_77;
    assign data_77 = (((data_76 <<< 6) ^ (data_76 ^ 9)) + (data_76 + 8));
    wire [WIDTH-1:0] data_78;
    assign data_78 = (((data_77 <<< 6) ^ (data_77 ^ 9)) + (data_77 + 8));
    wire [WIDTH-1:0] data_79;
    assign data_79 = (((data_78 <<< 6) ^ (data_78 ^ 9)) + (data_78 + 8));
    wire [WIDTH-1:0] data_80;
    assign data_80 = (((data_79 <<< 6) ^ (data_79 ^ 9)) + (data_79 + 8));
    wire [WIDTH-1:0] data_81;
    assign data_81 = (((data_80 <<< 6) ^ (data_80 ^ 9)) + (data_80 + 8));
    wire [WIDTH-1:0] data_82;
    assign data_82 = (((data_81 <<< 6) ^ (data_81 ^ 9)) + (data_81 + 8));
    wire [WIDTH-1:0] data_83;
    assign data_83 = (((data_82 <<< 6) ^ (data_82 ^ 9)) + (data_82 + 8));
    wire [WIDTH-1:0] data_84;
    assign data_84 = (((data_83 <<< 6) ^ (data_83 ^ 9)) + (data_83 + 8));
    wire [WIDTH-1:0] data_85;
    assign data_85 = (((data_84 <<< 6) ^ (data_84 ^ 9)) + (data_84 + 8));
    wire [WIDTH-1:0] data_86;
    assign data_86 = (((data_85 <<< 6) ^ (data_85 ^ 9)) + (data_85 + 8));
    wire [WIDTH-1:0] data_87;
    assign data_87 = (((data_86 <<< 6) ^ (data_86 ^ 9)) + (data_86 + 8));
    wire [WIDTH-1:0] data_88;
    assign data_88 = (((data_87 <<< 6) ^ (data_87 ^ 9)) + (data_87 + 8));
    wire [WIDTH-1:0] data_89;
    assign data_89 = (((data_88 <<< 6) ^ (data_88 ^ 9)) + (data_88 + 8));
    wire [WIDTH-1:0] data_90;
    assign data_90 = (((data_89 <<< 6) ^ (data_89 ^ 9)) + (data_89 + 8));
    wire [WIDTH-1:0] data_91;
    assign data_91 = (((data_90 <<< 6) ^ (data_90 ^ 9)) + (data_90 + 8));
    wire [WIDTH-1:0] data_92;
    assign data_92 = (((data_91 <<< 6) ^ (data_91 ^ 9)) + (data_91 + 8));
    wire [WIDTH-1:0] data_93;
    assign data_93 = ((data_92 - 7) | ((data_92 >>> 4) + ((data_92 | 1) & 8)));
    wire [WIDTH-1:0] data_94;
    assign data_94 = ((data_93 | 8) >>> 8);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_94, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-d_20-1,"`define WIDTH 128
`define DEPTH 20

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 6;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 10) | (data[i] ^ 8)) ^ ((data[i] - 1) | (data[i] - 4)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 7;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 9) <<< ((data[i] <<< 4) <<< 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 7;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 20

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data <<< 10) | (in_data ^ 8)) ^ ((in_data - 1) | (in_data - 4)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 <<< 10) | (data_0 ^ 8)) ^ ((data_0 - 1) | (data_0 - 4)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 <<< 10) | (data_1 ^ 8)) ^ ((data_1 - 1) | (data_1 - 4)));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 <<< 10) | (data_2 ^ 8)) ^ ((data_2 - 1) | (data_2 - 4)));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 <<< 10) | (data_3 ^ 8)) ^ ((data_3 - 1) | (data_3 - 4)));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 <<< 10) | (data_4 ^ 8)) ^ ((data_4 - 1) | (data_4 - 4)));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 >>> 9) <<< ((data_5 <<< 4) <<< 5));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 >>> 9) <<< ((data_6 <<< 4) <<< 5));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 >>> 9) <<< ((data_7 <<< 4) <<< 5));
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 >>> 9) <<< ((data_8 <<< 4) <<< 5));
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 >>> 9) <<< ((data_9 <<< 4) <<< 5));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 >>> 9) <<< ((data_10 <<< 4) <<< 5));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 >>> 9) <<< ((data_11 <<< 4) <<< 5));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_12, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-d_50-1,"`define WIDTH 128
`define DEPTH 50

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 19;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] >>> 7) - (data[i] <<< 1)) - 6) - ((data[i] & 7) <<< (data[i] + 2))) + 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 30;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 9) >>> (in_data | 5)) ^ ((in_data | 7) | ((in_data + 1) & 4))) <<< 8);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 50

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((((in_data >>> 7) - (in_data <<< 1)) - 6) - ((in_data & 7) <<< (in_data + 2))) + 3);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((((data_0 >>> 7) - (data_0 <<< 1)) - 6) - ((data_0 & 7) <<< (data_0 + 2))) + 3);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((((data_1 >>> 7) - (data_1 <<< 1)) - 6) - ((data_1 & 7) <<< (data_1 + 2))) + 3);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((((data_2 >>> 7) - (data_2 <<< 1)) - 6) - ((data_2 & 7) <<< (data_2 + 2))) + 3);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((((data_3 >>> 7) - (data_3 <<< 1)) - 6) - ((data_3 & 7) <<< (data_3 + 2))) + 3);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((((data_4 >>> 7) - (data_4 <<< 1)) - 6) - ((data_4 & 7) <<< (data_4 + 2))) + 3);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((((data_5 >>> 7) - (data_5 <<< 1)) - 6) - ((data_5 & 7) <<< (data_5 + 2))) + 3);
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((((data_6 >>> 7) - (data_6 <<< 1)) - 6) - ((data_6 & 7) <<< (data_6 + 2))) + 3);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((((data_7 >>> 7) - (data_7 <<< 1)) - 6) - ((data_7 & 7) <<< (data_7 + 2))) + 3);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((((data_8 >>> 7) - (data_8 <<< 1)) - 6) - ((data_8 & 7) <<< (data_8 + 2))) + 3);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((((data_9 >>> 7) - (data_9 <<< 1)) - 6) - ((data_9 & 7) <<< (data_9 + 2))) + 3);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((((data_10 >>> 7) - (data_10 <<< 1)) - 6) - ((data_10 & 7) <<< (data_10 + 2))) + 3);
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((((data_11 >>> 7) - (data_11 <<< 1)) - 6) - ((data_11 & 7) <<< (data_11 + 2))) + 3);
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((((data_12 >>> 7) - (data_12 <<< 1)) - 6) - ((data_12 & 7) <<< (data_12 + 2))) + 3);
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((((data_13 >>> 7) - (data_13 <<< 1)) - 6) - ((data_13 & 7) <<< (data_13 + 2))) + 3);
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((((data_14 >>> 7) - (data_14 <<< 1)) - 6) - ((data_14 & 7) <<< (data_14 + 2))) + 3);
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((((data_15 >>> 7) - (data_15 <<< 1)) - 6) - ((data_15 & 7) <<< (data_15 + 2))) + 3);
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((((data_16 >>> 7) - (data_16 <<< 1)) - 6) - ((data_16 & 7) <<< (data_16 + 2))) + 3);
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((((data_17 >>> 7) - (data_17 <<< 1)) - 6) - ((data_17 & 7) <<< (data_17 + 2))) + 3);
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((((data_18 ^ 9) >>> (data_18 | 5)) ^ ((data_18 | 7) | ((data_18 + 1) & 4))) <<< 8);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_19, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-d_100-1,"`define WIDTH 128
`define DEPTH 100

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 15;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] & 10) ^ (data[i] + 10)) - 6) | 1) & 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 84;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 4) - 3) <<< (((in_data >>> 9) & 10) & 5));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[100]), 
        .out_vld(ready[100])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 100

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data | 4) - 3) <<< (((in_data >>> 9) & 10) & 5));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((((data_0 & 10) ^ (data_0 + 10)) - 6) | 1) & 9);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((((data_1 & 10) ^ (data_1 + 10)) - 6) | 1) & 9);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((((data_2 & 10) ^ (data_2 + 10)) - 6) | 1) & 9);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((((data_3 & 10) ^ (data_3 + 10)) - 6) | 1) & 9);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((((data_4 & 10) ^ (data_4 + 10)) - 6) | 1) & 9);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((((data_5 & 10) ^ (data_5 + 10)) - 6) | 1) & 9);
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((((data_6 & 10) ^ (data_6 + 10)) - 6) | 1) & 9);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((((data_7 & 10) ^ (data_7 + 10)) - 6) | 1) & 9);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((((data_8 & 10) ^ (data_8 + 10)) - 6) | 1) & 9);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((((data_9 & 10) ^ (data_9 + 10)) - 6) | 1) & 9);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((((data_10 & 10) ^ (data_10 + 10)) - 6) | 1) & 9);
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((((data_11 & 10) ^ (data_11 + 10)) - 6) | 1) & 9);
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((((data_12 & 10) ^ (data_12 + 10)) - 6) | 1) & 9);
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((((data_13 & 10) ^ (data_13 + 10)) - 6) | 1) & 9);
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((((data_14 & 10) ^ (data_14 + 10)) - 6) | 1) & 9);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_15, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_256-d_20-1,"`define WIDTH 256
`define DEPTH 20

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 15;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 8) <<< ((in_data - 4) & (in_data & 3)));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 6) <<< (data[i] ^ 1));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );
endmodule",,"`define WIDTH 256
`define DEPTH 20

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data <<< 8) <<< ((in_data - 4) & (in_data & 3)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 & 6) <<< (data_0 ^ 1));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 & 6) <<< (data_1 ^ 1));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 & 6) <<< (data_2 ^ 1));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 & 6) <<< (data_3 ^ 1));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_4, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_256-d_50-1,"`define WIDTH 256
`define DEPTH 50

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 5) >>> (in_data >>> 7)) & 9) & ((in_data >>> 9) ^ 4));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 48;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 1) - 7) ^ 8) ^ 9);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );
endmodule",,"`define WIDTH 256
`define DEPTH 50

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data + 1) - 7) ^ 8) ^ 9);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 - 5) >>> (data_0 >>> 7)) & 9) & ((data_0 >>> 9) ^ 4));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_1, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_256-d_100-1,"`define WIDTH 256
`define DEPTH 100

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 9) | (in_data - 3)) ^ 4);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 1) & (in_data & 9)) <<< 8);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 98;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[100]), 
        .out_vld(ready[100])
    );
endmodule",,"`define WIDTH 256
`define DEPTH 100

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data | 1) & (in_data & 9)) <<< 8);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 - 9) | (data_0 - 3)) ^ 4);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_1, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-d_20-1,"`define WIDTH 128
`define DEPTH 20

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 10) - 4) - ((data[i] >>> 1) <<< (data[i] >>> 4)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 6;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 9) - 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 7) + (in_data & 7)) - (in_data <<< 7));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 7;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) & 9) - 6);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 2) >>> 1) + ((in_data <<< 3) - (in_data ^ 5)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 20

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data >>> 10) - 4) - ((in_data >>> 1) <<< (in_data >>> 4)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 >>> 10) - 4) - ((data_0 >>> 1) <<< (data_0 >>> 4)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 >>> 10) - 4) - ((data_1 >>> 1) <<< (data_1 >>> 4)));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 >>> 10) - 4) - ((data_2 >>> 1) <<< (data_2 >>> 4)));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 ^ 9) - 7);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 ^ 9) - 7);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 ^ 9) - 7);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 ^ 9) - 7);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 ^ 9) - 7);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 ^ 9) - 7);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 <<< 7) + (data_9 & 7)) - (data_9 <<< 7));
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 >>> 2) >>> 1) + ((data_10 <<< 3) - (data_10 ^ 5)));
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 + 8) & 9) - 6);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_12, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-d_50-1,"`define WIDTH 128
`define DEPTH 50

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 14;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 10) >>> (data[i] + 1)) - 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 20;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 1) <<< 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 8;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 7) + 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 9) ^ (in_data <<< 8)) - (in_data & 7));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) & 8) <<< ((in_data - 10) >>> 1));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 6;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 50

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data ^ 9) ^ (in_data <<< 8)) - (in_data & 7));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 ^ 2) & 8) <<< ((data_0 - 10) >>> 1));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((data_16 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((data_17 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((data_20 <<< 1) <<< 6);
    wire [WIDTH-1:0] data_22;
    assign data_22 = (((data_21 + 10) >>> (data_21 + 1)) - 5);
    wire [WIDTH-1:0] data_23;
    assign data_23 = (((data_22 + 10) >>> (data_22 + 1)) - 5);
    wire [WIDTH-1:0] data_24;
    assign data_24 = (((data_23 + 10) >>> (data_23 + 1)) - 5);
    wire [WIDTH-1:0] data_25;
    assign data_25 = (((data_24 + 10) >>> (data_24 + 1)) - 5);
    wire [WIDTH-1:0] data_26;
    assign data_26 = (((data_25 + 10) >>> (data_25 + 1)) - 5);
    wire [WIDTH-1:0] data_27;
    assign data_27 = (((data_26 + 10) >>> (data_26 + 1)) - 5);
    wire [WIDTH-1:0] data_28;
    assign data_28 = (((data_27 + 10) >>> (data_27 + 1)) - 5);
    wire [WIDTH-1:0] data_29;
    assign data_29 = (((data_28 + 10) >>> (data_28 + 1)) - 5);
    wire [WIDTH-1:0] data_30;
    assign data_30 = (((data_29 + 10) >>> (data_29 + 1)) - 5);
    wire [WIDTH-1:0] data_31;
    assign data_31 = (((data_30 + 10) >>> (data_30 + 1)) - 5);
    wire [WIDTH-1:0] data_32;
    assign data_32 = (((data_31 + 10) >>> (data_31 + 1)) - 5);
    wire [WIDTH-1:0] data_33;
    assign data_33 = (((data_32 + 10) >>> (data_32 + 1)) - 5);
    wire [WIDTH-1:0] data_34;
    assign data_34 = (((data_33 + 10) >>> (data_33 + 1)) - 5);
    wire [WIDTH-1:0] data_35;
    assign data_35 = (((data_34 + 10) >>> (data_34 + 1)) - 5);
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((data_35 - 7) + 10);
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((data_36 - 7) + 10);
    wire [WIDTH-1:0] data_38;
    assign data_38 = ((data_37 - 7) + 10);
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((data_38 - 7) + 10);
    wire [WIDTH-1:0] data_40;
    assign data_40 = ((data_39 - 7) + 10);
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((data_40 - 7) + 10);
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((data_41 - 7) + 10);
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 - 7) + 10);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_43, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-d_100-1,"`define WIDTH 128
`define DEPTH 100

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 4) & 3);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 9) - 9) | ((in_data - 4) >>> 8));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 95;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 2) - ((in_data <<< 2) + 3)) ^ 7);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 1) & ((in_data >>> 8) >>> 3)) | 5);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 5) & (in_data + 8)) - (in_data - 2)) <<< 10);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[100]), 
        .out_vld(ready[100])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 100

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data & 5) & (in_data + 8)) - (in_data - 2)) <<< 10);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 <<< 2) - ((data_0 <<< 2) + 3)) ^ 7);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 + 1) & ((data_1 >>> 8) >>> 3)) | 5);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 ^ 4) & 3);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 | 9) - 9) | ((data_3 - 4) >>> 8));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_4, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_256-d_20-1,"`define WIDTH 256
`define DEPTH 20

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 8) + 2);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 2) + 3);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 7) ^ (in_data ^ 6));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 10;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 6) & 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 6;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 7) ^ 2);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );
endmodule",,"`define WIDTH 256
`define DEPTH 20

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data - 6) & 1);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 - 6) & 1);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 - 6) & 1);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 - 6) & 1);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 - 6) & 1);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 - 6) & 1);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 - 6) & 1);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 - 6) & 1);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 - 6) & 1);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 - 6) & 1);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 & 8) + 2);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 >>> 7) ^ 2);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 - 7) ^ (data_11 ^ 6));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 ^ 2) + 3);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_13, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_256-d_50-1,"`define WIDTH 256
`define DEPTH 50

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 3) & (in_data | 4)) <<< 3) + (in_data & 4));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 8) - (((in_data <<< 10) - (in_data | 8)) & 10));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 18;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 9) >>> (data[i] - 7)) <<< (data[i] <<< 10)) <<< 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 7) >>> ((in_data + 1) - 6)) - 10);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 28;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 10) ^ 1) + ((in_data >>> 7) & 3));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );
endmodule",,"`define WIDTH 256
`define DEPTH 50

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data + 10) ^ 1) + ((in_data >>> 7) & 3));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 | 9) >>> (data_0 - 7)) <<< (data_0 <<< 10)) <<< 4);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 | 9) >>> (data_1 - 7)) <<< (data_1 <<< 10)) <<< 4);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 | 9) >>> (data_2 - 7)) <<< (data_2 <<< 10)) <<< 4);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 | 9) >>> (data_3 - 7)) <<< (data_3 <<< 10)) <<< 4);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 | 9) >>> (data_4 - 7)) <<< (data_4 <<< 10)) <<< 4);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((((data_5 | 9) >>> (data_5 - 7)) <<< (data_5 <<< 10)) <<< 4);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((((data_6 | 9) >>> (data_6 - 7)) <<< (data_6 <<< 10)) <<< 4);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((((data_7 | 9) >>> (data_7 - 7)) <<< (data_7 <<< 10)) <<< 4);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((((data_8 | 9) >>> (data_8 - 7)) <<< (data_8 <<< 10)) <<< 4);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((((data_9 | 9) >>> (data_9 - 7)) <<< (data_9 <<< 10)) <<< 4);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((((data_10 | 9) >>> (data_10 - 7)) <<< (data_10 <<< 10)) <<< 4);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((((data_11 | 9) >>> (data_11 - 7)) <<< (data_11 <<< 10)) <<< 4);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((((data_12 | 9) >>> (data_12 - 7)) <<< (data_12 <<< 10)) <<< 4);
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((((data_13 | 9) >>> (data_13 - 7)) <<< (data_13 <<< 10)) <<< 4);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((((data_14 | 9) >>> (data_14 - 7)) <<< (data_14 <<< 10)) <<< 4);
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((((data_15 | 9) >>> (data_15 - 7)) <<< (data_15 <<< 10)) <<< 4);
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((((data_16 | 9) >>> (data_16 - 7)) <<< (data_16 <<< 10)) <<< 4);
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((((data_17 | 9) >>> (data_17 - 7)) <<< (data_17 <<< 10)) <<< 4);
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((((data_18 <<< 3) & (data_18 | 4)) <<< 3) + (data_18 & 4));
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 & 8) - (((data_19 <<< 10) - (data_19 | 8)) & 10));
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((data_20 & 7) >>> ((data_20 + 1) - 6)) - 10);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_21, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_256-d_100-1,"`define WIDTH 256
`define DEPTH 100

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 30;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 4) | (data[i] | 5)) - (data[i] ^ 5)) - (data[i] ^ 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 46;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 5) ^ (((data[i] - 4) >>> 10) <<< (data[i] <<< 1)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 21;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 2) >>> ((in_data >>> 10) >>> 7));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 9) + (in_data >>> 10)) | ((in_data - 1) <<< (in_data + 5))) ^ ((in_data ^ 10) ^ (in_data >>> 4)));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 4) - 3);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[79]),
        .in_vld(ready[79]),
        .out_data(data[100]), 
        .out_vld(ready[100])
    );
endmodule",,"`define WIDTH 256
`define DEPTH 100

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data + 9) + (in_data >>> 10)) | ((in_data - 1) <<< (in_data + 5))) ^ ((in_data ^ 10) ^ (in_data >>> 4)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 - 4) - 3);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 - 2) >>> ((data_1 >>> 10) >>> 7));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 <<< 5) ^ (((data_2 - 4) >>> 10) <<< (data_2 <<< 1)));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 <<< 5) ^ (((data_3 - 4) >>> 10) <<< (data_3 <<< 1)));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 <<< 5) ^ (((data_4 - 4) >>> 10) <<< (data_4 <<< 1)));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 <<< 5) ^ (((data_5 - 4) >>> 10) <<< (data_5 <<< 1)));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 <<< 5) ^ (((data_6 - 4) >>> 10) <<< (data_6 <<< 1)));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 <<< 5) ^ (((data_7 - 4) >>> 10) <<< (data_7 <<< 1)));
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 <<< 5) ^ (((data_8 - 4) >>> 10) <<< (data_8 <<< 1)));
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 <<< 5) ^ (((data_9 - 4) >>> 10) <<< (data_9 <<< 1)));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 <<< 5) ^ (((data_10 - 4) >>> 10) <<< (data_10 <<< 1)));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 <<< 5) ^ (((data_11 - 4) >>> 10) <<< (data_11 <<< 1)));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 <<< 5) ^ (((data_12 - 4) >>> 10) <<< (data_12 <<< 1)));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 <<< 5) ^ (((data_13 - 4) >>> 10) <<< (data_13 <<< 1)));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 <<< 5) ^ (((data_14 - 4) >>> 10) <<< (data_14 <<< 1)));
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 <<< 5) ^ (((data_15 - 4) >>> 10) <<< (data_15 <<< 1)));
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((data_16 <<< 5) ^ (((data_16 - 4) >>> 10) <<< (data_16 <<< 1)));
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((data_17 <<< 5) ^ (((data_17 - 4) >>> 10) <<< (data_17 <<< 1)));
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 <<< 5) ^ (((data_18 - 4) >>> 10) <<< (data_18 <<< 1)));
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 <<< 5) ^ (((data_19 - 4) >>> 10) <<< (data_19 <<< 1)));
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((data_20 <<< 5) ^ (((data_20 - 4) >>> 10) <<< (data_20 <<< 1)));
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((data_21 <<< 5) ^ (((data_21 - 4) >>> 10) <<< (data_21 <<< 1)));
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 <<< 5) ^ (((data_22 - 4) >>> 10) <<< (data_22 <<< 1)));
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 <<< 5) ^ (((data_23 - 4) >>> 10) <<< (data_23 <<< 1)));
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((data_24 <<< 5) ^ (((data_24 - 4) >>> 10) <<< (data_24 <<< 1)));
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((data_25 <<< 5) ^ (((data_25 - 4) >>> 10) <<< (data_25 <<< 1)));
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((data_26 <<< 5) ^ (((data_26 - 4) >>> 10) <<< (data_26 <<< 1)));
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((data_27 <<< 5) ^ (((data_27 - 4) >>> 10) <<< (data_27 <<< 1)));
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((data_28 <<< 5) ^ (((data_28 - 4) >>> 10) <<< (data_28 <<< 1)));
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((data_29 <<< 5) ^ (((data_29 - 4) >>> 10) <<< (data_29 <<< 1)));
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((data_30 <<< 5) ^ (((data_30 - 4) >>> 10) <<< (data_30 <<< 1)));
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((data_31 <<< 5) ^ (((data_31 - 4) >>> 10) <<< (data_31 <<< 1)));
    wire [WIDTH-1:0] data_33;
    assign data_33 = ((data_32 <<< 5) ^ (((data_32 - 4) >>> 10) <<< (data_32 <<< 1)));
    wire [WIDTH-1:0] data_34;
    assign data_34 = ((data_33 <<< 5) ^ (((data_33 - 4) >>> 10) <<< (data_33 <<< 1)));
    wire [WIDTH-1:0] data_35;
    assign data_35 = ((data_34 <<< 5) ^ (((data_34 - 4) >>> 10) <<< (data_34 <<< 1)));
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((data_35 <<< 5) ^ (((data_35 - 4) >>> 10) <<< (data_35 <<< 1)));
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((data_36 <<< 5) ^ (((data_36 - 4) >>> 10) <<< (data_36 <<< 1)));
    wire [WIDTH-1:0] data_38;
    assign data_38 = ((data_37 <<< 5) ^ (((data_37 - 4) >>> 10) <<< (data_37 <<< 1)));
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((data_38 <<< 5) ^ (((data_38 - 4) >>> 10) <<< (data_38 <<< 1)));
    wire [WIDTH-1:0] data_40;
    assign data_40 = ((data_39 <<< 5) ^ (((data_39 - 4) >>> 10) <<< (data_39 <<< 1)));
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((data_40 <<< 5) ^ (((data_40 - 4) >>> 10) <<< (data_40 <<< 1)));
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((data_41 <<< 5) ^ (((data_41 - 4) >>> 10) <<< (data_41 <<< 1)));
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 <<< 5) ^ (((data_42 - 4) >>> 10) <<< (data_42 <<< 1)));
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((data_43 <<< 5) ^ (((data_43 - 4) >>> 10) <<< (data_43 <<< 1)));
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((data_44 <<< 5) ^ (((data_44 - 4) >>> 10) <<< (data_44 <<< 1)));
    wire [WIDTH-1:0] data_46;
    assign data_46 = ((data_45 <<< 5) ^ (((data_45 - 4) >>> 10) <<< (data_45 <<< 1)));
    wire [WIDTH-1:0] data_47;
    assign data_47 = ((data_46 <<< 5) ^ (((data_46 - 4) >>> 10) <<< (data_46 <<< 1)));
    wire [WIDTH-1:0] data_48;
    assign data_48 = ((data_47 <<< 5) ^ (((data_47 - 4) >>> 10) <<< (data_47 <<< 1)));
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((((data_48 & 4) | (data_48 | 5)) - (data_48 ^ 5)) - (data_48 ^ 7));
    wire [WIDTH-1:0] data_50;
    assign data_50 = ((((data_49 & 4) | (data_49 | 5)) - (data_49 ^ 5)) - (data_49 ^ 7));
    wire [WIDTH-1:0] data_51;
    assign data_51 = ((((data_50 & 4) | (data_50 | 5)) - (data_50 ^ 5)) - (data_50 ^ 7));
    wire [WIDTH-1:0] data_52;
    assign data_52 = ((((data_51 & 4) | (data_51 | 5)) - (data_51 ^ 5)) - (data_51 ^ 7));
    wire [WIDTH-1:0] data_53;
    assign data_53 = ((((data_52 & 4) | (data_52 | 5)) - (data_52 ^ 5)) - (data_52 ^ 7));
    wire [WIDTH-1:0] data_54;
    assign data_54 = ((((data_53 & 4) | (data_53 | 5)) - (data_53 ^ 5)) - (data_53 ^ 7));
    wire [WIDTH-1:0] data_55;
    assign data_55 = ((((data_54 & 4) | (data_54 | 5)) - (data_54 ^ 5)) - (data_54 ^ 7));
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((((data_55 & 4) | (data_55 | 5)) - (data_55 ^ 5)) - (data_55 ^ 7));
    wire [WIDTH-1:0] data_57;
    assign data_57 = ((((data_56 & 4) | (data_56 | 5)) - (data_56 ^ 5)) - (data_56 ^ 7));
    wire [WIDTH-1:0] data_58;
    assign data_58 = ((((data_57 & 4) | (data_57 | 5)) - (data_57 ^ 5)) - (data_57 ^ 7));
    wire [WIDTH-1:0] data_59;
    assign data_59 = ((((data_58 & 4) | (data_58 | 5)) - (data_58 ^ 5)) - (data_58 ^ 7));
    wire [WIDTH-1:0] data_60;
    assign data_60 = ((((data_59 & 4) | (data_59 | 5)) - (data_59 ^ 5)) - (data_59 ^ 7));
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((((data_60 & 4) | (data_60 | 5)) - (data_60 ^ 5)) - (data_60 ^ 7));
    wire [WIDTH-1:0] data_62;
    assign data_62 = ((((data_61 & 4) | (data_61 | 5)) - (data_61 ^ 5)) - (data_61 ^ 7));
    wire [WIDTH-1:0] data_63;
    assign data_63 = ((((data_62 & 4) | (data_62 | 5)) - (data_62 ^ 5)) - (data_62 ^ 7));
    wire [WIDTH-1:0] data_64;
    assign data_64 = ((((data_63 & 4) | (data_63 | 5)) - (data_63 ^ 5)) - (data_63 ^ 7));
    wire [WIDTH-1:0] data_65;
    assign data_65 = ((((data_64 & 4) | (data_64 | 5)) - (data_64 ^ 5)) - (data_64 ^ 7));
    wire [WIDTH-1:0] data_66;
    assign data_66 = ((((data_65 & 4) | (data_65 | 5)) - (data_65 ^ 5)) - (data_65 ^ 7));
    wire [WIDTH-1:0] data_67;
    assign data_67 = ((((data_66 & 4) | (data_66 | 5)) - (data_66 ^ 5)) - (data_66 ^ 7));
    wire [WIDTH-1:0] data_68;
    assign data_68 = ((((data_67 & 4) | (data_67 | 5)) - (data_67 ^ 5)) - (data_67 ^ 7));
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((((data_68 & 4) | (data_68 | 5)) - (data_68 ^ 5)) - (data_68 ^ 7));
    wire [WIDTH-1:0] data_70;
    assign data_70 = ((((data_69 & 4) | (data_69 | 5)) - (data_69 ^ 5)) - (data_69 ^ 7));
    wire [WIDTH-1:0] data_71;
    assign data_71 = ((((data_70 & 4) | (data_70 | 5)) - (data_70 ^ 5)) - (data_70 ^ 7));
    wire [WIDTH-1:0] data_72;
    assign data_72 = ((((data_71 & 4) | (data_71 | 5)) - (data_71 ^ 5)) - (data_71 ^ 7));
    wire [WIDTH-1:0] data_73;
    assign data_73 = ((((data_72 & 4) | (data_72 | 5)) - (data_72 ^ 5)) - (data_72 ^ 7));
    wire [WIDTH-1:0] data_74;
    assign data_74 = ((((data_73 & 4) | (data_73 | 5)) - (data_73 ^ 5)) - (data_73 ^ 7));
    wire [WIDTH-1:0] data_75;
    assign data_75 = ((((data_74 & 4) | (data_74 | 5)) - (data_74 ^ 5)) - (data_74 ^ 7));
    wire [WIDTH-1:0] data_76;
    assign data_76 = ((((data_75 & 4) | (data_75 | 5)) - (data_75 ^ 5)) - (data_75 ^ 7));
    wire [WIDTH-1:0] data_77;
    assign data_77 = ((((data_76 & 4) | (data_76 | 5)) - (data_76 ^ 5)) - (data_76 ^ 7));
    wire [WIDTH-1:0] data_78;
    assign data_78 = ((((data_77 & 4) | (data_77 | 5)) - (data_77 ^ 5)) - (data_77 ^ 7));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_78, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-d_20-1,"`define WIDTH 128
`define DEPTH 20

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 10) - ((in_data ^ 7) >>> 5));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 10) >>> (in_data + 5)) - (((in_data | 1) | 1) ^ 8));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 9) <<< (in_data | 4));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 1;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 4) - (((in_data | 10) | 3) - (in_data & 2)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 10) <<< ((in_data - 7) >>> 10)) <<< (in_data + 9)) ^ ((in_data - 4) ^ 8));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) <<< 5) & (in_data ^ 2));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 1) + (in_data | 8));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 1) <<< ((in_data - 10) + 5)) >>> 4);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 10) + 4) ^ 4) ^ ((((in_data >>> 4) <<< 10) | 5) ^ 9));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 10;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 6) <<< 6) + (data[i] <<< 2)) - 7);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 20

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data & 10) <<< ((in_data - 7) >>> 10)) <<< (in_data + 9)) ^ ((in_data - 4) ^ 8));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 - 10) + 4) ^ 4) ^ ((((data_0 >>> 4) <<< 10) | 5) ^ 9));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 - 1) + (data_1 | 8));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 + 8) <<< 5) & (data_2 ^ 2));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 ^ 6) <<< 6) + (data_3 <<< 2)) - 7);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 ^ 6) <<< 6) + (data_4 <<< 2)) - 7);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((((data_5 ^ 6) <<< 6) + (data_5 <<< 2)) - 7);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((((data_6 ^ 6) <<< 6) + (data_6 <<< 2)) - 7);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((((data_7 ^ 6) <<< 6) + (data_7 <<< 2)) - 7);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((((data_8 ^ 6) <<< 6) + (data_8 <<< 2)) - 7);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((((data_9 ^ 6) <<< 6) + (data_9 <<< 2)) - 7);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((((data_10 ^ 6) <<< 6) + (data_10 <<< 2)) - 7);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((((data_11 ^ 6) <<< 6) + (data_11 <<< 2)) - 7);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((((data_12 ^ 6) <<< 6) + (data_12 <<< 2)) - 7);
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 | 1) <<< ((data_13 - 10) + 5)) >>> 4);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 & 4) - (((data_14 | 10) | 3) - (data_14 & 2)));
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 <<< 10) - ((data_15 ^ 7) >>> 5));
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((data_16 <<< 9) <<< (data_16 | 4));
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((data_17 ^ 10) >>> (data_17 + 5)) - (((data_17 | 1) | 1) ^ 8));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_18, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-d_50-1,"`define WIDTH 128
`define DEPTH 50

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] & 1) | (data[i] - 2)) ^ 6) - ((data[i] ^ 7) - (data[i] - 2))) + (((data[i] >>> 7) + (data[i] ^ 5)) ^ 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 3) <<< 3) & (in_data >>> 10));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 4) + 6) <<< 6);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 2) - ((((in_data | 3) ^ (in_data >>> 9)) & 7) >>> (in_data | 8)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 5) >>> 7) - 3) | ((in_data - 1) - ((in_data & 10) & 2)));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 6;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 8) ^ ((data[i] >>> 10) <<< 7)) | ((data[i] >>> 10) & 8)) + (data[i] - 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 29;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 4) <<< (in_data ^ 6)) ^ 9) <<< ((in_data & 6) >>> ((in_data & 1) - (in_data ^ 5))));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 5;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 7) | 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 7) <<< (((in_data + 2) ^ 2) + 2));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 10) <<< (in_data & 9));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 50

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data | 5) >>> 7) - 3) | ((in_data - 1) - ((in_data & 10) & 2)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 <<< 2) - ((((data_0 | 3) ^ (data_0 >>> 9)) & 7) >>> (data_0 | 8)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 & 10) <<< (data_1 & 9));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 - 4) + 6) <<< 6);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 | 7) <<< (((data_3 + 2) ^ 2) + 2));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 & 3) <<< 3) & (data_4 >>> 10));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 + 7) | 1);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 + 7) | 1);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 + 7) | 1);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 + 7) | 1);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 + 7) | 1);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((((data_10 ^ 4) <<< (data_10 ^ 6)) ^ 9) <<< ((data_10 & 6) >>> ((data_10 & 1) - (data_10 ^ 5))));
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((((data_11 & 1) | (data_11 - 2)) ^ 6) - ((data_11 ^ 7) - (data_11 - 2))) + (((data_11 >>> 7) + (data_11 ^ 5)) ^ 8));
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((((data_12 & 1) | (data_12 - 2)) ^ 6) - ((data_12 ^ 7) - (data_12 - 2))) + (((data_12 >>> 7) + (data_12 ^ 5)) ^ 8));
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((((data_13 & 1) | (data_13 - 2)) ^ 6) - ((data_13 ^ 7) - (data_13 - 2))) + (((data_13 >>> 7) + (data_13 ^ 5)) ^ 8));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((((data_14 <<< 8) ^ ((data_14 >>> 10) <<< 7)) | ((data_14 >>> 10) & 8)) + (data_14 - 6));
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((((data_15 <<< 8) ^ ((data_15 >>> 10) <<< 7)) | ((data_15 >>> 10) & 8)) + (data_15 - 6));
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((((data_16 <<< 8) ^ ((data_16 >>> 10) <<< 7)) | ((data_16 >>> 10) & 8)) + (data_16 - 6));
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((((data_17 <<< 8) ^ ((data_17 >>> 10) <<< 7)) | ((data_17 >>> 10) & 8)) + (data_17 - 6));
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((((data_18 <<< 8) ^ ((data_18 >>> 10) <<< 7)) | ((data_18 >>> 10) & 8)) + (data_18 - 6));
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((((data_19 <<< 8) ^ ((data_19 >>> 10) <<< 7)) | ((data_19 >>> 10) & 8)) + (data_19 - 6));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_20, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-d_100-1,"`define WIDTH 128
`define DEPTH 100

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 45;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 2) + (data[i] <<< 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 11;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 5) <<< (in_data + 10));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 1) >>> 3);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 2) - 7);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 10) ^ 3);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 5) ^ (in_data <<< 2));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 7) <<< 3);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 12;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 4) + (data[i] >>> 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 24;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 5) & (data[i] | 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 3) & 5);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[88]), 
        .out_vld(ready[88])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[88]),
        .in_vld(ready[88]),
        .out_data(data[89]), 
        .out_vld(ready[89])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[89]),
        .in_vld(ready[89]),
        .out_data(data[100]), 
        .out_vld(ready[100])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 100

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data <<< 5) <<< (in_data + 10));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 <<< 5) & (data_0 | 5));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 <<< 5) & (data_1 | 5));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 <<< 5) & (data_2 | 5));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 <<< 5) & (data_3 | 5));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 <<< 5) & (data_4 | 5));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 <<< 5) & (data_5 | 5));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 <<< 5) & (data_6 | 5));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 <<< 5) & (data_7 | 5));
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 <<< 5) & (data_8 | 5));
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 <<< 5) & (data_9 | 5));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 <<< 5) & (data_10 | 5));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 <<< 5) & (data_11 | 5));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 <<< 5) & (data_12 | 5));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 <<< 5) & (data_13 | 5));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 <<< 5) & (data_14 | 5));
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 <<< 5) & (data_15 | 5));
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((data_16 <<< 5) & (data_16 | 5));
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((data_17 <<< 5) & (data_17 | 5));
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 <<< 5) & (data_18 | 5));
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 <<< 5) & (data_19 | 5));
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((data_20 <<< 5) & (data_20 | 5));
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((data_21 <<< 5) & (data_21 | 5));
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 <<< 5) & (data_22 | 5));
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 <<< 5) & (data_23 | 5));
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((data_24 + 2) - 7);
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((data_25 + 3) & 5);
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((data_26 + 3) & 5);
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((data_27 - 1) >>> 3);
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((data_28 + 10) ^ 3);
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((data_29 | 2) + (data_29 <<< 8));
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((data_30 | 2) + (data_30 <<< 8));
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((data_31 | 2) + (data_31 <<< 8));
    wire [WIDTH-1:0] data_33;
    assign data_33 = ((data_32 | 2) + (data_32 <<< 8));
    wire [WIDTH-1:0] data_34;
    assign data_34 = ((data_33 | 2) + (data_33 <<< 8));
    wire [WIDTH-1:0] data_35;
    assign data_35 = ((data_34 | 2) + (data_34 <<< 8));
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((data_35 | 2) + (data_35 <<< 8));
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((data_36 | 2) + (data_36 <<< 8));
    wire [WIDTH-1:0] data_38;
    assign data_38 = ((data_37 | 2) + (data_37 <<< 8));
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((data_38 | 2) + (data_38 <<< 8));
    wire [WIDTH-1:0] data_40;
    assign data_40 = ((data_39 | 2) + (data_39 <<< 8));
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((data_40 | 2) + (data_40 <<< 8));
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((data_41 | 2) + (data_41 <<< 8));
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 | 2) + (data_42 <<< 8));
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((data_43 | 2) + (data_43 <<< 8));
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((data_44 | 2) + (data_44 <<< 8));
    wire [WIDTH-1:0] data_46;
    assign data_46 = ((data_45 | 2) + (data_45 <<< 8));
    wire [WIDTH-1:0] data_47;
    assign data_47 = ((data_46 | 2) + (data_46 <<< 8));
    wire [WIDTH-1:0] data_48;
    assign data_48 = ((data_47 | 2) + (data_47 <<< 8));
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((data_48 | 2) + (data_48 <<< 8));
    wire [WIDTH-1:0] data_50;
    assign data_50 = ((data_49 | 2) + (data_49 <<< 8));
    wire [WIDTH-1:0] data_51;
    assign data_51 = ((data_50 | 2) + (data_50 <<< 8));
    wire [WIDTH-1:0] data_52;
    assign data_52 = ((data_51 | 2) + (data_51 <<< 8));
    wire [WIDTH-1:0] data_53;
    assign data_53 = ((data_52 | 2) + (data_52 <<< 8));
    wire [WIDTH-1:0] data_54;
    assign data_54 = ((data_53 | 2) + (data_53 <<< 8));
    wire [WIDTH-1:0] data_55;
    assign data_55 = ((data_54 | 2) + (data_54 <<< 8));
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((data_55 | 2) + (data_55 <<< 8));
    wire [WIDTH-1:0] data_57;
    assign data_57 = ((data_56 | 2) + (data_56 <<< 8));
    wire [WIDTH-1:0] data_58;
    assign data_58 = ((data_57 | 2) + (data_57 <<< 8));
    wire [WIDTH-1:0] data_59;
    assign data_59 = ((data_58 | 2) + (data_58 <<< 8));
    wire [WIDTH-1:0] data_60;
    assign data_60 = ((data_59 | 2) + (data_59 <<< 8));
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((data_60 | 2) + (data_60 <<< 8));
    wire [WIDTH-1:0] data_62;
    assign data_62 = ((data_61 | 2) + (data_61 <<< 8));
    wire [WIDTH-1:0] data_63;
    assign data_63 = ((data_62 | 2) + (data_62 <<< 8));
    wire [WIDTH-1:0] data_64;
    assign data_64 = ((data_63 | 2) + (data_63 <<< 8));
    wire [WIDTH-1:0] data_65;
    assign data_65 = ((data_64 | 2) + (data_64 <<< 8));
    wire [WIDTH-1:0] data_66;
    assign data_66 = ((data_65 | 2) + (data_65 <<< 8));
    wire [WIDTH-1:0] data_67;
    assign data_67 = ((data_66 | 2) + (data_66 <<< 8));
    wire [WIDTH-1:0] data_68;
    assign data_68 = ((data_67 | 2) + (data_67 <<< 8));
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((data_68 | 2) + (data_68 <<< 8));
    wire [WIDTH-1:0] data_70;
    assign data_70 = ((data_69 | 2) + (data_69 <<< 8));
    wire [WIDTH-1:0] data_71;
    assign data_71 = ((data_70 | 2) + (data_70 <<< 8));
    wire [WIDTH-1:0] data_72;
    assign data_72 = ((data_71 | 2) + (data_71 <<< 8));
    wire [WIDTH-1:0] data_73;
    assign data_73 = ((data_72 | 2) + (data_72 <<< 8));
    wire [WIDTH-1:0] data_74;
    assign data_74 = ((data_73 | 2) + (data_73 <<< 8));
    wire [WIDTH-1:0] data_75;
    assign data_75 = ((data_74 & 7) <<< 3);
    wire [WIDTH-1:0] data_76;
    assign data_76 = ((data_75 ^ 4) + (data_75 >>> 7));
    wire [WIDTH-1:0] data_77;
    assign data_77 = ((data_76 ^ 4) + (data_76 >>> 7));
    wire [WIDTH-1:0] data_78;
    assign data_78 = ((data_77 ^ 4) + (data_77 >>> 7));
    wire [WIDTH-1:0] data_79;
    assign data_79 = ((data_78 ^ 4) + (data_78 >>> 7));
    wire [WIDTH-1:0] data_80;
    assign data_80 = ((data_79 ^ 4) + (data_79 >>> 7));
    wire [WIDTH-1:0] data_81;
    assign data_81 = ((data_80 ^ 4) + (data_80 >>> 7));
    wire [WIDTH-1:0] data_82;
    assign data_82 = ((data_81 ^ 4) + (data_81 >>> 7));
    wire [WIDTH-1:0] data_83;
    assign data_83 = ((data_82 ^ 4) + (data_82 >>> 7));
    wire [WIDTH-1:0] data_84;
    assign data_84 = ((data_83 ^ 4) + (data_83 >>> 7));
    wire [WIDTH-1:0] data_85;
    assign data_85 = ((data_84 ^ 4) + (data_84 >>> 7));
    wire [WIDTH-1:0] data_86;
    assign data_86 = ((data_85 ^ 4) + (data_85 >>> 7));
    wire [WIDTH-1:0] data_87;
    assign data_87 = ((data_86 ^ 4) + (data_86 >>> 7));
    wire [WIDTH-1:0] data_88;
    assign data_88 = ((data_87 | 5) ^ (data_87 <<< 2));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_88, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_256-d_20-1,"`define WIDTH 256
`define DEPTH 20

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 8;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 8) - (data[i] <<< 8)) - (data[i] & 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) | 7);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 10) | (in_data <<< 3));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) - 5);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 4) >>> 7) & ((in_data - 5) >>> (in_data & 2)));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 3) <<< ((in_data - 10) >>> 9));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 7) | 9) <<< ((in_data & 1) + (in_data <<< 7)));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 6) <<< 7);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 5) + (in_data >>> 10));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 7) >>> (in_data + 4)) >>> 1);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );
endmodule",,"`define WIDTH 256
`define DEPTH 20

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data & 4) >>> 7) & ((in_data - 5) >>> (in_data & 2)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 - 3) <<< ((data_0 - 10) >>> 9));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 + 5) + (data_1 >>> 10));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 - 8) - (data_2 <<< 8)) - (data_2 & 6));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 - 8) - (data_3 <<< 8)) - (data_3 & 6));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 - 8) - (data_4 <<< 8)) - (data_4 & 6));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 - 8) - (data_5 <<< 8)) - (data_5 & 6));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 - 8) - (data_6 <<< 8)) - (data_6 & 6));
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 - 8) - (data_7 <<< 8)) - (data_7 & 6));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 - 8) - (data_8 <<< 8)) - (data_8 & 6));
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 - 8) - (data_9 <<< 8)) - (data_9 & 6));
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 <<< 7) >>> (data_10 + 4)) >>> 1);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 <<< 7) | 7);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 - 10) | (data_12 <<< 3));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 <<< 7) - 5);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 ^ 6) <<< 7);
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((data_15 & 7) | 9) <<< ((data_15 & 1) + (data_15 <<< 7)));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_16, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_256-d_50-1,"`define WIDTH 256
`define DEPTH 50

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 5;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 2) & 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 8) + 3) - 7);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 2) - ((in_data - 3) <<< 2));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 16;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 7) & (data[i] - 2)) + ((data[i] | 3) & 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 10) >>> 4) - (in_data & 3));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 3) | 2) - ((((in_data <<< 10) ^ 5) & (in_data & 4)) ^ 9));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 1) & ((in_data ^ 3) <<< 5));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 22;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] <<< 5) >>> (data[i] <<< 3)) + ((data[i] - 2) | 5)) ^ ((data[i] <<< 2) ^ 6)) + ((data[i] & 3) | 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 5) <<< ((in_data + 2) - 8)) | 2);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 7) ^ (in_data >>> 6)) + (in_data & 8)) <<< 2);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );
endmodule",,"`define WIDTH 256
`define DEPTH 50

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data + 5) <<< ((in_data + 2) - 8)) | 2);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 | 7) & (data_0 - 2)) + ((data_0 | 3) & 8));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 | 7) & (data_1 - 2)) + ((data_1 | 3) & 8));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 | 7) & (data_2 - 2)) + ((data_2 | 3) & 8));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 | 7) & (data_3 - 2)) + ((data_3 | 3) & 8));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 | 7) & (data_4 - 2)) + ((data_4 | 3) & 8));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 | 7) & (data_5 - 2)) + ((data_5 | 3) & 8));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 | 7) & (data_6 - 2)) + ((data_6 | 3) & 8));
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 | 7) & (data_7 - 2)) + ((data_7 | 3) & 8));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 | 7) & (data_8 - 2)) + ((data_8 | 3) & 8));
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 | 7) & (data_9 - 2)) + ((data_9 | 3) & 8));
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 | 7) & (data_10 - 2)) + ((data_10 | 3) & 8));
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 | 7) & (data_11 - 2)) + ((data_11 | 3) & 8));
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 | 7) & (data_12 - 2)) + ((data_12 | 3) & 8));
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 | 7) & (data_13 - 2)) + ((data_13 | 3) & 8));
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((data_14 | 7) & (data_14 - 2)) + ((data_14 | 3) & 8));
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((data_15 | 7) & (data_15 - 2)) + ((data_15 | 3) & 8));
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((data_16 >>> 8) + 3) - 7);
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((data_17 ^ 10) >>> 4) - (data_17 & 3));
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 <<< 2) & 3);
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 <<< 2) & 3);
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((data_20 <<< 2) & 3);
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((data_21 <<< 2) & 3);
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 <<< 2) & 3);
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 >>> 1) & ((data_23 ^ 3) <<< 5));
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((data_24 <<< 2) - ((data_24 - 3) <<< 2));
    wire [WIDTH-1:0] data_26;
    assign data_26 = (((((data_25 <<< 5) >>> (data_25 <<< 3)) + ((data_25 - 2) | 5)) ^ ((data_25 <<< 2) ^ 6)) + ((data_25 & 3) | 5));
    wire [WIDTH-1:0] data_27;
    assign data_27 = (((((data_26 <<< 5) >>> (data_26 <<< 3)) + ((data_26 - 2) | 5)) ^ ((data_26 <<< 2) ^ 6)) + ((data_26 & 3) | 5));
    wire [WIDTH-1:0] data_28;
    assign data_28 = (((((data_27 <<< 5) >>> (data_27 <<< 3)) + ((data_27 - 2) | 5)) ^ ((data_27 <<< 2) ^ 6)) + ((data_27 & 3) | 5));
    wire [WIDTH-1:0] data_29;
    assign data_29 = (((((data_28 <<< 5) >>> (data_28 <<< 3)) + ((data_28 - 2) | 5)) ^ ((data_28 <<< 2) ^ 6)) + ((data_28 & 3) | 5));
    wire [WIDTH-1:0] data_30;
    assign data_30 = (((((data_29 <<< 5) >>> (data_29 <<< 3)) + ((data_29 - 2) | 5)) ^ ((data_29 <<< 2) ^ 6)) + ((data_29 & 3) | 5));
    wire [WIDTH-1:0] data_31;
    assign data_31 = (((((data_30 <<< 5) >>> (data_30 <<< 3)) + ((data_30 - 2) | 5)) ^ ((data_30 <<< 2) ^ 6)) + ((data_30 & 3) | 5));
    wire [WIDTH-1:0] data_32;
    assign data_32 = (((((data_31 <<< 5) >>> (data_31 <<< 3)) + ((data_31 - 2) | 5)) ^ ((data_31 <<< 2) ^ 6)) + ((data_31 & 3) | 5));
    wire [WIDTH-1:0] data_33;
    assign data_33 = (((((data_32 <<< 5) >>> (data_32 <<< 3)) + ((data_32 - 2) | 5)) ^ ((data_32 <<< 2) ^ 6)) + ((data_32 & 3) | 5));
    wire [WIDTH-1:0] data_34;
    assign data_34 = (((((data_33 <<< 5) >>> (data_33 <<< 3)) + ((data_33 - 2) | 5)) ^ ((data_33 <<< 2) ^ 6)) + ((data_33 & 3) | 5));
    wire [WIDTH-1:0] data_35;
    assign data_35 = (((((data_34 <<< 5) >>> (data_34 <<< 3)) + ((data_34 - 2) | 5)) ^ ((data_34 <<< 2) ^ 6)) + ((data_34 & 3) | 5));
    wire [WIDTH-1:0] data_36;
    assign data_36 = (((((data_35 <<< 5) >>> (data_35 <<< 3)) + ((data_35 - 2) | 5)) ^ ((data_35 <<< 2) ^ 6)) + ((data_35 & 3) | 5));
    wire [WIDTH-1:0] data_37;
    assign data_37 = (((((data_36 <<< 5) >>> (data_36 <<< 3)) + ((data_36 - 2) | 5)) ^ ((data_36 <<< 2) ^ 6)) + ((data_36 & 3) | 5));
    wire [WIDTH-1:0] data_38;
    assign data_38 = (((((data_37 <<< 5) >>> (data_37 <<< 3)) + ((data_37 - 2) | 5)) ^ ((data_37 <<< 2) ^ 6)) + ((data_37 & 3) | 5));
    wire [WIDTH-1:0] data_39;
    assign data_39 = (((((data_38 <<< 5) >>> (data_38 <<< 3)) + ((data_38 - 2) | 5)) ^ ((data_38 <<< 2) ^ 6)) + ((data_38 & 3) | 5));
    wire [WIDTH-1:0] data_40;
    assign data_40 = (((((data_39 <<< 5) >>> (data_39 <<< 3)) + ((data_39 - 2) | 5)) ^ ((data_39 <<< 2) ^ 6)) + ((data_39 & 3) | 5));
    wire [WIDTH-1:0] data_41;
    assign data_41 = (((((data_40 <<< 5) >>> (data_40 <<< 3)) + ((data_40 - 2) | 5)) ^ ((data_40 <<< 2) ^ 6)) + ((data_40 & 3) | 5));
    wire [WIDTH-1:0] data_42;
    assign data_42 = (((((data_41 <<< 5) >>> (data_41 <<< 3)) + ((data_41 - 2) | 5)) ^ ((data_41 <<< 2) ^ 6)) + ((data_41 & 3) | 5));
    wire [WIDTH-1:0] data_43;
    assign data_43 = (((((data_42 <<< 5) >>> (data_42 <<< 3)) + ((data_42 - 2) | 5)) ^ ((data_42 <<< 2) ^ 6)) + ((data_42 & 3) | 5));
    wire [WIDTH-1:0] data_44;
    assign data_44 = (((((data_43 <<< 5) >>> (data_43 <<< 3)) + ((data_43 - 2) | 5)) ^ ((data_43 <<< 2) ^ 6)) + ((data_43 & 3) | 5));
    wire [WIDTH-1:0] data_45;
    assign data_45 = (((((data_44 <<< 5) >>> (data_44 <<< 3)) + ((data_44 - 2) | 5)) ^ ((data_44 <<< 2) ^ 6)) + ((data_44 & 3) | 5));
    wire [WIDTH-1:0] data_46;
    assign data_46 = (((((data_45 <<< 5) >>> (data_45 <<< 3)) + ((data_45 - 2) | 5)) ^ ((data_45 <<< 2) ^ 6)) + ((data_45 & 3) | 5));
    wire [WIDTH-1:0] data_47;
    assign data_47 = (((((data_46 <<< 5) >>> (data_46 <<< 3)) + ((data_46 - 2) | 5)) ^ ((data_46 <<< 2) ^ 6)) + ((data_46 & 3) | 5));
    wire [WIDTH-1:0] data_48;
    assign data_48 = (((data_47 & 3) | 2) - ((((data_47 <<< 10) ^ 5) & (data_47 & 4)) ^ 9));
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((((data_48 >>> 7) ^ (data_48 >>> 6)) + (data_48 & 8)) <<< 2);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_49, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_256-d_100-1,"`define WIDTH 256
`define DEPTH 100

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 18;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= data[i];
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 4) - ((in_data >>> 3) & 9));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 10) & 7) - 6);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 30;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 10) <<< (data[i] & 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 9) <<< (in_data + 7));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 6) & 9);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 8;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 1) & (data[i] ^ 3)) - 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 2) - 2) + 8);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 37;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 8) >>> (data[i] | 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 8) ^ (in_data + 3)) | ((in_data <<< 5) + 4));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 1) & ((in_data <<< 3) <<< 8));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[82]),
        .in_vld(ready[82]),
        .out_data(data[100]), 
        .out_vld(ready[100])
    );
endmodule",,"`define WIDTH 256
`define DEPTH 100

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data >>> 8) >>> (in_data | 8));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 >>> 8) >>> (data_0 | 8));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 >>> 8) >>> (data_1 | 8));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 >>> 8) >>> (data_2 | 8));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 >>> 8) >>> (data_3 | 8));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 >>> 8) >>> (data_4 | 8));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 >>> 8) >>> (data_5 | 8));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 >>> 8) >>> (data_6 | 8));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 >>> 8) >>> (data_7 | 8));
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 >>> 8) >>> (data_8 | 8));
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 >>> 8) >>> (data_9 | 8));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 >>> 8) >>> (data_10 | 8));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 >>> 8) >>> (data_11 | 8));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 >>> 8) >>> (data_12 | 8));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 >>> 8) >>> (data_13 | 8));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 >>> 8) >>> (data_14 | 8));
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 >>> 8) >>> (data_15 | 8));
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((data_16 >>> 8) >>> (data_16 | 8));
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((data_17 >>> 8) >>> (data_17 | 8));
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 >>> 8) >>> (data_18 | 8));
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 >>> 8) >>> (data_19 | 8));
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((data_20 >>> 8) >>> (data_20 | 8));
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((data_21 >>> 8) >>> (data_21 | 8));
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 >>> 8) >>> (data_22 | 8));
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 >>> 8) >>> (data_23 | 8));
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((data_24 >>> 8) >>> (data_24 | 8));
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((data_25 >>> 8) >>> (data_25 | 8));
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((data_26 >>> 8) >>> (data_26 | 8));
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((data_27 >>> 8) >>> (data_27 | 8));
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((data_28 >>> 8) >>> (data_28 | 8));
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((data_29 >>> 8) >>> (data_29 | 8));
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((data_30 >>> 8) >>> (data_30 | 8));
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((data_31 >>> 8) >>> (data_31 | 8));
    wire [WIDTH-1:0] data_33;
    assign data_33 = ((data_32 >>> 8) >>> (data_32 | 8));
    wire [WIDTH-1:0] data_34;
    assign data_34 = ((data_33 >>> 8) >>> (data_33 | 8));
    wire [WIDTH-1:0] data_35;
    assign data_35 = ((data_34 >>> 8) >>> (data_34 | 8));
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((data_35 >>> 8) >>> (data_35 | 8));
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((data_36 ^ 6) & 9);
    wire [WIDTH-1:0] data_38;
    assign data_38 = ((data_37 <<< 1) & ((data_37 <<< 3) <<< 8));
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((data_38 ^ 4) - ((data_38 >>> 3) & 9));
    wire [WIDTH-1:0] data_40;
    assign data_40 = (((data_39 + 2) - 2) + 8);
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((data_40 - 10) <<< (data_40 & 6));
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((data_41 - 10) <<< (data_41 & 6));
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 - 10) <<< (data_42 & 6));
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((data_43 - 10) <<< (data_43 & 6));
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((data_44 - 10) <<< (data_44 & 6));
    wire [WIDTH-1:0] data_46;
    assign data_46 = ((data_45 - 10) <<< (data_45 & 6));
    wire [WIDTH-1:0] data_47;
    assign data_47 = ((data_46 - 10) <<< (data_46 & 6));
    wire [WIDTH-1:0] data_48;
    assign data_48 = ((data_47 - 10) <<< (data_47 & 6));
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((data_48 - 10) <<< (data_48 & 6));
    wire [WIDTH-1:0] data_50;
    assign data_50 = ((data_49 - 10) <<< (data_49 & 6));
    wire [WIDTH-1:0] data_51;
    assign data_51 = ((data_50 - 10) <<< (data_50 & 6));
    wire [WIDTH-1:0] data_52;
    assign data_52 = ((data_51 - 10) <<< (data_51 & 6));
    wire [WIDTH-1:0] data_53;
    assign data_53 = ((data_52 - 10) <<< (data_52 & 6));
    wire [WIDTH-1:0] data_54;
    assign data_54 = ((data_53 - 10) <<< (data_53 & 6));
    wire [WIDTH-1:0] data_55;
    assign data_55 = ((data_54 - 10) <<< (data_54 & 6));
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((data_55 - 10) <<< (data_55 & 6));
    wire [WIDTH-1:0] data_57;
    assign data_57 = ((data_56 - 10) <<< (data_56 & 6));
    wire [WIDTH-1:0] data_58;
    assign data_58 = ((data_57 - 10) <<< (data_57 & 6));
    wire [WIDTH-1:0] data_59;
    assign data_59 = ((data_58 - 10) <<< (data_58 & 6));
    wire [WIDTH-1:0] data_60;
    assign data_60 = ((data_59 - 10) <<< (data_59 & 6));
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((data_60 - 10) <<< (data_60 & 6));
    wire [WIDTH-1:0] data_62;
    assign data_62 = ((data_61 - 10) <<< (data_61 & 6));
    wire [WIDTH-1:0] data_63;
    assign data_63 = ((data_62 - 10) <<< (data_62 & 6));
    wire [WIDTH-1:0] data_64;
    assign data_64 = ((data_63 - 10) <<< (data_63 & 6));
    wire [WIDTH-1:0] data_65;
    assign data_65 = ((data_64 - 10) <<< (data_64 & 6));
    wire [WIDTH-1:0] data_66;
    assign data_66 = ((data_65 - 10) <<< (data_65 & 6));
    wire [WIDTH-1:0] data_67;
    assign data_67 = ((data_66 - 10) <<< (data_66 & 6));
    wire [WIDTH-1:0] data_68;
    assign data_68 = ((data_67 - 10) <<< (data_67 & 6));
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((data_68 - 10) <<< (data_68 & 6));
    wire [WIDTH-1:0] data_70;
    assign data_70 = ((data_69 - 10) <<< (data_69 & 6));
    wire [WIDTH-1:0] data_71;
    assign data_71 = (((data_70 ^ 8) ^ (data_70 + 3)) | ((data_70 <<< 5) + 4));
    wire [WIDTH-1:0] data_72;
    assign data_72 = ((data_71 & 9) <<< (data_71 + 7));
    wire [WIDTH-1:0] data_73;
    assign data_73 = (((data_72 | 10) & 7) - 6);
    wire [WIDTH-1:0] data_74;
    assign data_74 = (((data_73 | 1) & (data_73 ^ 3)) - 7);
    wire [WIDTH-1:0] data_75;
    assign data_75 = (((data_74 | 1) & (data_74 ^ 3)) - 7);
    wire [WIDTH-1:0] data_76;
    assign data_76 = (((data_75 | 1) & (data_75 ^ 3)) - 7);
    wire [WIDTH-1:0] data_77;
    assign data_77 = (((data_76 | 1) & (data_76 ^ 3)) - 7);
    wire [WIDTH-1:0] data_78;
    assign data_78 = (((data_77 | 1) & (data_77 ^ 3)) - 7);
    wire [WIDTH-1:0] data_79;
    assign data_79 = (((data_78 | 1) & (data_78 ^ 3)) - 7);
    wire [WIDTH-1:0] data_80;
    assign data_80 = (((data_79 | 1) & (data_79 ^ 3)) - 7);
    wire [WIDTH-1:0] data_81;
    assign data_81 = (((data_80 | 1) & (data_80 ^ 3)) - 7);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_81, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
