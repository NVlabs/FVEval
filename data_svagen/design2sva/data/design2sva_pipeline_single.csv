design_name,task_id,prompt,ref_solution,testbench
pipeline_single,ns_2-w_128-opd_2-0,"`define WIDTH 128
`define DEPTH 4

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 8) ^ (data[i] - 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 2) ^ 10) - 2);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 4

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data & 8) ^ (in_data - 9));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 & 8) ^ (data_0 - 9));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 & 8) ^ (data_1 - 9));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 <<< 2) ^ 10) - 2);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_3, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_2-1,"`define WIDTH 128
`define DEPTH 2

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 1) + 2) ^ (in_data >>> 6));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 8) & 10);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data ^ 8) & 10);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 >>> 1) + 2) ^ (data_0 >>> 6));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_1, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_2-2,"`define WIDTH 128
`define DEPTH 2

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 10) >>> ((in_data - 5) + 10));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) + (in_data & 2)) - 3);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data | 2) + (in_data & 2)) - 3);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 ^ 10) >>> ((data_0 - 5) + 10));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_1, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_2-3,"`define WIDTH 128
`define DEPTH 2

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 1) | (in_data + 4)) <<< (in_data - 6));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 9) - (in_data >>> 9)) | ((in_data ^ 7) >>> (in_data | 8)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data >>> 9) - (in_data >>> 9)) | ((in_data ^ 7) >>> (in_data | 8)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 - 1) | (data_0 + 4)) <<< (data_0 - 6));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_1, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_2-4,"`define WIDTH 128
`define DEPTH 5

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 10) <<< 1) - 3);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 2) >>> ((data[i] | 2) <<< (data[i] + 1)));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 5

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data ^ 2) >>> ((in_data | 2) <<< (in_data + 1)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 ^ 2) >>> ((data_0 | 2) <<< (data_0 + 1)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 ^ 2) >>> ((data_1 | 2) <<< (data_1 + 1)));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 ^ 2) >>> ((data_2 | 2) <<< (data_2 + 1)));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 | 10) <<< 1) - 3);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_4, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_2-5,"`define WIDTH 128
`define DEPTH 2

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) - 4) <<< (in_data & 9));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 10) & (in_data | 4));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data + 10) & (in_data | 4));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 <<< 3) - 4) <<< (data_0 & 9));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_1, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_3-0,"`define WIDTH 128
`define DEPTH 2

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 5) ^ ((in_data <<< 1) <<< 1));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 10) ^ ((in_data + 1) & (in_data <<< 6))) - 4);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data | 5) ^ ((in_data <<< 1) <<< 1));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 <<< 10) ^ ((data_0 + 1) & (data_0 <<< 6))) - 4);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_1, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_3-1,"`define WIDTH 128
`define DEPTH 5

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 7) >>> (((data[i] + 4) + 7) <<< 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 8) ^ (in_data <<< 3)) >>> ((in_data + 8) | 9));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 5

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data - 8) ^ (in_data <<< 3)) >>> ((in_data + 8) | 9));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 >>> 7) >>> (((data_0 + 4) + 7) <<< 2));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 >>> 7) >>> (((data_1 + 4) + 7) <<< 2));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 >>> 7) >>> (((data_2 + 4) + 7) <<< 2));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 >>> 7) >>> (((data_3 + 4) + 7) <<< 2));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_4, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_3-2,"`define WIDTH 128
`define DEPTH 2

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 8) ^ (in_data | 7)) - (in_data ^ 3)) - 5);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 1) + 8) - ((in_data ^ 6) | 2));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data + 1) + 8) - ((in_data ^ 6) | 2));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 ^ 8) ^ (data_0 | 7)) - (data_0 ^ 3)) - 5);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_1, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_3-3,"`define WIDTH 128
`define DEPTH 2

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 1) & 6);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 9) - 3);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data ^ 1) & 6);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 | 9) - 3);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_1, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_3-4,"`define WIDTH 128
`define DEPTH 3

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 6) >>> 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 6) + 2);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 3

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data >>> 6) >>> 9);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 >>> 6) >>> 9);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 & 6) + 2);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_2, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_3-5,"`define WIDTH 128
`define DEPTH 2

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 2) <<< ((in_data + 2) + 4));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 2) & 10) ^ 4) ^ 5);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data | 2) <<< ((in_data + 2) + 4));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 & 2) & 10) ^ 4) ^ 5);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_1, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_4-0,"`define WIDTH 128
`define DEPTH 3

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 9) | ((in_data >>> 4) & (in_data - 1))) >>> (((in_data | 10) - 5) <<< 6));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 7) >>> 4) | 5);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 3

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data | 7) >>> 4) | 5);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 | 7) >>> 4) | 5);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 | 9) | ((data_1 >>> 4) & (data_1 - 1))) >>> (((data_1 | 10) - 5) <<< 6));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_2, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_4-1,"`define WIDTH 128
`define DEPTH 6

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 9) - ((data[i] <<< 7) + (data[i] - 5))) >>> 8) + 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 5) >>> 1) >>> 7) ^ 7);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 6

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data ^ 9) - ((in_data <<< 7) + (in_data - 5))) >>> 8) + 4);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 ^ 9) - ((data_0 <<< 7) + (data_0 - 5))) >>> 8) + 4);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 ^ 9) - ((data_1 <<< 7) + (data_1 - 5))) >>> 8) + 4);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 ^ 9) - ((data_2 <<< 7) + (data_2 - 5))) >>> 8) + 4);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 - 5) >>> 1) >>> 7) ^ 7);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 - 5) >>> 1) >>> 7) ^ 7);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_5, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_4-2,"`define WIDTH 128
`define DEPTH 4

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 3) >>> 7);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 7) <<< 2) | (data[i] | 7)) <<< 6);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 4

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data - 3) >>> 7);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 & 7) <<< 2) | (data_0 | 7)) <<< 6);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 & 7) <<< 2) | (data_1 | 7)) <<< 6);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 & 7) <<< 2) | (data_2 | 7)) <<< 6);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_3, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_4-3,"`define WIDTH 128
`define DEPTH 3

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 6) ^ 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 2) & 3) <<< (in_data >>> 4)) <<< (in_data | 8)) >>> 8);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 3

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data ^ 6) ^ 3);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 ^ 6) ^ 3);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((((data_1 & 2) & 3) <<< (data_1 >>> 4)) <<< (data_1 | 8)) >>> 8);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_2, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_4-4,"`define WIDTH 128
`define DEPTH 2

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 2) + 9) ^ 10) + ((in_data | 2) ^ ((in_data | 7) >>> 3)));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 5) + ((in_data & 3) + 2));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data & 2) + 9) ^ 10) + ((in_data | 2) ^ ((in_data | 7) >>> 3)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 <<< 5) + ((data_0 & 3) + 2));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_1, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_4-5,"`define WIDTH 128
`define DEPTH 3

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 2) | (data[i] - 7)) - 4) - 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 8) ^ 4) + (in_data & 3)) + (((in_data + 2) & 9) - (in_data & 3)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 3

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data + 8) ^ 4) + (in_data & 3)) + (((in_data + 2) & 9) - (in_data & 3)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 | 2) | (data_0 - 7)) - 4) - 3);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 | 2) | (data_1 - 7)) - 4) - 3);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_2, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_5-0,"`define WIDTH 128
`define DEPTH 2

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 8) | 3) <<< 3) - ((((in_data & 2) >>> 8) + 8) ^ ((in_data <<< 8) <<< 5)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 9) & ((in_data & 8) | (in_data & 8)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data <<< 9) & ((in_data & 8) | (in_data & 8)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 - 8) | 3) <<< 3) - ((((data_0 & 2) >>> 8) + 8) ^ ((data_0 <<< 8) <<< 5)));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_1, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_5-1,"`define WIDTH 128
`define DEPTH 2

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 10) & (in_data + 5)) ^ (in_data & 2)) + (in_data - 3)) <<< (((in_data <<< 9) ^ 4) >>> 5));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 3) >>> 5);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((((in_data - 10) & (in_data + 5)) ^ (in_data & 2)) + (in_data - 3)) <<< (((in_data <<< 9) ^ 4) >>> 5));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 <<< 3) >>> 5);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_1, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_5-2,"`define WIDTH 128
`define DEPTH 2

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 10) >>> 5) + (((in_data | 3) - (in_data <<< 3)) + 7));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 4) & 3) & 8) | (((in_data <<< 7) ^ 2) | 7)) ^ 5);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((((in_data ^ 4) & 3) & 8) | (((in_data <<< 7) ^ 2) | 7)) ^ 5);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 >>> 10) >>> 5) + (((data_0 | 3) - (data_0 <<< 3)) + 7));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_1, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_5-3,"`define WIDTH 128
`define DEPTH 4

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 8) >>> ((in_data ^ 7) <<< ((in_data & 1) | 5))) & (in_data - 6));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] <<< 3) <<< 2) <<< 1) - 4) | 7);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 4

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((((in_data <<< 3) <<< 2) <<< 1) - 4) | 7);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((((data_0 <<< 3) <<< 2) <<< 1) - 4) | 7);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((((data_1 <<< 3) <<< 2) <<< 1) - 4) | 7);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 | 8) >>> ((data_2 ^ 7) <<< ((data_2 & 1) | 5))) & (data_2 - 6));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_3, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_5-4,"`define WIDTH 128
`define DEPTH 2

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 9) | 6) & 5) >>> (((in_data + 2) >>> 7) | 8));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 6) | 4) - ((in_data - 6) | (in_data >>> 9)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data + 6) | 4) - ((in_data - 6) | (in_data >>> 9)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 & 9) | 6) & 5) >>> (((data_0 + 2) >>> 7) | 8));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_1, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_2-w_128-opd_5-5,"`define WIDTH 128
`define DEPTH 4

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 5) & 8) & 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 7) ^ (((in_data | 2) >>> 5) - 4));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 4

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data >>> 7) ^ (((in_data | 2) >>> 5) - 4));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 <<< 5) & 8) & 10);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 <<< 5) & 8) & 10);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 <<< 5) & 8) & 10);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_3, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_2-0,"`define WIDTH 128
`define DEPTH 10

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 10) & ((data[i] ^ 1) >>> 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 8) + ((in_data | 8) + 4));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 8) + (data[i] <<< 4)) | ((data[i] ^ 3) - 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 10) + 7) + ((in_data >>> 4) <<< 9));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 1) <<< (data[i] & 4)) <<< (data[i] | 4));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 10

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data <<< 10) + 7) + ((in_data >>> 4) <<< 9));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 & 10) & ((data_0 ^ 1) >>> 1));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 & 10) & ((data_1 ^ 1) >>> 1));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 >>> 8) + (data_2 <<< 4)) | ((data_2 ^ 3) - 4));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 >>> 8) + (data_3 <<< 4)) | ((data_3 ^ 3) - 4));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 & 8) + ((data_4 | 8) + 4));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 | 1) <<< (data_5 & 4)) <<< (data_5 | 4));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 | 1) <<< (data_6 & 4)) <<< (data_6 | 4));
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 | 1) <<< (data_7 & 4)) <<< (data_7 | 4));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 | 1) <<< (data_8 & 4)) <<< (data_8 | 4));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_9, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_2-1,"`define WIDTH 128
`define DEPTH 5

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) <<< 6);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 10) ^ 3) + ((in_data + 5) <<< (in_data <<< 7)));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) - (in_data & 9)) - 8);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 8) + 8);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 3) + 7) <<< ((in_data + 6) <<< (in_data >>> 3)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 5

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data <<< 7) <<< 6);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 | 7) - (data_0 & 9)) - 8);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 ^ 3) + 7) <<< ((data_1 + 6) <<< (data_1 >>> 3)));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 >>> 10) ^ 3) + ((data_2 + 5) <<< (data_2 <<< 7)));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 - 8) + 8);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_4, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_2-2,"`define WIDTH 128
`define DEPTH 5

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 10) ^ 7) <<< ((in_data | 5) - (in_data - 2)));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 4) & (in_data ^ 6)) + (in_data >>> 5));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 8) ^ (in_data + 7));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 9) - 2) | 5);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 3) - (in_data - 6)) ^ ((in_data - 6) >>> 1));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 5

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data + 8) ^ (in_data + 7));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 <<< 4) & (data_0 ^ 6)) + (data_0 >>> 5));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 & 3) - (data_1 - 6)) ^ ((data_1 - 6) >>> 1));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 - 10) ^ 7) <<< ((data_2 | 5) - (data_2 - 2)));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 + 9) - 2) | 5);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_4, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_2-3,"`define WIDTH 128
`define DEPTH 8

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 4) ^ 4) | 1);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 10) - 1) & 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 4) <<< (in_data >>> 7));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 10) & (in_data & 1));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) ^ 2) | 4);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 8

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data <<< 10) - 1) & 4);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 <<< 10) - 1) & 4);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 <<< 10) - 1) & 4);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 <<< 10) - 1) & 4);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 - 4) ^ 4) | 1);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 ^ 4) <<< (data_4 >>> 7));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 + 7) ^ 2) | 4);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 & 10) & (data_6 & 1));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_7, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_2-4,"`define WIDTH 128
`define DEPTH 5

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 8) & (in_data + 10)) & 6);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 1) >>> (in_data >>> 6));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 3) - (in_data | 1)) - 5);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) <<< 7) ^ (in_data - 5));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 1) + (in_data >>> 1));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 5

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data - 1) >>> (in_data >>> 6));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 | 1) + (data_0 >>> 1));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 - 3) - (data_1 | 1)) - 5);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 ^ 2) <<< 7) ^ (data_2 - 5));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 - 8) & (data_3 + 10)) & 6);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_4, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_2-5,"`define WIDTH 128
`define DEPTH 8

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 8) & (in_data >>> 1)) | (in_data | 5));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 6) - 7);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 10) | (in_data <<< 3)) + 6);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 10) & 1) ^ ((data[i] >>> 2) | (data[i] + 3)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 8) ^ (in_data + 8)) >>> 2);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 8

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data | 10) & 1) ^ ((in_data >>> 2) | (in_data + 3)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 | 10) & 1) ^ ((data_0 >>> 2) | (data_0 + 3)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 | 10) & 1) ^ ((data_1 >>> 2) | (data_1 + 3)));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 | 10) & 1) ^ ((data_2 >>> 2) | (data_2 + 3)));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 + 10) | (data_3 <<< 3)) + 6);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 ^ 8) ^ (data_4 + 8)) >>> 2);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 + 6) - 7);
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 <<< 8) & (data_6 >>> 1)) | (data_6 | 5));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_7, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_3-0,"`define WIDTH 128
`define DEPTH 6

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 1) ^ ((data[i] & 9) ^ (data[i] | 2))) + 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 6) ^ 8) & 9) | 10);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 1) - (in_data <<< 7)) ^ (in_data - 5));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 4) | 4) ^ 6);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 1) | 6) - ((in_data - 3) ^ (in_data >>> 6)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 6

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data & 1) - (in_data <<< 7)) ^ (in_data - 5));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 ^ 1) | 6) - ((data_0 - 3) ^ (data_0 >>> 6)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 | 1) ^ ((data_1 & 9) ^ (data_1 | 2))) + 1);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 | 1) ^ ((data_2 & 9) ^ (data_2 | 2))) + 1);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 | 4) | 4) ^ 6);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 ^ 6) ^ 8) & 9) | 10);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_5, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_3-1,"`define WIDTH 128
`define DEPTH 7

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 6) >>> 5) - 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 5) & (in_data ^ 6));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 6) <<< 4);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) <<< 1);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 3) <<< (in_data - 3)) | 10);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 7

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data & 6) >>> 5) - 6);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 & 6) >>> 5) - 6);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 & 6) >>> 5) - 6);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 - 5) & (data_2 ^ 6));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 <<< 7) <<< 1);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 ^ 6) <<< 4);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 ^ 3) <<< (data_5 - 3)) | 10);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_6, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_3-2,"`define WIDTH 128
`define DEPTH 11

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 2) + (data[i] + 2)) - (data[i] >>> 8)) ^ (((data[i] - 9) <<< 8) <<< ((data[i] >>> 3) + 9)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) - 9) | 2);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 9) & (((in_data <<< 3) & (in_data ^ 10)) | 6));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 7) ^ 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 10) ^ 3);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 11

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data <<< 9) & (((in_data <<< 3) & (in_data ^ 10)) | 6));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 | 2) + (data_0 + 2)) - (data_0 >>> 8)) ^ (((data_0 - 9) <<< 8) <<< ((data_0 >>> 3) + 9)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 | 2) + (data_1 + 2)) - (data_1 >>> 8)) ^ (((data_1 - 9) <<< 8) <<< ((data_1 >>> 3) + 9)));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 | 2) + (data_2 + 2)) - (data_2 >>> 8)) ^ (((data_2 - 9) <<< 8) <<< ((data_2 >>> 3) + 9)));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 <<< 7) ^ 7);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 <<< 7) ^ 7);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 <<< 7) ^ 7);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 | 10) ^ 3);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 | 10) ^ 3);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 | 10) ^ 3);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 ^ 2) - 9) | 2);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_10, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_3-3,"`define WIDTH 128
`define DEPTH 8

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 6) & 9) ^ 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) >>> 3) >>> ((in_data | 9) >>> ((in_data - 4) >>> (in_data & 5))));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 8) | (in_data + 5));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 2) | (data[i] ^ 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 6) & 4) & 7);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 8

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data & 8) | (in_data + 5));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 + 7) >>> 3) >>> ((data_0 | 9) >>> ((data_0 - 4) >>> (data_0 & 5))));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 & 2) | (data_1 ^ 7));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 & 2) | (data_2 ^ 7));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 >>> 6) & 4) & 7);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 <<< 6) & 9) ^ 3);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 <<< 6) & 9) ^ 3);
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 <<< 6) & 9) ^ 3);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_7, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_3-4,"`define WIDTH 128
`define DEPTH 6

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 8) ^ (in_data ^ 9)) | 1) | 8);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 7) - (in_data - 6));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 10) | (data[i] | 9)) & ((data[i] | 6) - 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 10) + 7) - (((in_data + 9) + (in_data - 4)) - 2));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 6) ^ (in_data ^ 9)) + (in_data + 8));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 6

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data ^ 10) | (in_data | 9)) & ((in_data | 6) - 6));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 ^ 10) | (data_0 | 9)) & ((data_0 | 6) - 6));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 + 7) - (data_1 - 6));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 >>> 10) + 7) - (((data_2 + 9) + (data_2 - 4)) - 2));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 <<< 8) ^ (data_3 ^ 9)) | 1) | 8);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 <<< 6) ^ (data_4 ^ 9)) + (data_4 + 8));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_5, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_3-5,"`define WIDTH 128
`define DEPTH 6

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 4) >>> 3) - (((in_data ^ 4) >>> (in_data - 9)) - (in_data <<< 10)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 8) | (in_data - 5)) & 8);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 6) - 10) - (data[i] - 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 2) >>> 9) | 10) - 4);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 4) | 5) - ((in_data <<< 6) ^ 6)) - (in_data | 2));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 6

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data >>> 8) | (in_data - 5)) & 8);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 ^ 2) >>> 9) | 10) - 4);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 <<< 4) >>> 3) - (((data_1 ^ 4) >>> (data_1 - 9)) - (data_1 <<< 10)));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 ^ 6) - 10) - (data_2 - 1));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 ^ 6) - 10) - (data_3 - 1));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 <<< 4) | 5) - ((data_4 <<< 6) ^ 6)) - (data_4 | 2));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_5, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_4-0,"`define WIDTH 128
`define DEPTH 11

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 1) & 4) >>> ((in_data ^ 8) <<< 10)) & 2);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 1) + (in_data ^ 6)) ^ ((in_data >>> 1) <<< 1)) - (in_data ^ 6));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 10) ^ (in_data + 10)) - 6) | 1) & 9);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 4) + 9) + 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 4) - 3) | (((data[i] >>> 9) & 10) & 5));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 11

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data >>> 1) + (in_data ^ 6)) ^ ((in_data >>> 1) <<< 1)) - (in_data ^ 6));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 + 1) & 4) >>> ((data_0 ^ 8) <<< 10)) & 2);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 | 4) - 3) | (((data_1 >>> 9) & 10) & 5));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 | 4) - 3) | (((data_2 >>> 9) & 10) & 5));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 | 4) - 3) | (((data_3 >>> 9) & 10) & 5));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 | 4) - 3) | (((data_4 >>> 9) & 10) & 5));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((((data_5 & 10) ^ (data_5 + 10)) - 6) | 1) & 9);
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 - 4) + 9) + 9);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 - 4) + 9) + 9);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 - 4) + 9) + 9);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 - 4) + 9) + 9);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_10, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_4-1,"`define WIDTH 128
`define DEPTH 7

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 9) ^ ((in_data ^ 4) ^ 1));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 8) + (in_data - 2)) & 9);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 8) + 6) >>> (((data[i] & 4) + ((data[i] & 9) - 5)) | (((data[i] >>> 10) - 4) - (data[i] <<< 4))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 1) <<< (((in_data | 2) & 4) + 5));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 6) ^ (((data[i] >>> 6) + 1) - 7));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 7

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data & 1) <<< (((in_data | 2) & 4) + 5));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 | 6) ^ (((data_0 >>> 6) + 1) - 7));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 | 6) ^ (((data_1 >>> 6) + 1) - 7));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 >>> 9) ^ ((data_2 ^ 4) ^ 1));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 - 8) + (data_3 - 2)) & 9);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 - 8) + 6) >>> (((data_4 & 4) + ((data_4 & 9) - 5)) | (((data_4 >>> 10) - 4) - (data_4 <<< 4))));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 - 8) + 6) >>> (((data_5 & 4) + ((data_5 & 9) - 5)) | (((data_5 >>> 10) - 4) - (data_5 <<< 4))));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_6, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_4-2,"`define WIDTH 128
`define DEPTH 5

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 7) + (((in_data - 4) & 2) & (in_data >>> 1))) >>> (in_data + 8));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 1) >>> 4) ^ (in_data <<< 3)) - (in_data | 5)) - 7);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 1) - 6) >>> 4) + (((in_data + 10) >>> ((in_data ^ 5) + 1)) - 5));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 5) & 6) & 1) <<< ((in_data & 8) | 4));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 10) & ((in_data >>> 4) ^ (in_data - 5))) >>> (((in_data & 5) ^ (in_data | 9)) ^ ((in_data + 1) <<< 4)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 5

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data <<< 7) + (((in_data - 4) & 2) & (in_data >>> 1))) >>> (in_data + 8));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 <<< 5) & 6) & 1) <<< ((data_0 & 8) | 4));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 | 10) & ((data_1 >>> 4) ^ (data_1 - 5))) >>> (((data_1 & 5) ^ (data_1 | 9)) ^ ((data_1 + 1) <<< 4)));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 <<< 1) - 6) >>> 4) + (((data_2 + 10) >>> ((data_2 ^ 5) + 1)) - 5));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((((data_3 ^ 1) >>> 4) ^ (data_3 <<< 3)) - (data_3 | 5)) - 7);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_4, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_4-3,"`define WIDTH 128
`define DEPTH 8

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 9) - 9) | (((data[i] + 10) - 4) >>> 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 2) >>> ((in_data + 7) ^ (in_data | 1)));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 5) >>> (in_data - 9)) & (in_data + 6));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 4) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 2) - (in_data + 3)) ^ 7) >>> ((in_data >>> 7) | 5));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 8

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data <<< 2) - (in_data + 3)) ^ 7) >>> ((in_data >>> 7) | 5));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 ^ 2) >>> ((data_0 + 7) ^ (data_0 | 1)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 ^ 4) >>> 3);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 ^ 4) >>> 3);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 ^ 4) >>> 3);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 | 9) - 9) | (((data_4 + 10) - 4) >>> 8));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 | 9) - 9) | (((data_5 + 10) - 4) >>> 8));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 + 5) >>> (data_6 - 9)) & (data_6 + 6));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_7, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_4-4,"`define WIDTH 128
`define DEPTH 5

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 2) - (in_data + 7)) ^ ((in_data & 8) + (in_data >>> 6))) | ((((in_data ^ 2) & 6) ^ ((in_data + 9) & 7)) ^ 8));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 7) ^ 5);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 8) | ((in_data | 9) & (in_data - 7))) - 6) + (((in_data <<< 3) <<< (in_data & 10)) <<< ((in_data - 9) | (in_data - 6))));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 4) ^ 4) | (in_data & 9)) ^ (((in_data ^ 8) - 4) >>> 7));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 5) & 10) ^ 6) - 4);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 5

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data - 2) - (in_data + 7)) ^ ((in_data & 8) + (in_data >>> 6))) | ((((in_data ^ 2) & 6) ^ ((in_data + 9) & 7)) ^ 8));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 <<< 8) | ((data_0 | 9) & (data_0 - 7))) - 6) + (((data_0 <<< 3) <<< (data_0 & 10)) <<< ((data_0 - 9) | (data_0 - 6))));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 - 5) & 10) ^ 6) - 4);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 | 4) ^ 4) | (data_2 & 9)) ^ (((data_2 ^ 8) - 4) >>> 7));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 & 7) ^ 5);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_4, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_4-5,"`define WIDTH 128
`define DEPTH 11

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 4) & (data[i] | 2)) <<< 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 4) >>> 10) + (in_data <<< 1)) | ((in_data - 3) - (in_data <<< 8)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 1) >>> (data[i] + 5)) + (((data[i] - 5) ^ ((data[i] - 5) - 10)) ^ (((data[i] - 4) + (data[i] + 6)) & 3)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 3) >>> (data[i] <<< 9)) + 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 9) >>> 7) & 7) >>> 3);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 11

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data - 1) >>> (in_data + 5)) + (((in_data - 5) ^ ((in_data - 5) - 10)) ^ (((in_data - 4) + (in_data + 6)) & 3)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 - 1) >>> (data_0 + 5)) + (((data_0 - 5) ^ ((data_0 - 5) - 10)) ^ (((data_0 - 4) + (data_0 + 6)) & 3)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 - 1) >>> (data_1 + 5)) + (((data_1 - 5) ^ ((data_1 - 5) - 10)) ^ (((data_1 - 4) + (data_1 + 6)) & 3)));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 - 4) >>> 10) + (data_2 <<< 1)) | ((data_2 - 3) - (data_2 <<< 8)));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 & 4) & (data_3 | 2)) <<< 5);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 & 4) & (data_4 | 2)) <<< 5);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 | 3) >>> (data_5 <<< 9)) + 10);
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 | 3) >>> (data_6 <<< 9)) + 10);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 | 3) >>> (data_7 <<< 9)) + 10);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 | 3) >>> (data_8 <<< 9)) + 10);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((((data_9 - 9) >>> 7) & 7) >>> 3);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_10, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_5-0,"`define WIDTH 128
`define DEPTH 6

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) - (in_data - 8)) <<< ((in_data | 6) <<< ((in_data + 3) - (in_data >>> 9))));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 9) + 10) <<< 3);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) <<< 5) & ((((in_data ^ 6) >>> 6) - 1) ^ 2));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 10) | 4) + 6) - 1);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] <<< 8) ^ (data[i] ^ 1)) ^ ((data[i] - 8) >>> 4)) >>> ((data[i] | 8) <<< 4)) - 4);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 6

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data >>> 9) + 10) <<< 3);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((((data_0 <<< 8) ^ (data_0 ^ 1)) ^ ((data_0 - 8) >>> 4)) >>> ((data_0 | 8) <<< 4)) - 4);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((((data_1 <<< 8) ^ (data_1 ^ 1)) ^ ((data_1 - 8) >>> 4)) >>> ((data_1 | 8) <<< 4)) - 4);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 + 8) <<< 5) & ((((data_2 ^ 6) >>> 6) - 1) ^ 2));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 | 7) - (data_3 - 8)) <<< ((data_3 | 6) <<< ((data_3 + 3) - (data_3 >>> 9))));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 <<< 10) | 4) + 6) - 1);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_5, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_5-1,"`define WIDTH 128
`define DEPTH 8

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 10) <<< (in_data & 9));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data | 5) >>> 7) - 3) | ((in_data - 1) - ((in_data & 10) & 2))) >>> ((in_data <<< 2) - ((((in_data | 3) ^ (in_data >>> 9)) & 7) >>> (in_data | 8))));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) & 4) & 7);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 4) - (data[i] | 5)) + ((data[i] & 3) <<< 5)) ^ (data[i] | 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 2) >>> 10) ^ ((in_data + 2) | (in_data | 1))) <<< 4);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 8

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data & 2) >>> 10) ^ ((in_data + 2) | (in_data | 1))) <<< 4);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 <<< 3) & 4) & 7);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 | 4) - (data_1 | 5)) + ((data_1 & 3) <<< 5)) ^ (data_1 | 8));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 | 4) - (data_2 | 5)) + ((data_2 & 3) <<< 5)) ^ (data_2 | 8));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 | 4) - (data_3 | 5)) + ((data_3 & 3) <<< 5)) ^ (data_3 | 8));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 | 4) - (data_4 | 5)) + ((data_4 & 3) <<< 5)) ^ (data_4 | 8));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((((data_5 | 5) >>> 7) - 3) | ((data_5 - 1) - ((data_5 & 10) & 2))) >>> ((data_5 <<< 2) - ((((data_5 | 3) ^ (data_5 >>> 9)) & 7) >>> (data_5 | 8))));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 & 10) <<< (data_6 & 9));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_7, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_5-2,"`define WIDTH 128
`define DEPTH 6

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 9) >>> (in_data + 2)) | 3);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] >>> 2) ^ 5) >>> 5) & 4) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 6) - ((in_data ^ 4) <<< (in_data ^ 6))) <<< ((in_data & 6) >>> ((in_data & 1) - ((in_data + 8) ^ 5))));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 1) | (in_data & 7)) ^ 7) - (in_data ^ 5));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 6) | (in_data ^ 4)) <<< 10) >>> 3);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 6

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((((in_data >>> 2) ^ 5) >>> 5) & 4) | 7);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((((data_0 >>> 2) ^ 5) >>> 5) & 4) | 7);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 + 9) >>> (data_1 + 2)) | 3);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 >>> 6) - ((data_2 ^ 4) <<< (data_2 ^ 6))) <<< ((data_2 & 6) >>> ((data_2 & 1) - ((data_2 + 8) ^ 5))));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 | 6) | (data_3 ^ 4)) <<< 10) >>> 3);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 & 1) | (data_4 & 7)) ^ 7) - (data_4 ^ 5));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_5, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_5-3,"`define WIDTH 128
`define DEPTH 8

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 8) | ((in_data <<< 5) + ((in_data | 2) + 10))) ^ 7);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) <<< 5) <<< ((in_data + 1) >>> 2));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) | 10) | ((((in_data + 10) + 4) + 7) >>> 10));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 10) - (data[i] <<< 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) | 2) + ((in_data <<< 2) + (((in_data - 9) <<< (in_data >>> 6)) + 8)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 8

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data ^ 6) | 10) | ((((in_data + 10) + 4) + 7) >>> 10));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 - 10) - (data_0 <<< 3));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 - 10) - (data_1 <<< 3));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 - 10) - (data_2 <<< 3));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 - 10) - (data_3 <<< 3));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 - 8) | ((data_4 <<< 5) + ((data_4 | 2) + 10))) ^ 7);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 + 7) <<< 5) <<< ((data_5 + 1) >>> 2));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 <<< 9) | 2) + ((data_6 <<< 2) + (((data_6 - 9) <<< (data_6 >>> 6)) + 8)));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_7, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_5-4,"`define WIDTH 128
`define DEPTH 12

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 6) >>> (data[i] + 3)) ^ 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 10) <<< (data[i] <<< 3)) <<< 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] <<< 2) - 6) & ((data[i] <<< 2) | 3)) + (data[i] <<< 4)) <<< 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 6) | (in_data >>> 1)) + ((in_data <<< 7) - 8)) | ((in_data >>> 7) + 4)) + 10);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 7) | ((in_data - 5) >>> ((in_data + 5) & (in_data >>> 3)))) | (((in_data & 1) - 10) >>> 9));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 12

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data ^ 6) >>> (in_data + 3)) ^ 2);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 ^ 6) >>> (data_0 + 3)) ^ 2);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 ^ 6) >>> (data_1 + 3)) ^ 2);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 ^ 6) >>> (data_2 + 3)) ^ 2);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((((data_3 <<< 2) - 6) & ((data_3 <<< 2) | 3)) + (data_3 <<< 4)) <<< 4);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((((data_4 <<< 2) - 6) & ((data_4 <<< 2) | 3)) + (data_4 <<< 4)) <<< 4);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((((data_5 <<< 2) - 6) & ((data_5 <<< 2) | 3)) + (data_5 <<< 4)) <<< 4);
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((((data_6 <<< 2) - 6) & ((data_6 <<< 2) | 3)) + (data_6 <<< 4)) <<< 4);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 - 7) | ((data_7 - 5) >>> ((data_7 + 5) & (data_7 >>> 3)))) | (((data_7 & 1) - 10) >>> 9));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((((data_8 & 6) | (data_8 >>> 1)) + ((data_8 <<< 7) - 8)) | ((data_8 >>> 7) + 4)) + 10);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 - 10) <<< (data_9 <<< 3)) <<< 7);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 - 10) <<< (data_10 <<< 3)) <<< 7);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_11, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_5-w_128-opd_5-5,"`define WIDTH 128
`define DEPTH 7

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 6) ^ 10) >>> 4) - (data[i] & 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 5) >>> ((in_data >>> 8) - 8));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) | 5) | 7);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 3) | ((in_data + 8) - 2)) >>> (in_data ^ 9)) <<< ((in_data + 5) <<< ((((in_data >>> 1) <<< 5) + 2) - 8)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 9) <<< (((in_data | 9) | 7) >>> 5)) ^ 9) ^ (((in_data | 2) >>> 1) <<< (((in_data - 8) | (in_data >>> 5)) - 10)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 7

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data | 9) <<< (((in_data | 9) | 7) >>> 5)) ^ 9) ^ (((in_data | 2) >>> 1) <<< (((in_data - 8) | (in_data >>> 5)) - 10)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 & 3) | ((data_0 + 8) - 2)) >>> (data_0 ^ 9)) <<< ((data_0 + 5) <<< ((((data_0 >>> 1) <<< 5) + 2) - 8)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 | 7) | 5) | 7);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 - 5) >>> ((data_2 >>> 8) - 8));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 + 6) ^ 10) >>> 4) - (data_3 & 2));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 + 6) ^ 10) >>> 4) - (data_4 & 2));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((((data_5 + 6) ^ 10) >>> 4) - (data_5 & 2));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_6, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_2-0,"`define WIDTH 128
`define DEPTH 15

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) + (in_data ^ 10)) <<< 3);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 2) - (in_data - 2));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 4) ^ 10);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) | 5);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) ^ 9) | ((in_data - 9) & (in_data >>> 1)));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 5) + 3) | ((data[i] <<< 3) >>> (data[i] & 7)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 3) ^ 9) <<< 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 9) | (data[i] & 5)) - 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 2) | 5) & ((in_data <<< 2) ^ 6));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 9) >>> 5);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 15

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data ^ 2) + (in_data ^ 10)) <<< 3);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 - 9) >>> 5);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 - 2) | 5) & ((data_1 <<< 2) ^ 6));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 & 3) | 5);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 | 2) - (data_3 - 2));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 | 9) | (data_4 & 5)) - 4);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 | 9) | (data_5 & 5)) - 4);
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 | 9) | (data_6 & 5)) - 4);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 | 3) ^ 9) <<< 10);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 | 3) ^ 9) <<< 10);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 | 6) ^ 9) | ((data_9 - 9) & (data_9 >>> 1)));
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 & 5) + 3) | ((data_10 <<< 3) >>> (data_10 & 7)));
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 & 5) + 3) | ((data_11 <<< 3) >>> (data_11 & 7)));
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 & 5) + 3) | ((data_12 <<< 3) >>> (data_12 & 7)));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 | 4) ^ 10);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_14, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_2-1,"`define WIDTH 128
`define DEPTH 20

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 5) + 4);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 9) - 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 8) ^ (in_data + 3)) + 7);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 1) & (data[i] ^ 3)) - 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 3) <<< 3) <<< 8);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 3) <<< (data[i] - 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 9) <<< (in_data + 7));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 10) & 7) - 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 9) - 7) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 7) <<< (in_data & 8)) <<< 9);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 20

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data - 3) <<< 3) <<< 8);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 >>> 9) - 2);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 >>> 9) - 2);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 >>> 9) - 2);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 >>> 9) - 2);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 + 9) - 7) >>> 3);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 + 9) - 7) >>> 3);
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 + 9) - 7) >>> 3);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 ^ 3) <<< (data_7 - 6));
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 ^ 3) <<< (data_8 - 6));
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 ^ 3) <<< (data_9 - 6));
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 ^ 8) ^ (data_10 + 3)) + 7);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 <<< 5) + 4);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 & 9) <<< (data_12 + 7));
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 | 10) & 7) - 6);
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((data_14 | 10) & 7) - 6);
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((data_15 | 10) & 7) - 6);
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((data_16 | 1) & (data_16 ^ 3)) - 7);
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((data_17 | 1) & (data_17 ^ 3)) - 7);
    wire [WIDTH-1:0] data_19;
    assign data_19 = (((data_18 >>> 7) <<< (data_18 & 8)) <<< 9);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_19, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_2-2,"`define WIDTH 128
`define DEPTH 23

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 6) <<< (data[i] ^ 6)) <<< ((data[i] >>> 2) - 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 5) ^ (data[i] + 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 1) | (data[i] ^ 8)) + 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 9) | ((data[i] >>> 2) & (data[i] >>> 3)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 2) ^ 3) | 3);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) ^ 4) + 10);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) >>> (in_data >>> 9)) <<< 1);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 2) <<< (data[i] + 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 5) <<< ((data[i] + 5) & (data[i] | 4)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 6) & 6);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 23

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data >>> 2) <<< (in_data + 4));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 >>> 2) <<< (data_0 + 4));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 >>> 2) <<< (data_1 + 4));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 & 5) <<< ((data_2 + 5) & (data_2 | 4)));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 & 5) <<< ((data_3 + 5) & (data_3 | 4)));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 & 5) <<< ((data_4 + 5) & (data_4 | 4)));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 & 5) <<< ((data_5 + 5) & (data_5 | 4)));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 >>> 6) <<< (data_6 ^ 6)) <<< ((data_6 >>> 2) - 3));
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 >>> 6) <<< (data_7 ^ 6)) <<< ((data_7 >>> 2) - 3));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 >>> 2) ^ 3) | 3);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 - 9) | ((data_9 >>> 2) & (data_9 >>> 3)));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 - 9) | ((data_10 >>> 2) & (data_10 >>> 3)));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 - 9) | ((data_11 >>> 2) & (data_11 >>> 3)));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 - 9) | ((data_12 >>> 2) & (data_12 >>> 3)));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 >>> 5) ^ (data_13 + 8));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 >>> 5) ^ (data_14 + 8));
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 >>> 5) ^ (data_15 + 8));
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((data_16 >>> 5) ^ (data_16 + 8));
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((data_17 ^ 2) >>> (data_17 >>> 9)) <<< 1);
    wire [WIDTH-1:0] data_19;
    assign data_19 = (((data_18 | 6) ^ 4) + 10);
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 - 6) & 6);
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((data_20 & 1) | (data_20 ^ 8)) + 10);
    wire [WIDTH-1:0] data_22;
    assign data_22 = (((data_21 & 1) | (data_21 ^ 8)) + 10);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_22, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_2-3,"`define WIDTH 128
`define DEPTH 13

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 4) - 9) >>> ((in_data >>> 3) & (in_data <<< 6)));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 1) ^ (in_data ^ 4)) | 4);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 7) ^ (in_data ^ 1)) >>> 4);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) - 10) & (in_data >>> 8));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 2) | (in_data - 5));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 9) ^ (in_data <<< 9)) <<< (in_data - 2));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 5) ^ (in_data >>> 5));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 4) & 2);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 4) >>> (data[i] - 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 1) ^ (data[i] & 3)) + ((data[i] | 1) - 8));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 13

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data ^ 4) >>> (in_data - 2));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 ^ 4) >>> (data_0 - 2));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 | 2) - 10) & (data_1 >>> 8));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 & 1) ^ (data_2 ^ 4)) | 4);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 ^ 2) | (data_3 - 5));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 & 1) ^ (data_4 & 3)) + ((data_4 | 1) - 8));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 & 1) ^ (data_5 & 3)) + ((data_5 | 1) - 8));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 & 1) ^ (data_6 & 3)) + ((data_6 | 1) - 8));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 <<< 5) ^ (data_7 >>> 5));
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 & 4) & 2);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 & 7) ^ (data_9 ^ 1)) >>> 4);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 + 9) ^ (data_10 <<< 9)) <<< (data_10 - 2));
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 | 4) - 9) >>> ((data_11 >>> 3) & (data_11 <<< 6)));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_12, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_2-4,"`define WIDTH 128
`define DEPTH 22

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 2) >>> ((in_data & 10) + 4));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 1) | 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) | 5) ^ ((in_data - 1) >>> 2));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 1) <<< (in_data <<< 4)) <<< (in_data + 3));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 8) + 9) + (in_data <<< 8));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 7) & ((data[i] ^ 1) | 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 8) | 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 3) + 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 9) + 9) >>> ((data[i] - 6) >>> (data[i] <<< 1)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 7) & 4) ^ (in_data <<< 5));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 22

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data | 9) + 9) >>> ((in_data - 6) >>> (in_data <<< 1)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 | 9) + 9) >>> ((data_0 - 6) >>> (data_0 <<< 1)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 <<< 8) + 9) + (data_1 <<< 8));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 ^ 6) | 5) ^ ((data_2 - 1) >>> 2));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 | 1) | 5);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 | 1) | 5);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 | 1) | 5);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 | 1) | 5);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 & 7) & ((data_7 ^ 1) | 10));
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 & 7) & ((data_8 ^ 1) | 10));
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 & 7) & ((data_9 ^ 1) | 10));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 & 7) & ((data_10 ^ 1) | 10));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 >>> 3) + 6);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 >>> 3) + 6);
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 >>> 3) + 6);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 >>> 3) + 6);
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((data_15 - 7) & 4) ^ (data_15 <<< 5));
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((data_16 - 8) | 5);
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((data_17 - 8) | 5);
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 - 8) | 5);
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 + 2) >>> ((data_19 & 10) + 4));
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((data_20 >>> 1) <<< (data_20 <<< 4)) <<< (data_20 + 3));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_21, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_2-5,"`define WIDTH 128
`define DEPTH 12

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 8) <<< 1);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 10) | 1) | 6);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 10) + ((in_data | 3) ^ 5));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 9) <<< 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 8) <<< (in_data + 2)) | 5);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 5) + (in_data <<< 2));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 1) & (in_data >>> 6)) | (in_data + 9));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 8) & 4);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 6) - 9);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 9) & 10);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 12

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data <<< 9) & 10);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 <<< 1) & (data_0 >>> 6)) | (data_0 + 9));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 & 8) <<< 1);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 >>> 9) <<< 1);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 >>> 9) <<< 1);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 >>> 9) <<< 1);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 | 8) & 4);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 >>> 5) + (data_6 <<< 2));
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 | 8) <<< (data_7 + 2)) | 5);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 >>> 6) - 9);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 & 10) | 1) | 6);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 >>> 10) + ((data_10 | 3) ^ 5));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_11, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_3-0,"`define WIDTH 128
`define DEPTH 14

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 10) >>> ((in_data - 2) + (in_data ^ 3)));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) & 2) + (in_data - 5));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 8) + 10);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 6) - (in_data - 7)) ^ 8);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 8) <<< 4) | (((data[i] >>> 10) & 10) ^ ((data[i] | 7) ^ 8)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) ^ (in_data ^ 9)) ^ 5);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 6) >>> ((data[i] - 4) <<< 6)) | 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 4) | 6);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) | (in_data - 2)) & ((in_data <<< 4) + 9));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 1) + (((in_data + 7) + 10) + 6));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 14

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data | 6) | (in_data - 2)) & ((in_data <<< 4) + 9));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 >>> 6) - (data_0 - 7)) ^ 8);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 & 10) >>> ((data_1 - 2) + (data_1 ^ 3)));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 >>> 1) + (((data_2 + 7) + 10) + 6));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 ^ 2) ^ (data_3 ^ 9)) ^ 5);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 & 8) + 10);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 & 6) >>> ((data_5 - 4) <<< 6)) | 6);
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 & 6) >>> ((data_6 - 4) <<< 6)) | 6);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 & 6) >>> ((data_7 - 4) <<< 6)) | 6);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 + 8) <<< 4) | (((data_8 >>> 10) & 10) ^ ((data_8 | 7) ^ 8)));
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 + 8) <<< 4) | (((data_9 >>> 10) & 10) ^ ((data_9 | 7) ^ 8)));
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 + 8) <<< 4) | (((data_10 >>> 10) & 10) ^ ((data_10 | 7) ^ 8)));
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 ^ 7) & 2) + (data_11 - 5));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 >>> 4) | 6);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_13, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_3-1,"`define WIDTH 128
`define DEPTH 19

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 3) | 3);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 3) >>> ((in_data & 6) - (in_data >>> 10)));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 3) <<< ((in_data + 9) >>> ((in_data >>> 10) <<< 4)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 8) <<< (data[i] <<< 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 5) + 3) >>> 10) - 5);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 10) <<< (((data[i] & 2) | 2) + 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 2) + 4);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 7) + (data[i] <<< 2)) - 6) <<< (data[i] & 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) <<< (in_data & 7)) >>> (in_data & 3));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 1) ^ (data[i] <<< 7)) | ((data[i] - 2) >>> (data[i] <<< 2))) & 10);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 19

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data & 8) <<< (in_data <<< 10));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 & 8) <<< (data_0 <<< 10));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 & 8) <<< (data_1 <<< 10));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 + 7) <<< (data_2 & 7)) >>> (data_2 & 3));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 & 5) + 3) >>> 10) - 5);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 ^ 1) ^ (data_4 <<< 7)) | ((data_4 - 2) >>> (data_4 <<< 2))) & 10);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((((data_5 ^ 1) ^ (data_5 <<< 7)) | ((data_5 - 2) >>> (data_5 <<< 2))) & 10);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((((data_6 ^ 1) ^ (data_6 <<< 7)) | ((data_6 - 2) >>> (data_6 <<< 2))) & 10);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((((data_7 ^ 1) ^ (data_7 <<< 7)) | ((data_7 - 2) >>> (data_7 <<< 2))) & 10);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 <<< 3) >>> ((data_8 & 6) - (data_8 >>> 10)));
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((((data_9 - 7) + (data_9 <<< 2)) - 6) <<< (data_9 & 2));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((((data_10 - 7) + (data_10 <<< 2)) - 6) <<< (data_10 & 2));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((((data_11 - 7) + (data_11 <<< 2)) - 6) <<< (data_11 & 2));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((((data_12 - 7) + (data_12 <<< 2)) - 6) <<< (data_12 & 2));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 <<< 3) <<< ((data_13 + 9) >>> ((data_13 >>> 10) <<< 4)));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 | 10) <<< (((data_14 & 2) | 2) + 10));
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 | 10) <<< (((data_15 & 2) | 2) + 10));
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((data_16 ^ 2) + 4);
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((data_17 - 3) | 3);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_18, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_3-2,"`define WIDTH 128
`define DEPTH 13

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 7) - ((data[i] <<< 7) >>> ((data[i] & 7) | 10)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 2) >>> 4) >>> 7);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 1) + (in_data ^ 5)) >>> (((in_data & 1) | 5) <<< 1));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 1) <<< (in_data - 1)) | (in_data >>> 1)) & ((in_data & 8) & 7));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 6) - 10) ^ 10);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 4) ^ 3);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 9) <<< ((in_data & 5) + (in_data ^ 7)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 10) + 4) - ((in_data - 7) & (in_data ^ 6)));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 9) + (in_data ^ 10)) <<< (in_data & 2));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 7) ^ (in_data <<< 8)) ^ 5) + 3);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 13

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data >>> 10) + 4) - ((in_data - 7) & (in_data ^ 6)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 + 1) + (data_0 ^ 5)) >>> (((data_0 & 1) | 5) <<< 1));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 >>> 9) + (data_1 ^ 10)) <<< (data_1 & 2));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 - 7) ^ (data_2 <<< 8)) ^ 5) + 3);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 | 7) - ((data_3 <<< 7) >>> ((data_3 & 7) | 10)));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 | 7) - ((data_4 <<< 7) >>> ((data_4 & 7) | 10)));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 | 7) - ((data_5 <<< 7) >>> ((data_5 & 7) | 10)));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 | 7) - ((data_6 <<< 7) >>> ((data_6 & 7) | 10)));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 & 9) <<< ((data_7 & 5) + (data_7 ^ 7)));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 - 2) >>> 4) >>> 7);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 | 4) ^ 3);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((((data_10 & 1) <<< (data_10 - 1)) | (data_10 >>> 1)) & ((data_10 & 8) & 7));
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 >>> 6) - 10) ^ 10);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_12, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_3-3,"`define WIDTH 128
`define DEPTH 20

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 6) <<< (data[i] & 3)) <<< 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 10) <<< ((in_data <<< 9) <<< 1));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 10) >>> 6) - ((in_data + 8) ^ ((in_data | 4) >>> 2)));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 10) - 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 9) | (in_data ^ 4)) & ((in_data - 10) <<< 9));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 3) + ((data[i] + 1) ^ 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 7) ^ (((data[i] <<< 1) ^ 3) >>> (data[i] >>> 7)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 9) ^ 9);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) >>> ((in_data >>> 2) + 10)) <<< 6);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 7) + 8) >>> (data[i] + 9)) <<< ((data[i] >>> 4) - (data[i] ^ 10)));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 20

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data >>> 9) | (in_data ^ 4)) & ((in_data - 10) <<< 9));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 & 7) + 8) >>> (data_0 + 9)) <<< ((data_0 >>> 4) - (data_0 ^ 10)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 & 7) + 8) >>> (data_1 + 9)) <<< ((data_1 >>> 4) - (data_1 ^ 10)));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 & 7) + 8) >>> (data_2 + 9)) <<< ((data_2 >>> 4) - (data_2 ^ 10)));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 & 7) + 8) >>> (data_3 + 9)) <<< ((data_3 >>> 4) - (data_3 ^ 10)));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 <<< 10) >>> 6) - ((data_4 + 8) ^ ((data_4 | 4) >>> 2)));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 + 7) >>> ((data_5 >>> 2) + 10)) <<< 6);
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 + 6) <<< (data_6 & 3)) <<< 8);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 + 6) <<< (data_7 & 3)) <<< 8);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 + 6) <<< (data_8 & 3)) <<< 8);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 + 6) <<< (data_9 & 3)) <<< 8);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 >>> 10) <<< ((data_10 <<< 9) <<< 1));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 & 9) ^ 9);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 | 3) + ((data_12 + 1) ^ 5));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 | 3) + ((data_13 + 1) ^ 5));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 & 7) ^ (((data_14 <<< 1) ^ 3) >>> (data_14 >>> 7)));
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 & 7) ^ (((data_15 <<< 1) ^ 3) >>> (data_15 >>> 7)));
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((data_16 & 7) ^ (((data_16 <<< 1) ^ 3) >>> (data_16 >>> 7)));
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((data_17 ^ 10) - 9);
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 ^ 10) - 9);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_19, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_3-4,"`define WIDTH 128
`define DEPTH 14

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 10) <<< 8) | 6) & (in_data - 9));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 9) - (in_data - 3)) <<< 10) <<< 2);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 1) ^ (in_data & 9));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 2) | 5) + ((in_data >>> 4) + (in_data <<< 10))) <<< ((in_data ^ 4) ^ (in_data & 2)));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 4) + 5) + 3);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 8) - 9);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 8) <<< ((in_data | 10) & 8));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 5) ^ (data[i] >>> 7)) + (((data[i] + 7) - (data[i] - 2)) | 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 4) ^ 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 10) <<< 6) ^ 8);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 14

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data | 4) ^ 1);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 | 4) ^ 1);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 | 4) ^ 1);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 | 9) - (data_2 - 3)) <<< 10) <<< 2);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 ^ 10) <<< 6) ^ 8);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 | 1) ^ (data_4 & 9));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 <<< 8) <<< ((data_5 | 10) & 8));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((((data_6 <<< 10) <<< 8) | 6) & (data_6 - 9));
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 | 5) ^ (data_7 >>> 7)) + (((data_7 + 7) - (data_7 - 2)) | 1));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 | 5) ^ (data_8 >>> 7)) + (((data_8 + 7) - (data_8 - 2)) | 1));
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 | 5) ^ (data_9 >>> 7)) + (((data_9 + 7) - (data_9 - 2)) | 1));
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 - 4) + 5) + 3);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 | 8) - 9);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((((data_12 >>> 2) | 5) + ((data_12 >>> 4) + (data_12 <<< 10))) <<< ((data_12 ^ 4) ^ (data_12 & 2)));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_13, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_3-5,"`define WIDTH 128
`define DEPTH 16

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 10) | 6);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 7) ^ ((data[i] | 9) & (data[i] | 4)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 6) + (in_data & 4)) <<< ((in_data & 4) & (in_data + 7))) >>> (in_data - 4));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 6) <<< (in_data & 6)) >>> ((in_data & 1) | (in_data & 4))) >>> 2);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 6) - (in_data + 2)) <<< (((in_data - 8) <<< 2) <<< (in_data & 10)));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 1) - 2) + 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 10) >>> 9);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 7) - (in_data <<< 6)) >>> 5);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 4) - (data[i] + 5)) + 8) | ((data[i] - 7) >>> 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 3) + 10) >>> (data[i] | 6));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 16

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data & 6) <<< (in_data & 6)) >>> ((in_data & 1) | (in_data & 4))) >>> 2);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 - 10) | 6);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 >>> 7) ^ ((data_1 | 9) & (data_1 | 4)));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 >>> 7) ^ ((data_2 | 9) & (data_2 | 4)));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 + 6) + (data_3 & 4)) <<< ((data_3 & 4) & (data_3 + 7))) >>> (data_3 - 4));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 - 3) + 10) >>> (data_4 | 6));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 - 3) + 10) >>> (data_5 | 6));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 - 7) - (data_6 <<< 6)) >>> 5);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 ^ 1) - 2) + 3);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 ^ 1) - 2) + 3);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 ^ 1) - 2) + 3);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 ^ 1) - 2) + 3);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((((data_11 ^ 4) - (data_11 + 5)) + 8) | ((data_11 - 7) >>> 1));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((((data_12 ^ 4) - (data_12 + 5)) + 8) | ((data_12 - 7) >>> 1));
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 <<< 6) - (data_13 + 2)) <<< (((data_13 - 8) <<< 2) <<< (data_13 & 10)));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 - 10) >>> 9);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_15, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_4-0,"`define WIDTH 128
`define DEPTH 16

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 7) - 10) & ((in_data & 2) + 4));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 9) | (data[i] & 10)) + (((data[i] & 1) | 7) & 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 1) + (in_data + 8)) >>> 3) - ((((in_data ^ 3) <<< 6) & 9) | ((in_data >>> 5) ^ ((in_data + 5) <<< 3))));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 3) - 4) <<< (data[i] ^ 2)) - (((data[i] & 5) ^ (data[i] >>> 6)) >>> 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 1) >>> (in_data >>> 8)) | 3) <<< 5);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 7) + ((data[i] | 6) >>> 7)) >>> 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 4) & 9) | 4) + (in_data ^ 7));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) - ((in_data - 2) ^ 2)) <<< (in_data & 7));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 10) <<< 10) <<< 3) + 5);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 6) >>> 5) - (in_data >>> 7)) <<< 4);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 16

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data <<< 3) - ((in_data - 2) ^ 2)) <<< (in_data & 7));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 & 7) + ((data_0 | 6) >>> 7)) >>> 7);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 & 7) + ((data_1 | 6) >>> 7)) >>> 7);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 & 7) + ((data_2 | 6) >>> 7)) >>> 7);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 <<< 7) - 10) & ((data_3 & 2) + 4));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 >>> 3) - 4) <<< (data_4 ^ 2)) - (((data_4 & 5) ^ (data_4 >>> 6)) >>> 8));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((((data_5 >>> 3) - 4) <<< (data_5 ^ 2)) - (((data_5 & 5) ^ (data_5 >>> 6)) >>> 8));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((((data_6 | 1) >>> (data_6 >>> 8)) | 3) <<< 5);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 >>> 9) | (data_7 & 10)) + (((data_7 & 1) | 7) & 8));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 >>> 9) | (data_8 & 10)) + (((data_8 & 1) | 7) & 8));
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 >>> 9) | (data_9 & 10)) + (((data_9 & 1) | 7) & 8));
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 >>> 9) | (data_10 & 10)) + (((data_10 & 1) | 7) & 8));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((((data_11 ^ 4) & 9) | 4) + (data_11 ^ 7));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((((data_12 & 10) <<< 10) <<< 3) + 5);
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((((data_13 ^ 6) >>> 5) - (data_13 >>> 7)) <<< 4);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((((data_14 - 1) + (data_14 + 8)) >>> 3) - ((((data_14 ^ 3) <<< 6) & 9) | ((data_14 >>> 5) ^ ((data_14 + 5) <<< 3))));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_15, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_4-1,"`define WIDTH 128
`define DEPTH 12

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 10) >>> (in_data - 8)) <<< 6) | (in_data & 4));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 6) <<< ((in_data - 9) <<< 1));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 3) >>> (in_data | 4)) + 10) <<< (((in_data | 10) & 10) & 9));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 10) - 4) >>> 1) - (in_data + 2));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] - 6) & (data[i] - 8)) | (data[i] <<< 4)) + 1) + 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 3) + 2) + ((in_data - 8) + (in_data + 4))) - 1);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 10) <<< 10);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 3) ^ (in_data + 9)) <<< 5) + (((in_data ^ 10) >>> 7) & ((in_data & 1) + (in_data | 2))));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 8) ^ 6);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 1) >>> ((in_data | 7) & 2));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 12

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data | 6) <<< ((in_data - 9) <<< 1));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 <<< 3) ^ (data_0 + 9)) <<< 5) + (((data_0 ^ 10) >>> 7) & ((data_0 & 1) + (data_0 | 2))));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 <<< 3) >>> (data_1 | 4)) + 10) <<< (((data_1 | 10) & 10) & 9));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 - 8) ^ 6);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 + 3) + 2) + ((data_3 - 8) + (data_3 + 4))) - 1);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((((data_4 - 6) & (data_4 - 8)) | (data_4 <<< 4)) + 1) + 9);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((((data_5 - 6) & (data_5 - 8)) | (data_5 <<< 4)) + 1) + 9);
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((((data_6 - 6) & (data_6 - 8)) | (data_6 <<< 4)) + 1) + 9);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 + 10) <<< 10);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 | 1) >>> ((data_8 | 7) & 2));
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((((data_9 ^ 10) >>> (data_9 - 8)) <<< 6) | (data_9 & 4));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((((data_10 + 10) - 4) >>> 1) - (data_10 + 2));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_11, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_4-2,"`define WIDTH 128
`define DEPTH 24

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 5) - 4);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 2) & 1) <<< ((data[i] - 2) + (((data[i] ^ 1) >>> (data[i] <<< 6)) & (data[i] >>> 10))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 7) ^ ((in_data - 10) ^ 8)) >>> 4) <<< (((in_data & 9) + 4) ^ 2));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 9) <<< ((in_data | 1) >>> 4)) | (in_data ^ 8)) >>> 6);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 6) & 8) | 3) & (data[i] - 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 3) >>> (data[i] | 10)) >>> 5) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 8) + ((data[i] <<< 1) | 3)) | 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 7) & 6) | 5) ^ ((((data[i] + 1) + 7) ^ 4) + ((data[i] - 10) <<< 8)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 3) ^ 7) & (data[i] + 8)) & 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 10) & (data[i] <<< 5)) >>> 2) & ((data[i] + 2) >>> 5));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 24

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data - 3) >>> (in_data | 10)) >>> 5) >>> 3);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 - 3) >>> (data_0 | 10)) >>> 5) >>> 3);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 - 3) >>> (data_1 | 10)) >>> 5) >>> 3);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 - 3) >>> (data_2 | 10)) >>> 5) >>> 3);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 <<< 9) <<< ((data_3 | 1) >>> 4)) | (data_3 ^ 8)) >>> 6);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 ^ 3) ^ 7) & (data_4 + 8)) & 4);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((((data_5 ^ 3) ^ 7) & (data_5 + 8)) & 4);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((((data_6 ^ 3) ^ 7) & (data_6 + 8)) & 4);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((((data_7 ^ 3) ^ 7) & (data_7 + 8)) & 4);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 <<< 2) & 1) <<< ((data_8 - 2) + (((data_8 ^ 1) >>> (data_8 <<< 6)) & (data_8 >>> 10))));
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 <<< 2) & 1) <<< ((data_9 - 2) + (((data_9 ^ 1) >>> (data_9 <<< 6)) & (data_9 >>> 10))));
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 <<< 2) & 1) <<< ((data_10 - 2) + (((data_10 ^ 1) >>> (data_10 <<< 6)) & (data_10 >>> 10))));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((((data_11 - 7) & 6) | 5) ^ ((((data_11 + 1) + 7) ^ 4) + ((data_11 - 10) <<< 8)));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((((data_12 - 7) & 6) | 5) ^ ((((data_12 + 1) + 7) ^ 4) + ((data_12 - 10) <<< 8)));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((((data_13 >>> 10) & (data_13 <<< 5)) >>> 2) & ((data_13 + 2) >>> 5));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((((data_14 >>> 10) & (data_14 <<< 5)) >>> 2) & ((data_14 + 2) >>> 5));
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((((data_15 >>> 10) & (data_15 <<< 5)) >>> 2) & ((data_15 + 2) >>> 5));
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((((data_16 >>> 10) & (data_16 <<< 5)) >>> 2) & ((data_16 + 2) >>> 5));
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((((data_17 >>> 7) ^ ((data_17 - 10) ^ 8)) >>> 4) <<< (((data_17 & 9) + 4) ^ 2));
    wire [WIDTH-1:0] data_19;
    assign data_19 = (((data_18 >>> 8) + ((data_18 <<< 1) | 3)) | 5);
    wire [WIDTH-1:0] data_20;
    assign data_20 = (((data_19 >>> 8) + ((data_19 <<< 1) | 3)) | 5);
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((data_20 + 5) - 4);
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((((data_21 <<< 6) & 8) | 3) & (data_21 - 5));
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((((data_22 <<< 6) & 8) | 3) & (data_22 - 5));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_23, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_4-3,"`define WIDTH 128
`define DEPTH 17

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 6) & 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 6) <<< 7) ^ 4) >>> 2);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 5) - (in_data - 7)) | 8);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 4) + 3);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 6) & (data[i] - 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 10) & ((in_data >>> 6) >>> (in_data | 8)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 3) + (((in_data - 3) >>> (in_data + 8)) ^ 1));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 7) + 5) ^ 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 1) ^ (data[i] ^ 3)) | 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 4) | (((in_data >>> 10) >>> (in_data >>> 5)) ^ 8));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 17

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data >>> 3) + (((in_data - 3) >>> (in_data + 8)) ^ 1));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 <<< 6) & (data_0 - 4));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 <<< 6) & (data_1 - 4));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 <<< 6) & (data_2 - 4));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 - 6) & 9);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 - 6) & 9);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 & 5) - (data_5 - 7)) | 8);
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 ^ 1) ^ (data_6 ^ 3)) | 4);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 ^ 1) ^ (data_7 ^ 3)) | 4);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 ^ 1) ^ (data_8 ^ 3)) | 4);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 ^ 1) ^ (data_9 ^ 3)) | 4);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 & 7) + 5) ^ 5);
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 & 7) + 5) ^ 5);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 >>> 4) | (((data_12 >>> 10) >>> (data_12 >>> 5)) ^ 8));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((((data_13 + 6) <<< 7) ^ 4) >>> 2);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 - 4) + 3);
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 - 10) & ((data_15 >>> 6) >>> (data_15 | 8)));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_16, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_4-4,"`define WIDTH 128
`define DEPTH 15

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 1) <<< 10) >>> 8) <<< 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 7) <<< 4) & (data[i] + 3)) <<< (((data[i] >>> 7) <<< (data[i] >>> 10)) - 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 3) ^ (in_data - 1)) & 3);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 6) & 1) & 1);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) - (in_data + 1)) & (((in_data ^ 4) & ((in_data - 3) >>> 6)) ^ (in_data | 3)));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 3) <<< (data[i] + 4)) <<< 5) | (data[i] + 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 10) ^ 7) - 1) | 7);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 2) ^ 6) + ((in_data - 1) - (in_data + 5))) & 2);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 10) - ((in_data - 4) ^ (in_data & 7))) ^ ((in_data <<< 7) | 2));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 4) | (((in_data >>> 1) | (in_data + 1)) | (((in_data | 2) ^ 5) - 6)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 15

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data <<< 2) ^ 6) + ((in_data - 1) - (in_data + 5))) & 2);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 | 6) - (data_0 + 1)) & (((data_0 ^ 4) & ((data_0 - 3) >>> 6)) ^ (data_0 | 3)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 >>> 7) <<< 4) & (data_1 + 3)) <<< (((data_1 >>> 7) <<< (data_1 >>> 10)) - 8));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 >>> 7) <<< 4) & (data_2 + 3)) <<< (((data_2 >>> 7) <<< (data_2 >>> 10)) - 8));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 - 10) ^ 7) - 1) | 7);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 + 10) - ((data_4 - 4) ^ (data_4 & 7))) ^ ((data_4 <<< 7) | 2));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 & 6) & 1) & 1);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 <<< 4) | (((data_6 >>> 1) | (data_6 + 1)) | (((data_6 | 2) ^ 5) - 6)));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((((data_7 | 3) <<< (data_7 + 4)) <<< 5) | (data_7 + 9));
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((((data_8 | 3) <<< (data_8 + 4)) <<< 5) | (data_8 + 9));
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((((data_9 | 3) <<< (data_9 + 4)) <<< 5) | (data_9 + 9));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((((data_10 <<< 1) <<< 10) >>> 8) <<< 4);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((((data_11 <<< 1) <<< 10) >>> 8) <<< 4);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((((data_12 <<< 1) <<< 10) >>> 8) <<< 4);
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 - 3) ^ (data_13 - 1)) & 3);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_14, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_4-5,"`define WIDTH 128
`define DEPTH 17

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 3) | 10) >>> 8) <<< 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 6) - 6);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] + 10) - 6) <<< 10) >>> (data[i] <<< 7)) ^ 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 9) & (((in_data & 8) + (in_data >>> 10)) | (in_data <<< 6))) - 2);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 7) ^ (in_data >>> 9)) - (((in_data + 3) ^ ((in_data | 5) <<< (in_data ^ 2))) <<< ((in_data | 4) | (in_data & 4))));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 5) <<< 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 6) & (((in_data | 10) >>> (in_data ^ 2)) & (((in_data - 6) & 3) & 8)));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 2) <<< ((in_data >>> 5) & (in_data - 8))) & 8) | 4);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 8) - (in_data | 4)) & (in_data | 2)) + 10);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 10) - ((in_data <<< 7) <<< 1));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 17

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data | 8) - (in_data | 4)) & (in_data | 2)) + 10);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 <<< 10) - ((data_0 <<< 7) <<< 1));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 - 3) | 10) >>> 8) <<< 4);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 - 3) | 10) >>> 8) <<< 4);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 - 3) | 10) >>> 8) <<< 4);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 - 3) | 10) >>> 8) <<< 4);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 - 7) ^ (data_5 >>> 9)) - (((data_5 + 3) ^ ((data_5 | 5) <<< (data_5 ^ 2))) <<< ((data_5 | 4) | (data_5 & 4))));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((((data_6 + 10) - 6) <<< 10) >>> (data_6 <<< 7)) ^ 9);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((((data_7 + 10) - 6) <<< 10) >>> (data_7 <<< 7)) ^ 9);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((((data_8 + 10) - 6) <<< 10) >>> (data_8 <<< 7)) ^ 9);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((((data_9 + 10) - 6) <<< 10) >>> (data_9 <<< 7)) ^ 9);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 & 6) & (((data_10 | 10) >>> (data_10 ^ 2)) & (((data_10 - 6) & 3) & 8)));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 + 5) <<< 2);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 + 5) <<< 2);
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((((data_13 + 2) <<< ((data_13 >>> 5) & (data_13 - 8))) & 8) | 4);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 >>> 6) - 6);
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((data_15 >>> 9) & (((data_15 & 8) + (data_15 >>> 10)) | (data_15 <<< 6))) - 2);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_16, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_5-0,"`define WIDTH 128
`define DEPTH 12

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 4) & 4) >>> (in_data | 5));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 7) >>> (((in_data + 4) & 1) >>> (in_data - 7))) ^ 1);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 4) + 1) - 1) <<< 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 7) & ((in_data <<< 3) >>> 4)) - 4) + (in_data & 4));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 8) & 9) + (in_data + 3)) & 5);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 6) >>> (in_data | 7)) | 1) - (((in_data + 5) - (in_data & 3)) & (in_data - 7))) & ((in_data | 10) ^ ((((in_data & 7) + 4) + 8) & 9)));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 6) - (in_data | 4)) ^ (((in_data | 3) ^ (in_data >>> 4)) >>> 3)) + ((in_data ^ 9) | ((in_data >>> 1) | 1)));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 8) <<< ((((in_data >>> 2) | (in_data >>> 3)) | (in_data ^ 3)) >>> ((in_data | 5) >>> 6))) <<< ((in_data - 8) | (((in_data ^ 5) & (in_data >>> 9)) <<< 10)));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 4) ^ 10) - ((in_data >>> 9) ^ ((in_data + 5) - 8))) ^ 1);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data >>> 8) | 10) | 5) & ((in_data + 10) <<< 3)) + 2);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 12

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((((in_data - 6) >>> (in_data | 7)) | 1) - (((in_data + 5) - (in_data & 3)) & (in_data - 7))) & ((in_data | 10) ^ ((((in_data & 7) + 4) + 8) & 9)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((((data_0 >>> 8) | 10) | 5) & ((data_0 + 10) <<< 3)) + 2);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 <<< 8) & 9) + (data_1 + 3)) & 5);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 & 4) + 1) - 1) <<< 4);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 & 4) + 1) - 1) <<< 4);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 & 4) + 1) - 1) <<< 4);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 - 8) <<< ((((data_5 >>> 2) | (data_5 >>> 3)) | (data_5 ^ 3)) >>> ((data_5 | 5) >>> 6))) <<< ((data_5 - 8) | (((data_5 ^ 5) & (data_5 >>> 9)) <<< 10)));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 ^ 4) & 4) >>> (data_6 | 5));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((((data_7 - 4) ^ 10) - ((data_7 >>> 9) ^ ((data_7 + 5) - 8))) ^ 1);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 >>> 7) >>> (((data_8 + 4) & 1) >>> (data_8 - 7))) ^ 1);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((((data_9 & 7) & ((data_9 <<< 3) >>> 4)) - 4) + (data_9 & 4));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((((data_10 - 6) - (data_10 | 4)) ^ (((data_10 | 3) ^ (data_10 >>> 4)) >>> 3)) + ((data_10 ^ 9) | ((data_10 >>> 1) | 1)));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_11, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_5-1,"`define WIDTH 128
`define DEPTH 12

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 4) & (in_data & 4)) ^ ((in_data ^ 9) | 3)) & (((in_data <<< 1) & (in_data + 6)) | ((in_data & 3) | 10)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 6) + 8) - 1) + 8);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 6) ^ (((in_data + 1) & (in_data & 3)) | 6)) + 8) + (((((in_data <<< 5) - 7) >>> (in_data & 2)) | ((in_data & 10) <<< (in_data <<< 9))) ^ 8));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 7) <<< 4) + ((data[i] | 7) ^ 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) <<< 10) | 2);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 2) >>> (in_data - 2)) >>> 2) - (((in_data | 4) - (((in_data ^ 10) <<< (in_data ^ 7)) + (in_data <<< 8))) ^ (in_data - 7)));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 5) >>> (in_data + 1)) <<< (((in_data ^ 10) - (in_data >>> 5)) + (in_data >>> 8))) >>> ((in_data - 2) & ((in_data & 4) | 6)));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 5) - 7);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 4) <<< (in_data >>> 2)) ^ ((in_data | 4) >>> (in_data & 1))) + ((((in_data >>> 4) <<< (in_data - 10)) <<< (in_data >>> 9)) & 3)) >>> 3);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 1) <<< 8) >>> (in_data & 6)) >>> (in_data & 3)) + (in_data + 6));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 12

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data | 6) + 8) - 1) + 8);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 & 5) >>> (data_0 + 1)) <<< (((data_0 ^ 10) - (data_0 >>> 5)) + (data_0 >>> 8))) >>> ((data_0 - 2) & ((data_0 & 4) | 6)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 & 6) ^ (((data_1 + 1) & (data_1 & 3)) | 6)) + 8) + (((((data_1 <<< 5) - 7) >>> (data_1 & 2)) | ((data_1 & 10) <<< (data_1 <<< 9))) ^ 8));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 >>> 7) <<< 4) + ((data_2 | 7) ^ 7));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 >>> 7) <<< 4) + ((data_3 | 7) ^ 7));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 >>> 7) <<< 4) + ((data_4 | 7) ^ 7));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((((data_5 ^ 2) >>> (data_5 - 2)) >>> 2) - (((data_5 | 4) - (((data_5 ^ 10) <<< (data_5 ^ 7)) + (data_5 <<< 8))) ^ (data_5 - 7)));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 + 5) - 7);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((((data_7 ^ 4) <<< (data_7 >>> 2)) ^ ((data_7 | 4) >>> (data_7 & 1))) + ((((data_7 >>> 4) <<< (data_7 - 10)) <<< (data_7 >>> 9)) & 3)) >>> 3);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 + 8) <<< 10) | 2);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((((data_9 <<< 1) <<< 8) >>> (data_9 & 6)) >>> (data_9 & 3)) + (data_9 + 6));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((((data_10 + 4) & (data_10 & 4)) ^ ((data_10 ^ 9) | 3)) & (((data_10 <<< 1) & (data_10 + 6)) | ((data_10 & 3) | 10)));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_11, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_5-2,"`define WIDTH 128
`define DEPTH 14

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 5) <<< ((((in_data | 7) & 6) & 10) <<< 7));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 10) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((((data[i] - 9) >>> (data[i] >>> 6)) + 1) <<< 9) + 5) & 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 6) >>> ((in_data ^ 8) >>> ((in_data + 10) ^ (in_data & 9))));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 10) & (in_data | 3)) - (in_data >>> 1)) >>> ((in_data | 9) & ((in_data | 5) | 8))) ^ (((in_data - 6) <<< (in_data | 3)) | (in_data - 5)));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 8) >>> ((in_data + 2) ^ (in_data - 5))) <<< ((in_data - 9) <<< (in_data - 9))) + 8);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 9) - (((in_data + 7) & 10) + ((in_data + 9) | 7))) ^ 10);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 10) & 9) & 2);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 1) >>> 6);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 7) & (in_data - 1)) <<< ((((in_data - 10) | (in_data & 4)) >>> 7) ^ 9)) - (((in_data <<< 10) | (in_data >>> 2)) <<< ((in_data <<< 6) - 1)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 14

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data <<< 6) >>> ((in_data ^ 8) >>> ((in_data + 10) ^ (in_data & 9))));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 & 8) >>> ((data_0 + 2) ^ (data_0 - 5))) <<< ((data_0 - 9) <<< (data_0 - 9))) + 8);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 | 1) >>> 6);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 + 5) <<< ((((data_2 | 7) & 6) & 10) <<< 7));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((((data_3 - 9) >>> (data_3 >>> 6)) + 1) <<< 9) + 5) & 9);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((((data_4 - 9) >>> (data_4 >>> 6)) + 1) <<< 9) + 5) & 9);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((((((data_5 - 9) >>> (data_5 >>> 6)) + 1) <<< 9) + 5) & 9);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((((((data_6 - 9) >>> (data_6 >>> 6)) + 1) <<< 9) + 5) & 9);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 >>> 9) - (((data_7 + 7) & 10) + ((data_7 + 9) | 7))) ^ 10);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 ^ 10) & 9) & 2);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 <<< 10) | 7);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 <<< 10) | 7);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((((data_11 >>> 7) & (data_11 - 1)) <<< ((((data_11 - 10) | (data_11 & 4)) >>> 7) ^ 9)) - (((data_11 <<< 10) | (data_11 >>> 2)) <<< ((data_11 <<< 6) - 1)));
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((((data_12 ^ 10) & (data_12 | 3)) - (data_12 >>> 1)) >>> ((data_12 | 9) & ((data_12 | 5) | 8))) ^ (((data_12 - 6) <<< (data_12 | 3)) | (data_12 - 5)));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_13, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_5-3,"`define WIDTH 128
`define DEPTH 15

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 10) | (in_data | 1)) - 2) ^ ((in_data - 7) - 1)) ^ 10);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 1) <<< 6) <<< 5) & (((data[i] ^ 3) ^ (data[i] | 10)) + 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) | (in_data | 9)) >>> ((in_data | 2) <<< ((in_data <<< 7) <<< 1)));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 5) >>> 10) <<< (in_data <<< 7)) ^ 5);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 8) >>> (in_data + 8)) - 9) <<< 1) <<< (((in_data - 8) <<< 3) & 1));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 6) >>> ((((in_data ^ 4) ^ 10) - (in_data & 5)) <<< ((in_data | 2) | ((in_data + 6) & (in_data + 4)))));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 4) ^ ((data[i] + 4) & 7)) <<< (((data[i] ^ 9) <<< 8) | ((data[i] <<< 4) + (data[i] ^ 4))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 2) - 10) >>> ((data[i] | 6) & ((data[i] - 7) + ((data[i] >>> 8) | 7))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 4) ^ 10) >>> (in_data | 7)) & 10) >>> 1);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 1) <<< (in_data >>> 2)) & (((in_data + 3) | 1) & 5));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 15

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data | 1) <<< (in_data >>> 2)) & (((in_data + 3) | 1) & 5));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 <<< 6) >>> ((((data_0 ^ 4) ^ 10) - (data_0 & 5)) <<< ((data_0 | 2) | ((data_0 + 6) & (data_0 + 4)))));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 <<< 2) - 10) >>> ((data_1 | 6) & ((data_1 - 7) + ((data_1 >>> 8) | 7))));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 <<< 2) - 10) >>> ((data_2 | 6) & ((data_2 - 7) + ((data_2 >>> 8) | 7))));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((((data_3 ^ 10) | (data_3 | 1)) - 2) ^ ((data_3 - 7) - 1)) ^ 10);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((((data_4 <<< 8) >>> (data_4 + 8)) - 9) <<< 1) <<< (((data_4 - 8) <<< 3) & 1));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 ^ 7) | (data_5 | 9)) >>> ((data_5 | 2) <<< ((data_5 <<< 7) <<< 1)));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 - 4) ^ ((data_6 + 4) & 7)) <<< (((data_6 ^ 9) <<< 8) | ((data_6 <<< 4) + (data_6 ^ 4))));
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 - 4) ^ ((data_7 + 4) & 7)) <<< (((data_7 ^ 9) <<< 8) | ((data_7 <<< 4) + (data_7 ^ 4))));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 - 4) ^ ((data_8 + 4) & 7)) <<< (((data_8 ^ 9) <<< 8) | ((data_8 <<< 4) + (data_8 ^ 4))));
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 - 4) ^ ((data_9 + 4) & 7)) <<< (((data_9 ^ 9) <<< 8) | ((data_9 <<< 4) + (data_9 ^ 4))));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((((data_10 <<< 5) >>> 10) <<< (data_10 <<< 7)) ^ 5);
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((((data_11 ^ 4) ^ 10) >>> (data_11 | 7)) & 10) >>> 1);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((((data_12 >>> 1) <<< 6) <<< 5) & (((data_12 ^ 3) ^ (data_12 | 10)) + 7));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((((data_13 >>> 1) <<< 6) <<< 5) & (((data_13 ^ 3) ^ (data_13 | 10)) + 7));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_14, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_5-4,"`define WIDTH 128
`define DEPTH 15

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 9) - 10) & (((in_data & 3) <<< (in_data & 1)) >>> 2));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 4) <<< (in_data | 10)) - (((in_data <<< 1) & 5) ^ ((in_data - 1) & (((in_data & 10) & 8) >>> (in_data <<< 1)))));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 8) - ((in_data + 8) | ((in_data + 5) <<< 6))) >>> (in_data >>> 1));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 7) + 6) + ((((data[i] | 1) ^ (data[i] | 9)) >>> (data[i] + 6)) | 7)) ^ (data[i] + 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 1) - (((in_data | 1) >>> 7) >>> 2));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 1) + 4) <<< ((((in_data ^ 9) & 10) <<< 6) | 6));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 4) <<< ((((data[i] & 4) & (data[i] | 6)) | (((data[i] <<< 2) - 2) <<< (data[i] | 1))) ^ 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 4) <<< ((in_data - 8) - 1)) + 3) ^ ((((in_data <<< 3) + 5) ^ 8) <<< 6));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 2) >>> (in_data >>> 10)) | 8);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 3) <<< ((in_data + 2) - ((in_data & 1) + (in_data ^ 2)))) + (((in_data & 1) | (in_data >>> 8)) >>> 5));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 15

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data + 3) <<< ((in_data + 2) - ((in_data & 1) + (in_data ^ 2)))) + (((in_data & 1) | (in_data >>> 8)) >>> 5));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 + 4) <<< ((data_0 - 8) - 1)) + 3) ^ ((((data_0 <<< 3) + 5) ^ 8) <<< 6));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 | 1) + 4) <<< ((((data_1 ^ 9) & 10) <<< 6) | 6));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 & 7) + 6) + ((((data_2 | 1) ^ (data_2 | 9)) >>> (data_2 + 6)) | 7)) ^ (data_2 + 1));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 & 7) + 6) + ((((data_3 | 1) ^ (data_3 | 9)) >>> (data_3 + 6)) | 7)) ^ (data_3 + 1));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 & 7) + 6) + ((((data_4 | 1) ^ (data_4 | 9)) >>> (data_4 + 6)) | 7)) ^ (data_4 + 1));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 ^ 9) - 10) & (((data_5 & 3) <<< (data_5 & 1)) >>> 2));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 | 4) <<< (data_6 | 10)) - (((data_6 <<< 1) & 5) ^ ((data_6 - 1) & (((data_6 & 10) & 8) >>> (data_6 <<< 1)))));
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 + 2) >>> (data_7 >>> 10)) | 8);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 & 1) - (((data_8 | 1) >>> 7) >>> 2));
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 >>> 4) <<< ((((data_9 & 4) & (data_9 | 6)) | (((data_9 <<< 2) - 2) <<< (data_9 | 1))) ^ 10));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 >>> 4) <<< ((((data_10 & 4) & (data_10 | 6)) | (((data_10 <<< 2) - 2) <<< (data_10 | 1))) ^ 10));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 >>> 4) <<< ((((data_11 & 4) & (data_11 | 6)) | (((data_11 <<< 2) - 2) <<< (data_11 | 1))) ^ 10));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 >>> 4) <<< ((((data_12 & 4) & (data_12 | 6)) | (((data_12 <<< 2) - 2) <<< (data_12 | 1))) ^ 10));
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 - 8) - ((data_13 + 8) | ((data_13 + 5) <<< 6))) >>> (data_13 >>> 1));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_14, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_10-w_128-opd_5-5,"`define WIDTH 128
`define DEPTH 18

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 6) - 9) ^ 3) + 5) | ((in_data + 6) & ((in_data | 1) | 9)));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 2) + ((in_data + 5) <<< 7)) <<< (((in_data | 4) & 4) - 6)) <<< (((in_data | 9) - 5) - ((in_data <<< 6) | (in_data & 10))));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 5) + 10) & 4) >>> 9);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 1) ^ (in_data & 2)) & ((in_data & 3) - (in_data | 5))) & 3) & 10);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] ^ 3) & 9) & ((data[i] & 5) <<< 3)) + 1) <<< 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 10) >>> 1) + 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 7) - 5) & ((in_data + 4) & ((in_data + 4) | (in_data <<< 7)))) + 3);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 5) >>> 4) + (data[i] >>> 2)) & (((data[i] ^ 7) <<< (data[i] & 10)) <<< 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 4) >>> (data[i] >>> 1)) ^ 9) + ((((data[i] + 7) <<< (data[i] ^ 8)) - (data[i] & 3)) <<< (((data[i] <<< 9) - ((data[i] + 7) + 7)) >>> ((data[i] <<< 6) + (data[i] - 10)))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 5) ^ (in_data - 10)) | ((((in_data + 6) - 6) <<< 8) & (in_data <<< 2)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 18

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data <<< 7) - 5) & ((in_data + 4) & ((in_data + 4) | (in_data <<< 7)))) + 3);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 + 10) >>> 1) + 1);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 + 10) >>> 1) + 1);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 + 10) >>> 1) + 1);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 + 10) >>> 1) + 1);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 - 4) >>> (data_4 >>> 1)) ^ 9) + ((((data_4 + 7) <<< (data_4 ^ 8)) - (data_4 & 3)) <<< (((data_4 <<< 9) - ((data_4 + 7) + 7)) >>> ((data_4 <<< 6) + (data_4 - 10)))));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((((data_5 - 4) >>> (data_5 >>> 1)) ^ 9) + ((((data_5 + 7) <<< (data_5 ^ 8)) - (data_5 & 3)) <<< (((data_5 <<< 9) - ((data_5 + 7) + 7)) >>> ((data_5 <<< 6) + (data_5 - 10)))));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((((data_6 - 4) >>> (data_6 >>> 1)) ^ 9) + ((((data_6 + 7) <<< (data_6 ^ 8)) - (data_6 & 3)) <<< (((data_6 <<< 9) - ((data_6 + 7) + 7)) >>> ((data_6 <<< 6) + (data_6 - 10)))));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((((data_7 - 4) >>> (data_7 >>> 1)) ^ 9) + ((((data_7 + 7) <<< (data_7 ^ 8)) - (data_7 & 3)) <<< (((data_7 <<< 9) - ((data_7 + 7) + 7)) >>> ((data_7 <<< 6) + (data_7 - 10)))));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 - 5) ^ (data_8 - 10)) | ((((data_8 + 6) - 6) <<< 8) & (data_8 <<< 2)));
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((((data_9 ^ 1) ^ (data_9 & 2)) & ((data_9 & 3) - (data_9 | 5))) & 3) & 10);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((((data_10 & 5) + 10) & 4) >>> 9);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((((data_11 + 5) >>> 4) + (data_11 >>> 2)) & (((data_11 ^ 7) <<< (data_11 & 10)) <<< 6));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((((data_12 + 5) >>> 4) + (data_12 >>> 2)) & (((data_12 ^ 7) <<< (data_12 & 10)) <<< 6));
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((((data_13 - 6) - 9) ^ 3) + 5) | ((data_13 + 6) & ((data_13 | 1) | 9)));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((((data_14 & 2) + ((data_14 + 5) <<< 7)) <<< (((data_14 | 4) & 4) - 6)) <<< (((data_14 | 9) - 5) - ((data_14 <<< 6) | (data_14 & 10))));
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((((data_15 ^ 3) & 9) & ((data_15 & 5) <<< 3)) + 1) <<< 8);
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((((data_16 ^ 3) & 9) & ((data_16 & 5) <<< 3)) + 1) <<< 8);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_17, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_2-0,"`define WIDTH 128
`define DEPTH 85

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 4) & 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) <<< 8) ^ ((in_data >>> 6) | (in_data - 3)));
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 9) + 4);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) ^ (in_data & 5)) <<< 6);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 8) <<< (in_data & 6)) ^ ((in_data ^ 5) | 5));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 7) | 7);
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 8) <<< 6) | (in_data + 1));
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 4) - ((data[i] - 2) | (data[i] - 7)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 1) ^ ((in_data | 3) ^ 3));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 10) | (data[i] ^ 10)) >>> 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 9) <<< (in_data + 2));
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 5) & (in_data - 5)) & ((in_data >>> 8) + (in_data & 4)));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 7) ^ (data[i] & 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 2) - 8) ^ 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 1) <<< 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 8) ^ ((data[i] + 3) - 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 10) - (in_data ^ 6));
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 8) >>> (in_data <<< 10)) + ((in_data - 2) >>> (in_data ^ 2)));
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) >>> (in_data & 2)) - ((in_data ^ 9) & 4));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) + 6) & 7);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 2) | 1) >>> 3);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) >>> 2) ^ 4);
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 1) | 7);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 2) + ((data[i] >>> 1) - 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 2) >>> 3) >>> (in_data + 4));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 4) - 7) + 9);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 5) - (data[i] >>> 10)) <<< (data[i] - 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 2) ^ (data[i] <<< 7)) | ((data[i] | 6) ^ 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 6) <<< (data[i] ^ 2)) & ((data[i] <<< 10) | (data[i] ^ 8)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 7) + 2) | 8);
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 10) >>> (in_data - 10));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 10) >>> 8) >>> 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 7) - (in_data ^ 9));
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 2) >>> 7) <<< 9);
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 8) & 9);
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 5) - (data[i] + 7)) & 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 5) ^ 5) ^ (data[i] + 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 8) ^ (in_data + 5));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) ^ (in_data | 8)) >>> (in_data & 1));
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 7) ^ ((data[i] <<< 2) - (data[i] & 5)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 6) <<< (in_data <<< 3)) & 4);
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 6) + ((in_data >>> 8) + 10));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 5) | (in_data - 5)) | 1);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 5) | ((in_data >>> 4) | 10));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) - 2) | 8);
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 3) + (in_data + 2)) + (in_data & 6));
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 7) & (data[i] ^ 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 1) <<< 7);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 1) & 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 10) >>> (in_data | 7)) >>> 10);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[79]),
        .in_vld(ready[79]),
        .out_data(data[80]), 
        .out_vld(ready[80])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[80]),
        .in_vld(ready[80]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[82]),
        .in_vld(ready[82]),
        .out_data(data[83]), 
        .out_vld(ready[83])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[83]),
        .in_vld(ready[83]),
        .out_data(data[84]), 
        .out_vld(ready[84])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[84]),
        .in_vld(ready[84]),
        .out_data(data[85]), 
        .out_vld(ready[85])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 85

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data - 5) - (in_data >>> 10)) <<< (in_data - 2));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 - 5) - (data_0 >>> 10)) <<< (data_0 - 2));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 - 5) - (data_1 >>> 10)) <<< (data_1 - 2));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 - 5) - (data_2 >>> 10)) <<< (data_2 - 2));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 ^ 6) <<< (data_3 ^ 2)) & ((data_3 <<< 10) | (data_3 ^ 8)));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 ^ 6) <<< (data_4 ^ 2)) & ((data_4 <<< 10) | (data_4 ^ 8)));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 ^ 6) <<< (data_5 ^ 2)) & ((data_5 <<< 10) | (data_5 ^ 8)));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 ^ 6) <<< (data_6 ^ 2)) & ((data_6 <<< 10) | (data_6 ^ 8)));
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 + 7) ^ (data_7 | 8)) >>> (data_7 & 1));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 ^ 7) >>> 2) ^ 4);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 <<< 6) <<< (data_9 <<< 3)) & 4);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 + 5) | ((data_10 >>> 4) | 10));
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 <<< 9) + 6) & 7);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 | 1) ^ ((data_12 | 3) ^ 3));
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 ^ 2) - 8) ^ 1);
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((data_14 ^ 2) - 8) ^ 1);
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((data_15 <<< 7) + 2) | 8);
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((data_16 <<< 4) & 2);
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((data_17 <<< 4) & 2);
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 <<< 4) & 2);
    wire [WIDTH-1:0] data_20;
    assign data_20 = (((data_19 >>> 2) | 1) >>> 3);
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((data_20 >>> 2) ^ (data_20 <<< 7)) | ((data_20 | 6) ^ 10));
    wire [WIDTH-1:0] data_22;
    assign data_22 = (((data_21 >>> 2) ^ (data_21 <<< 7)) | ((data_21 | 6) ^ 10));
    wire [WIDTH-1:0] data_23;
    assign data_23 = (((data_22 >>> 2) ^ (data_22 <<< 7)) | ((data_22 | 6) ^ 10));
    wire [WIDTH-1:0] data_24;
    assign data_24 = (((data_23 + 5) | (data_23 - 5)) | 1);
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((data_24 - 4) - ((data_24 - 2) | (data_24 - 7)));
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((data_25 - 4) - ((data_25 - 2) | (data_25 - 7)));
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((data_26 - 4) - ((data_26 - 2) | (data_26 - 7)));
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((data_27 >>> 8) ^ (data_27 + 5));
    wire [WIDTH-1:0] data_29;
    assign data_29 = (((data_28 ^ 10) >>> (data_28 | 7)) >>> 10);
    wire [WIDTH-1:0] data_30;
    assign data_30 = (((data_29 >>> 8) <<< (data_29 & 6)) ^ ((data_29 ^ 5) | 5));
    wire [WIDTH-1:0] data_31;
    assign data_31 = (((data_30 <<< 4) - 7) + 9);
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((data_31 <<< 10) >>> (data_31 - 10));
    wire [WIDTH-1:0] data_33;
    assign data_33 = ((data_32 & 1) & 1);
    wire [WIDTH-1:0] data_34;
    assign data_34 = ((data_33 & 1) & 1);
    wire [WIDTH-1:0] data_35;
    assign data_35 = ((data_34 | 1) <<< 6);
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((data_35 | 1) <<< 6);
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((data_36 | 1) <<< 6);
    wire [WIDTH-1:0] data_38;
    assign data_38 = ((data_37 | 1) <<< 6);
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((data_38 ^ 6) + ((data_38 >>> 8) + 10));
    wire [WIDTH-1:0] data_40;
    assign data_40 = (((data_39 + 8) <<< 8) ^ ((data_39 >>> 6) | (data_39 - 3)));
    wire [WIDTH-1:0] data_41;
    assign data_41 = (((data_40 <<< 8) <<< 6) | (data_40 + 1));
    wire [WIDTH-1:0] data_42;
    assign data_42 = (((data_41 <<< 5) - (data_41 + 7)) & 7);
    wire [WIDTH-1:0] data_43;
    assign data_43 = (((data_42 <<< 5) - (data_42 + 7)) & 7);
    wire [WIDTH-1:0] data_44;
    assign data_44 = (((data_43 <<< 9) ^ (data_43 & 5)) <<< 6);
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((data_44 - 2) + ((data_44 >>> 1) - 1));
    wire [WIDTH-1:0] data_46;
    assign data_46 = ((data_45 - 2) + ((data_45 >>> 1) - 1));
    wire [WIDTH-1:0] data_47;
    assign data_47 = ((data_46 - 2) + ((data_46 >>> 1) - 1));
    wire [WIDTH-1:0] data_48;
    assign data_48 = ((data_47 | 10) - (data_47 ^ 6));
    wire [WIDTH-1:0] data_49;
    assign data_49 = (((data_48 | 10) | (data_48 ^ 10)) >>> 6);
    wire [WIDTH-1:0] data_50;
    assign data_50 = (((data_49 | 10) | (data_49 ^ 10)) >>> 6);
    wire [WIDTH-1:0] data_51;
    assign data_51 = (((data_50 | 10) | (data_50 ^ 10)) >>> 6);
    wire [WIDTH-1:0] data_52;
    assign data_52 = ((data_51 <<< 9) + 4);
    wire [WIDTH-1:0] data_53;
    assign data_53 = ((data_52 >>> 9) <<< (data_52 + 2));
    wire [WIDTH-1:0] data_54;
    assign data_54 = ((data_53 >>> 7) & (data_53 ^ 8));
    wire [WIDTH-1:0] data_55;
    assign data_55 = ((data_54 >>> 7) & (data_54 ^ 8));
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((data_55 >>> 7) & (data_55 ^ 8));
    wire [WIDTH-1:0] data_57;
    assign data_57 = ((data_56 >>> 7) & (data_56 ^ 8));
    wire [WIDTH-1:0] data_58;
    assign data_58 = (((data_57 | 10) >>> 8) >>> 6);
    wire [WIDTH-1:0] data_59;
    assign data_59 = (((data_58 | 10) >>> 8) >>> 6);
    wire [WIDTH-1:0] data_60;
    assign data_60 = (((data_59 | 10) >>> 8) >>> 6);
    wire [WIDTH-1:0] data_61;
    assign data_61 = (((data_60 | 10) >>> 8) >>> 6);
    wire [WIDTH-1:0] data_62;
    assign data_62 = (((data_61 | 3) + (data_61 + 2)) + (data_61 & 6));
    wire [WIDTH-1:0] data_63;
    assign data_63 = (((data_62 + 8) - 2) | 8);
    wire [WIDTH-1:0] data_64;
    assign data_64 = ((data_63 - 7) - (data_63 ^ 9));
    wire [WIDTH-1:0] data_65;
    assign data_65 = (((data_64 ^ 6) >>> (data_64 & 2)) - ((data_64 ^ 9) & 4));
    wire [WIDTH-1:0] data_66;
    assign data_66 = ((data_65 & 8) ^ ((data_65 + 3) - 8));
    wire [WIDTH-1:0] data_67;
    assign data_67 = ((data_66 & 8) ^ ((data_66 + 3) - 8));
    wire [WIDTH-1:0] data_68;
    assign data_68 = ((data_67 & 8) ^ ((data_67 + 3) - 8));
    wire [WIDTH-1:0] data_69;
    assign data_69 = (((data_68 | 5) & (data_68 - 5)) & ((data_68 >>> 8) + (data_68 & 4)));
    wire [WIDTH-1:0] data_70;
    assign data_70 = (((data_69 & 2) >>> 7) <<< 9);
    wire [WIDTH-1:0] data_71;
    assign data_71 = ((data_70 | 7) ^ ((data_70 <<< 2) - (data_70 & 5)));
    wire [WIDTH-1:0] data_72;
    assign data_72 = ((data_71 | 7) ^ ((data_71 <<< 2) - (data_71 & 5)));
    wire [WIDTH-1:0] data_73;
    assign data_73 = ((data_72 - 1) | 7);
    wire [WIDTH-1:0] data_74;
    assign data_74 = ((data_73 & 8) & 9);
    wire [WIDTH-1:0] data_75;
    assign data_75 = ((data_74 + 7) ^ (data_74 & 4));
    wire [WIDTH-1:0] data_76;
    assign data_76 = ((data_75 + 7) ^ (data_75 & 4));
    wire [WIDTH-1:0] data_77;
    assign data_77 = ((data_76 + 7) ^ (data_76 & 4));
    wire [WIDTH-1:0] data_78;
    assign data_78 = ((data_77 + 7) ^ (data_77 & 4));
    wire [WIDTH-1:0] data_79;
    assign data_79 = ((data_78 <<< 1) <<< 7);
    wire [WIDTH-1:0] data_80;
    assign data_80 = (((data_79 - 5) ^ 5) ^ (data_79 + 4));
    wire [WIDTH-1:0] data_81;
    assign data_81 = (((data_80 - 5) ^ 5) ^ (data_80 + 4));
    wire [WIDTH-1:0] data_82;
    assign data_82 = (((data_81 >>> 8) >>> (data_81 <<< 10)) + ((data_81 - 2) >>> (data_81 ^ 2)));
    wire [WIDTH-1:0] data_83;
    assign data_83 = ((data_82 + 7) | 7);
    wire [WIDTH-1:0] data_84;
    assign data_84 = (((data_83 <<< 2) >>> 3) >>> (data_83 + 4));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_84, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_2-1,"`define WIDTH 128
`define DEPTH 85

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) & 5) ^ 4);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 6) - 9);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 10) & 5) ^ ((data[i] + 6) ^ (data[i] - 2)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 6) + ((data[i] >>> 6) <<< (data[i] - 1)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 4) <<< ((in_data ^ 1) - (in_data + 1)));
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 7) + 7);
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 7) >>> 8);
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 6) + 9) <<< 3);
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 8) >>> (data[i] ^ 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 5) ^ (in_data <<< 1)) + 9);
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 10) + 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 9) <<< (data[i] + 6)) + 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 7) - (data[i] & 10)) ^ ((data[i] & 4) <<< 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 7) + 3);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 7) <<< (in_data & 6)) - (in_data >>> 4));
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 2) + ((in_data <<< 1) <<< 2));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 5) >>> (in_data | 6)) - (in_data - 1));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 3) >>> (in_data <<< 9)) & ((in_data - 7) >>> (in_data + 8)));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 1) ^ (in_data & 1));
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 9) + (data[i] | 7)) + (data[i] >>> 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 5) ^ (data[i] & 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 5) >>> 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 7) <<< 2);
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 6) >>> (in_data <<< 6)) >>> ((in_data ^ 4) <<< 5));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 10) - (in_data <<< 3)) & (in_data + 1));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) - (in_data & 5)) ^ 5);
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 10) >>> 2) | 7);
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 8) ^ (in_data + 7)) <<< (in_data <<< 3));
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 6) ^ (in_data <<< 3));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 7) & 1) | (in_data - 2));
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) ^ (in_data - 2)) | 4);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 3) | 3) <<< (data[i] ^ 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 2) + 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 7) >>> 6) & 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 9) >>> 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 6) + ((data[i] ^ 2) >>> (data[i] >>> 5)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 8) >>> (in_data | 5));
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 9) - 5);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) & (in_data + 2)) ^ 4);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 4) >>> 6) - 10);
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 5) >>> (in_data >>> 3)) | 2);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 5) ^ (in_data | 2)) ^ 7);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 10) <<< (in_data ^ 6)) | 3);
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) - (in_data >>> 8));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 8) + ((in_data <<< 5) | 1));
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 8) | 1);
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 5) - 3);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 10) ^ 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 5) ^ ((data[i] & 6) ^ (data[i] + 7)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 9) ^ 5);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[79]),
        .in_vld(ready[79]),
        .out_data(data[80]), 
        .out_vld(ready[80])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[80]),
        .in_vld(ready[80]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[82]),
        .in_vld(ready[82]),
        .out_data(data[83]), 
        .out_vld(ready[83])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[83]),
        .in_vld(ready[83]),
        .out_data(data[84]), 
        .out_vld(ready[84])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[84]),
        .in_vld(ready[84]),
        .out_data(data[85]), 
        .out_vld(ready[85])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 85

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data <<< 9) <<< (in_data + 6)) + 4);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 <<< 9) <<< (data_0 + 6)) + 4);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 <<< 9) <<< (data_1 + 6)) + 4);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 <<< 9) <<< (data_2 + 6)) + 4);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 ^ 5) >>> (data_3 | 6)) - (data_3 - 1));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 & 5) ^ (data_4 | 2)) ^ 7);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 | 6) - (data_5 & 5)) ^ 5);
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 & 7) & 1) | (data_6 - 2));
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 + 10) - (data_7 <<< 3)) & (data_7 + 1));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 & 7) <<< (data_8 & 6)) - (data_8 >>> 4));
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 - 3) >>> (data_9 <<< 9)) & ((data_9 - 7) >>> (data_9 + 8)));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 >>> 9) ^ 5);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 >>> 5) ^ ((data_11 & 6) ^ (data_11 + 7)));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 >>> 5) ^ ((data_12 & 6) ^ (data_12 + 7)));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 >>> 5) ^ ((data_13 & 6) ^ (data_13 + 7)));
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((data_14 >>> 7) - (data_14 & 10)) ^ ((data_14 & 4) <<< 8));
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((data_15 >>> 7) - (data_15 & 10)) ^ ((data_15 & 4) <<< 8));
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((data_16 >>> 7) - (data_16 & 10)) ^ ((data_16 & 4) <<< 8));
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((data_17 <<< 10) ^ 6);
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 <<< 10) ^ 6);
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 <<< 10) ^ 6);
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((data_20 <<< 10) ^ 6);
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((data_21 | 6) ^ (data_21 <<< 3));
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 ^ 8) + ((data_22 <<< 5) | 1));
    wire [WIDTH-1:0] data_24;
    assign data_24 = (((data_23 & 10) >>> 2) | 7);
    wire [WIDTH-1:0] data_25;
    assign data_25 = (((data_24 | 7) & 5) ^ 4);
    wire [WIDTH-1:0] data_26;
    assign data_26 = (((data_25 - 6) + 9) <<< 3);
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((data_26 >>> 7) + 7);
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((data_27 & 5) - 3);
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((data_28 & 2) + ((data_28 <<< 1) <<< 2));
    wire [WIDTH-1:0] data_30;
    assign data_30 = (((data_29 | 2) & (data_29 + 2)) ^ 4);
    wire [WIDTH-1:0] data_31;
    assign data_31 = (((data_30 - 8) ^ (data_30 + 7)) <<< (data_30 <<< 3));
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((data_31 <<< 6) + ((data_31 >>> 6) <<< (data_31 - 1)));
    wire [WIDTH-1:0] data_33;
    assign data_33 = ((data_32 <<< 6) + ((data_32 >>> 6) <<< (data_32 - 1)));
    wire [WIDTH-1:0] data_34;
    assign data_34 = ((data_33 <<< 6) + ((data_33 >>> 6) <<< (data_33 - 1)));
    wire [WIDTH-1:0] data_35;
    assign data_35 = ((data_34 <<< 6) + ((data_34 >>> 6) <<< (data_34 - 1)));
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((data_35 - 8) >>> (data_35 ^ 9));
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((data_36 - 8) >>> (data_36 ^ 9));
    wire [WIDTH-1:0] data_38;
    assign data_38 = ((data_37 - 8) >>> (data_37 ^ 9));
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((data_38 - 8) >>> (data_38 ^ 9));
    wire [WIDTH-1:0] data_40;
    assign data_40 = ((data_39 + 7) <<< 2);
    wire [WIDTH-1:0] data_41;
    assign data_41 = (((data_40 <<< 5) ^ (data_40 <<< 1)) + 9);
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((data_41 & 8) >>> (data_41 | 5));
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 - 7) + 3);
    wire [WIDTH-1:0] data_44;
    assign data_44 = (((data_43 ^ 7) ^ (data_43 - 2)) | 4);
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((data_44 & 10) + 10);
    wire [WIDTH-1:0] data_46;
    assign data_46 = ((data_45 & 10) + 10);
    wire [WIDTH-1:0] data_47;
    assign data_47 = ((data_46 ^ 7) >>> 8);
    wire [WIDTH-1:0] data_48;
    assign data_48 = ((data_47 - 6) - 9);
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((data_48 - 6) + ((data_48 ^ 2) >>> (data_48 >>> 5)));
    wire [WIDTH-1:0] data_50;
    assign data_50 = ((data_49 - 6) + ((data_49 ^ 2) >>> (data_49 >>> 5)));
    wire [WIDTH-1:0] data_51;
    assign data_51 = ((data_50 ^ 9) >>> 8);
    wire [WIDTH-1:0] data_52;
    assign data_52 = ((data_51 ^ 9) >>> 8);
    wire [WIDTH-1:0] data_53;
    assign data_53 = ((data_52 ^ 9) >>> 8);
    wire [WIDTH-1:0] data_54;
    assign data_54 = ((data_53 ^ 9) >>> 8);
    wire [WIDTH-1:0] data_55;
    assign data_55 = ((data_54 <<< 5) ^ (data_54 & 10));
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((data_55 <<< 5) ^ (data_55 & 10));
    wire [WIDTH-1:0] data_57;
    assign data_57 = ((data_56 <<< 5) ^ (data_56 & 10));
    wire [WIDTH-1:0] data_58;
    assign data_58 = ((data_57 <<< 5) ^ (data_57 & 10));
    wire [WIDTH-1:0] data_59;
    assign data_59 = ((data_58 <<< 5) >>> 4);
    wire [WIDTH-1:0] data_60;
    assign data_60 = ((data_59 <<< 5) >>> 4);
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((data_60 <<< 5) >>> 4);
    wire [WIDTH-1:0] data_62;
    assign data_62 = ((data_61 <<< 5) >>> 4);
    wire [WIDTH-1:0] data_63;
    assign data_63 = ((data_62 <<< 7) - (data_62 >>> 8));
    wire [WIDTH-1:0] data_64;
    assign data_64 = ((data_63 - 2) + 9);
    wire [WIDTH-1:0] data_65;
    assign data_65 = ((data_64 - 2) + 9);
    wire [WIDTH-1:0] data_66;
    assign data_66 = (((data_65 >>> 10) <<< (data_65 ^ 6)) | 3);
    wire [WIDTH-1:0] data_67;
    assign data_67 = (((data_66 - 7) >>> 6) & 9);
    wire [WIDTH-1:0] data_68;
    assign data_68 = (((data_67 - 7) >>> 6) & 9);
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((data_68 >>> 9) - 5);
    wire [WIDTH-1:0] data_70;
    assign data_70 = ((data_69 ^ 4) <<< ((data_69 ^ 1) - (data_69 + 1)));
    wire [WIDTH-1:0] data_71;
    assign data_71 = (((data_70 <<< 5) >>> (data_70 >>> 3)) | 2);
    wire [WIDTH-1:0] data_72;
    assign data_72 = (((data_71 + 9) + (data_71 | 7)) + (data_71 >>> 7));
    wire [WIDTH-1:0] data_73;
    assign data_73 = (((data_72 + 9) + (data_72 | 7)) + (data_72 >>> 7));
    wire [WIDTH-1:0] data_74;
    assign data_74 = (((data_73 + 9) + (data_73 | 7)) + (data_73 >>> 7));
    wire [WIDTH-1:0] data_75;
    assign data_75 = (((data_74 + 9) + (data_74 | 7)) + (data_74 >>> 7));
    wire [WIDTH-1:0] data_76;
    assign data_76 = (((data_75 <<< 10) & 5) ^ ((data_75 + 6) ^ (data_75 - 2)));
    wire [WIDTH-1:0] data_77;
    assign data_77 = (((data_76 <<< 10) & 5) ^ ((data_76 + 6) ^ (data_76 - 2)));
    wire [WIDTH-1:0] data_78;
    assign data_78 = (((data_77 <<< 10) & 5) ^ ((data_77 + 6) ^ (data_77 - 2)));
    wire [WIDTH-1:0] data_79;
    assign data_79 = (((data_78 | 4) >>> 6) - 10);
    wire [WIDTH-1:0] data_80;
    assign data_80 = (((data_79 | 3) | 3) <<< (data_79 ^ 9));
    wire [WIDTH-1:0] data_81;
    assign data_81 = (((data_80 | 3) | 3) <<< (data_80 ^ 9));
    wire [WIDTH-1:0] data_82;
    assign data_82 = ((data_81 ^ 8) | 1);
    wire [WIDTH-1:0] data_83;
    assign data_83 = ((data_82 + 1) ^ (data_82 & 1));
    wire [WIDTH-1:0] data_84;
    assign data_84 = (((data_83 & 6) >>> (data_83 <<< 6)) >>> ((data_83 ^ 4) <<< 5));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_84, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_2-2,"`define WIDTH 128
`define DEPTH 64

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 1) >>> (in_data + 10)) >>> 4);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 1) ^ (data[i] <<< 1)) + 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 3) - 4);
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 1) - (in_data | 5));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) + (in_data >>> 7)) >>> 3);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 9) <<< 7);
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 7) >>> 6) & 3);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 3) <<< 1) | 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 1) + 10);
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 1) <<< 2);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) | (in_data & 5)) >>> 4);
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 6) <<< 10);
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 1) ^ ((in_data <<< 4) <<< 4));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 2) <<< 3);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 7) | 3);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 7) | 2);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 10) + 2);
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 4) - (data[i] ^ 10)) >>> (data[i] <<< 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 8) <<< 6);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 3) ^ (in_data | 3)) - 3);
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 3) >>> 7);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 2) <<< (in_data ^ 9));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) >>> 9) >>> 8);
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 5) + (data[i] & 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 4) - (in_data >>> 10));
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 1) - ((in_data ^ 4) | 7));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 10) & 6) + 10);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) & 6);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 4) - (in_data >>> 9));
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 10) - 4) | 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 3) - 10);
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 6) | (data[i] & 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) + 8);
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 2) ^ 9);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 3) <<< (data[i] ^ 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 7) >>> ((in_data <<< 10) ^ (in_data | 8)));
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 1) ^ (in_data >>> 3)) | (in_data & 10));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 1) & (in_data + 2)) - 8);
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 2) <<< 2);
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 4) & 8);
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 9) >>> 8);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 10) ^ (in_data <<< 6)) | 3);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 4) & (in_data - 4));
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) <<< 1) - 1);
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 4) - 2) + 4);
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 7) + (in_data <<< 6));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 8) ^ ((in_data >>> 6) & 10));
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 4) | 3);
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 2) + ((in_data | 1) & 4));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 6) ^ 8) - 9);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 64

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data - 3) ^ (in_data | 3)) - 3);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 - 2) <<< 3);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 | 6) ^ 8) - 9);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 | 6) ^ 8) - 9);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 | 6) ^ 8) - 9);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 | 6) ^ 8) - 9);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 - 3) - 4);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 >>> 7) >>> ((data_6 <<< 10) ^ (data_6 | 8)));
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 <<< 3) + (data_7 >>> 7)) >>> 3);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 ^ 3) <<< 1) | 3);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 ^ 3) <<< 1) | 3);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 ^ 3) <<< 1) | 3);
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 ^ 3) <<< 1) | 3);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 & 7) | 3);
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 + 4) - (data_13 >>> 9));
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((data_14 - 10) & 6) + 10);
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 ^ 7) + (data_15 <<< 6));
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((data_16 <<< 7) + 8);
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((data_17 & 6) <<< 10);
    wire [WIDTH-1:0] data_19;
    assign data_19 = (((data_18 <<< 7) >>> 6) & 3);
    wire [WIDTH-1:0] data_20;
    assign data_20 = (((data_19 <<< 4) - 2) + 4);
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((data_20 <<< 3) <<< 1) - 1);
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((data_21 | 9) >>> 8);
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 ^ 2) <<< (data_22 ^ 9));
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 + 8) <<< 6);
    wire [WIDTH-1:0] data_25;
    assign data_25 = (((data_24 <<< 1) ^ (data_24 >>> 3)) | (data_24 & 10));
    wire [WIDTH-1:0] data_26;
    assign data_26 = (((data_25 | 10) ^ (data_25 <<< 6)) | 3);
    wire [WIDTH-1:0] data_27;
    assign data_27 = (((data_26 & 4) - (data_26 ^ 10)) >>> (data_26 <<< 10));
    wire [WIDTH-1:0] data_28;
    assign data_28 = (((data_27 & 4) - (data_27 ^ 10)) >>> (data_27 <<< 10));
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((data_28 ^ 1) - ((data_28 ^ 4) | 7));
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((data_29 <<< 5) + (data_29 & 7));
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((data_30 <<< 5) + (data_30 & 7));
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((data_31 <<< 5) + (data_31 & 7));
    wire [WIDTH-1:0] data_33;
    assign data_33 = ((data_32 <<< 5) + (data_32 & 7));
    wire [WIDTH-1:0] data_34;
    assign data_34 = ((data_33 - 3) >>> 7);
    wire [WIDTH-1:0] data_35;
    assign data_35 = ((data_34 & 6) | (data_34 & 5));
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((data_35 & 6) | (data_35 & 5));
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((data_36 & 10) + 2);
    wire [WIDTH-1:0] data_38;
    assign data_38 = ((data_37 ^ 4) & (data_37 - 4));
    wire [WIDTH-1:0] data_39;
    assign data_39 = (((data_38 & 1) ^ (data_38 <<< 1)) + 7);
    wire [WIDTH-1:0] data_40;
    assign data_40 = (((data_39 & 1) ^ (data_39 <<< 1)) + 7);
    wire [WIDTH-1:0] data_41;
    assign data_41 = (((data_40 | 2) >>> 9) >>> 8);
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((data_41 <<< 4) - (data_41 >>> 10));
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 - 1) + 10);
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((data_43 | 1) - (data_43 | 5));
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((data_44 & 2) + ((data_44 | 1) & 4));
    wire [WIDTH-1:0] data_46;
    assign data_46 = ((data_45 + 1) ^ ((data_45 <<< 4) <<< 4));
    wire [WIDTH-1:0] data_47;
    assign data_47 = (((data_46 & 1) >>> (data_46 + 10)) >>> 4);
    wire [WIDTH-1:0] data_48;
    assign data_48 = ((data_47 - 8) ^ ((data_47 >>> 6) & 10));
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((data_48 <<< 7) & 6);
    wire [WIDTH-1:0] data_50;
    assign data_50 = ((data_49 & 3) <<< (data_49 ^ 8));
    wire [WIDTH-1:0] data_51;
    assign data_51 = ((data_50 & 3) <<< (data_50 ^ 8));
    wire [WIDTH-1:0] data_52;
    assign data_52 = (((data_51 <<< 10) - 4) | 1);
    wire [WIDTH-1:0] data_53;
    assign data_53 = (((data_52 <<< 10) - 4) | 1);
    wire [WIDTH-1:0] data_54;
    assign data_54 = ((data_53 + 9) <<< 7);
    wire [WIDTH-1:0] data_55;
    assign data_55 = ((data_54 - 2) ^ 9);
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((data_55 >>> 1) <<< 2);
    wire [WIDTH-1:0] data_57;
    assign data_57 = ((data_56 <<< 2) <<< 2);
    wire [WIDTH-1:0] data_58;
    assign data_58 = ((data_57 + 7) | 2);
    wire [WIDTH-1:0] data_59;
    assign data_59 = ((data_58 | 4) | 3);
    wire [WIDTH-1:0] data_60;
    assign data_60 = (((data_59 | 7) | (data_59 & 5)) >>> 4);
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((data_60 <<< 3) - 10);
    wire [WIDTH-1:0] data_62;
    assign data_62 = (((data_61 - 1) & (data_61 + 2)) - 8);
    wire [WIDTH-1:0] data_63;
    assign data_63 = ((data_62 ^ 4) & 8);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_63, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_2-3,"`define WIDTH 128
`define DEPTH 83

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) ^ 9) & ((in_data ^ 6) | (in_data <<< 6)));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) + (in_data | 4)) - 6);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 3) | ((in_data >>> 9) - (in_data | 5)));
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 5) | 1) ^ 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 5) ^ (data[i] <<< 5)) - 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 4) + 2);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 10) ^ ((in_data - 3) | 2));
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 10) <<< ((in_data ^ 4) + 7));
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 1) ^ (data[i] ^ 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 10) & (in_data ^ 7));
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 2) & (in_data | 8)) >>> ((in_data & 4) - 1));
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 4) <<< 7) >>> ((data[i] <<< 8) - 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 4) & ((in_data - 9) ^ 2));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 7) - 6) >>> ((data[i] >>> 3) <<< 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 3) >>> (in_data - 6)) & 10);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 4) + 1);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 3) <<< (in_data <<< 5));
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 1) | 1);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 5) >>> (in_data <<< 8)) | (in_data >>> 6));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 2) - 4) + 1);
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 10) | (in_data + 7));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 5) + ((data[i] | 5) + (data[i] ^ 6)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 6) <<< 6);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 1) + 10) ^ 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 6) | (data[i] + 1)) ^ 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 4) <<< (in_data & 4)) | (in_data ^ 1));
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 3) - (in_data - 4)) <<< (in_data ^ 4));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 9) ^ (in_data >>> 7)) ^ ((in_data <<< 1) - (in_data | 7)));
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) ^ (in_data >>> 5)) | 6);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) + (in_data + 10)) ^ (in_data & 1));
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) ^ (in_data ^ 4)) | ((in_data | 3) - 9));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 10) - 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 8) & 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 2) + (data[i] + 4)) - (data[i] ^ 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 1) & ((data[i] <<< 3) - 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 10) ^ (data[i] <<< 2)) + 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) >>> 2) >>> 9);
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 6) >>> (data[i] + 1)) - 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 7) >>> 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 2) - 1);
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 1) + 10);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 1) - 2) >>> 7);
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) <<< (in_data >>> 3)) ^ 3);
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 9) | 6) | ((in_data - 3) ^ 10));
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 1) ^ 8) - 1);
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 3) + ((in_data ^ 3) >>> (in_data + 10)));
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) ^ (in_data >>> 1)) | (in_data + 4));
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) & 4);
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 2) - 8) - ((data[i] >>> 1) + 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 6) - 2);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[78]), 
        .out_vld(ready[78])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[78]),
        .in_vld(ready[78]),
        .out_data(data[81]), 
        .out_vld(ready[81])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[81]),
        .in_vld(ready[81]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[82]),
        .in_vld(ready[82]),
        .out_data(data[83]), 
        .out_vld(ready[83])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 83

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data + 7) - 6) >>> ((in_data >>> 3) <<< 2));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 + 7) - 6) >>> ((data_0 >>> 3) <<< 2));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 + 7) - 6) >>> ((data_1 >>> 3) <<< 2));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 + 7) - 6) >>> ((data_2 >>> 3) <<< 2));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 ^ 1) - 2) >>> 7);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 - 3) | ((data_4 >>> 9) - (data_4 | 5)));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 ^ 5) + ((data_5 | 5) + (data_5 ^ 6)));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 ^ 5) + ((data_6 | 5) + (data_6 ^ 6)));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 ^ 5) + ((data_7 | 5) + (data_7 ^ 6)));
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 ^ 5) + ((data_8 | 5) + (data_8 ^ 6)));
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 & 5) >>> (data_9 <<< 8)) | (data_9 >>> 6));
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 - 2) - 4) + 1);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 | 8) & 7);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 | 8) & 7);
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 | 8) & 7);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 ^ 6) <<< 6);
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 | 3) <<< (data_15 <<< 5));
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((data_16 + 5) ^ (data_16 <<< 5)) - 3);
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((data_17 + 5) ^ (data_17 <<< 5)) - 3);
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 & 2) - 1);
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 - 4) + 1);
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((data_20 - 3) >>> (data_20 - 6)) & 10);
    wire [WIDTH-1:0] data_22;
    assign data_22 = (((data_21 >>> 9) | 6) | ((data_21 - 3) ^ 10));
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 <<< 1) + 10);
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 <<< 1) | 1);
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((data_24 + 6) - 2);
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((data_25 | 4) + 2);
    wire [WIDTH-1:0] data_27;
    assign data_27 = (((data_26 | 2) + (data_26 | 4)) - 6);
    wire [WIDTH-1:0] data_28;
    assign data_28 = (((data_27 | 7) <<< (data_27 >>> 3)) ^ 3);
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((data_28 - 1) ^ (data_28 ^ 10));
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((data_29 - 1) ^ (data_29 ^ 10));
    wire [WIDTH-1:0] data_31;
    assign data_31 = (((data_30 + 2) + (data_30 + 4)) - (data_30 ^ 1));
    wire [WIDTH-1:0] data_32;
    assign data_32 = (((data_31 + 2) + (data_31 + 4)) - (data_31 ^ 1));
    wire [WIDTH-1:0] data_33;
    assign data_33 = (((data_32 + 2) + (data_32 + 4)) - (data_32 ^ 1));
    wire [WIDTH-1:0] data_34;
    assign data_34 = (((data_33 ^ 6) >>> (data_33 + 1)) - 1);
    wire [WIDTH-1:0] data_35;
    assign data_35 = (((data_34 ^ 6) >>> (data_34 + 1)) - 1);
    wire [WIDTH-1:0] data_36;
    assign data_36 = (((data_35 ^ 6) >>> (data_35 + 1)) - 1);
    wire [WIDTH-1:0] data_37;
    assign data_37 = (((data_36 <<< 3) ^ (data_36 ^ 4)) | ((data_36 | 3) - 9));
    wire [WIDTH-1:0] data_38;
    assign data_38 = (((data_37 - 2) - 8) - ((data_37 >>> 1) + 9));
    wire [WIDTH-1:0] data_39;
    assign data_39 = (((data_38 - 2) - 8) - ((data_38 >>> 1) + 9));
    wire [WIDTH-1:0] data_40;
    assign data_40 = (((data_39 - 2) - 8) - ((data_39 >>> 1) + 9));
    wire [WIDTH-1:0] data_41;
    assign data_41 = (((data_40 | 6) ^ (data_40 >>> 1)) | (data_40 + 4));
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((data_41 & 3) & 4);
    wire [WIDTH-1:0] data_43;
    assign data_43 = (((data_42 <<< 6) | (data_42 + 1)) ^ 3);
    wire [WIDTH-1:0] data_44;
    assign data_44 = (((data_43 <<< 6) | (data_43 + 1)) ^ 3);
    wire [WIDTH-1:0] data_45;
    assign data_45 = (((data_44 <<< 6) | (data_44 + 1)) ^ 3);
    wire [WIDTH-1:0] data_46;
    assign data_46 = (((data_45 - 4) <<< (data_45 & 4)) | (data_45 ^ 1));
    wire [WIDTH-1:0] data_47;
    assign data_47 = ((data_46 | 7) >>> 5);
    wire [WIDTH-1:0] data_48;
    assign data_48 = ((data_47 | 7) >>> 5);
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((data_48 | 7) >>> 5);
    wire [WIDTH-1:0] data_50;
    assign data_50 = ((data_49 | 7) >>> 5);
    wire [WIDTH-1:0] data_51;
    assign data_51 = (((data_50 | 6) >>> 2) >>> 9);
    wire [WIDTH-1:0] data_52;
    assign data_52 = ((data_51 | 10) ^ ((data_51 - 3) | 2));
    wire [WIDTH-1:0] data_53;
    assign data_53 = ((data_52 >>> 10) & (data_52 ^ 7));
    wire [WIDTH-1:0] data_54;
    assign data_54 = ((data_53 + 3) + ((data_53 ^ 3) >>> (data_53 + 10)));
    wire [WIDTH-1:0] data_55;
    assign data_55 = ((data_54 >>> 4) & ((data_54 - 9) ^ 2));
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((data_55 | 10) - 4);
    wire [WIDTH-1:0] data_57;
    assign data_57 = ((data_56 | 10) - 4);
    wire [WIDTH-1:0] data_58;
    assign data_58 = (((data_57 & 9) ^ (data_57 >>> 7)) ^ ((data_57 <<< 1) - (data_57 | 7)));
    wire [WIDTH-1:0] data_59;
    assign data_59 = (((data_58 ^ 6) + (data_58 + 10)) ^ (data_58 & 1));
    wire [WIDTH-1:0] data_60;
    assign data_60 = (((data_59 - 2) & (data_59 | 8)) >>> ((data_59 & 4) - 1));
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((data_60 >>> 10) | (data_60 + 7));
    wire [WIDTH-1:0] data_62;
    assign data_62 = (((data_61 >>> 1) ^ 8) - 1);
    wire [WIDTH-1:0] data_63;
    assign data_63 = (((data_62 | 7) ^ (data_62 >>> 5)) | 6);
    wire [WIDTH-1:0] data_64;
    assign data_64 = (((data_63 | 3) - (data_63 - 4)) <<< (data_63 ^ 4));
    wire [WIDTH-1:0] data_65;
    assign data_65 = (((data_64 - 10) ^ (data_64 <<< 2)) + 7);
    wire [WIDTH-1:0] data_66;
    assign data_66 = (((data_65 - 10) ^ (data_65 <<< 2)) + 7);
    wire [WIDTH-1:0] data_67;
    assign data_67 = (((data_66 - 10) ^ (data_66 <<< 2)) + 7);
    wire [WIDTH-1:0] data_68;
    assign data_68 = (((data_67 <<< 1) + 10) ^ 5);
    wire [WIDTH-1:0] data_69;
    assign data_69 = (((data_68 <<< 1) + 10) ^ 5);
    wire [WIDTH-1:0] data_70;
    assign data_70 = (((data_69 <<< 1) + 10) ^ 5);
    wire [WIDTH-1:0] data_71;
    assign data_71 = (((data_70 <<< 1) + 10) ^ 5);
    wire [WIDTH-1:0] data_72;
    assign data_72 = (((data_71 & 4) <<< 7) >>> ((data_71 <<< 8) - 8));
    wire [WIDTH-1:0] data_73;
    assign data_73 = (((data_72 & 4) <<< 7) >>> ((data_72 <<< 8) - 8));
    wire [WIDTH-1:0] data_74;
    assign data_74 = ((data_73 ^ 1) & ((data_73 <<< 3) - 8));
    wire [WIDTH-1:0] data_75;
    assign data_75 = ((data_74 ^ 1) & ((data_74 <<< 3) - 8));
    wire [WIDTH-1:0] data_76;
    assign data_76 = ((data_75 ^ 1) & ((data_75 <<< 3) - 8));
    wire [WIDTH-1:0] data_77;
    assign data_77 = ((data_76 ^ 1) & ((data_76 <<< 3) - 8));
    wire [WIDTH-1:0] data_78;
    assign data_78 = (((data_77 ^ 5) | 1) ^ 7);
    wire [WIDTH-1:0] data_79;
    assign data_79 = (((data_78 ^ 5) | 1) ^ 7);
    wire [WIDTH-1:0] data_80;
    assign data_80 = (((data_79 ^ 5) | 1) ^ 7);
    wire [WIDTH-1:0] data_81;
    assign data_81 = (((data_80 ^ 7) ^ 9) & ((data_80 ^ 6) | (data_80 <<< 6)));
    wire [WIDTH-1:0] data_82;
    assign data_82 = ((data_81 <<< 10) <<< ((data_81 ^ 4) + 7));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_82, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_2-4,"`define WIDTH 128
`define DEPTH 95

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 7) - (in_data | 9)) ^ (in_data & 9));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) >>> 5) - 8);
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 1) <<< 9) & ((in_data | 5) - 10));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 6) & ((in_data - 7) - (in_data & 10)));
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) ^ (in_data ^ 4)) ^ (in_data | 4));
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 10) ^ (in_data <<< 3));
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 10) <<< 10) & 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 9) + 6) <<< (in_data | 10));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 2) & 5);
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 2) | 8) & ((data[i] >>> 1) <<< (data[i] ^ 2)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 3) ^ ((data[i] <<< 9) + 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 5) >>> 8) | 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 5) & (in_data <<< 4));
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) | 1) + (in_data & 9));
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) <<< 9) & 3);
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 9) & (data[i] & 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 9) <<< (data[i] + 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) >>> (in_data + 9)) ^ ((in_data <<< 9) - (in_data <<< 7)));
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 5) ^ 4) | 10);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 1) >>> 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) >>> 7);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 9) ^ 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 6) + (data[i] >>> 8)) >>> 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 9) ^ (in_data & 10)) & 10);
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 3) <<< 8);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) & 8) | 9);
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 6) | 5);
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 4) <<< 10);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 4) <<< 9) ^ ((data[i] <<< 5) + 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 6) | 8) >>> 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 7) ^ (in_data >>> 1)) | ((in_data + 10) + 3));
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 9) & 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 9) >>> (in_data <<< 5));
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 1) + (in_data >>> 7)) & ((in_data >>> 8) >>> 3));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 7) >>> ((data[i] + 7) >>> (data[i] - 1)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 7) & (data[i] ^ 10)) ^ 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 3) <<< (in_data <<< 4)) & ((in_data - 6) <<< 3));
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 2) ^ (data[i] >>> 7)) | (data[i] + 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 4) ^ 9) ^ (data[i] & 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) + (in_data + 9)) + 10);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 3) & 3);
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 8) >>> 4) ^ ((in_data - 6) + (in_data >>> 9)));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 4) >>> 2) <<< ((in_data - 8) & (in_data + 6)));
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 7) | 3);
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 7) - (data[i] - 5)) + 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) <<< (in_data + 8)) <<< 3);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 10) >>> 6) ^ 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 2) - ((data[i] | 7) <<< 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 8) | 7) + 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 1) | 2);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[79]),
        .in_vld(ready[79]),
        .out_data(data[80]), 
        .out_vld(ready[80])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[80]),
        .in_vld(ready[80]),
        .out_data(data[81]), 
        .out_vld(ready[81])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[81]),
        .in_vld(ready[81]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[82]),
        .in_vld(ready[82]),
        .out_data(data[84]), 
        .out_vld(ready[84])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[84]),
        .in_vld(ready[84]),
        .out_data(data[85]), 
        .out_vld(ready[85])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[85]),
        .in_vld(ready[85]),
        .out_data(data[86]), 
        .out_vld(ready[86])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[86]),
        .in_vld(ready[86]),
        .out_data(data[87]), 
        .out_vld(ready[87])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[87]),
        .in_vld(ready[87]),
        .out_data(data[91]), 
        .out_vld(ready[91])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[91]),
        .in_vld(ready[91]),
        .out_data(data[95]), 
        .out_vld(ready[95])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 95

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data >>> 6) + (in_data >>> 8)) >>> 5);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 >>> 6) + (data_0 >>> 8)) >>> 5);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 >>> 6) + (data_1 >>> 8)) >>> 5);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 <<< 10) >>> 6) ^ 2);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 <<< 10) >>> 6) ^ 2);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 <<< 10) >>> 6) ^ 2);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 <<< 10) >>> 6) ^ 2);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 - 9) ^ 4);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 - 9) ^ 4);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 ^ 5) >>> 8) | 8);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 ^ 5) >>> 8) | 8);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 ^ 4) >>> 2) <<< ((data_10 - 8) & (data_10 + 6)));
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 ^ 2) + (data_11 + 9)) + 10);
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 >>> 6) | 8) >>> 1);
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 >>> 6) | 8) >>> 1);
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((data_14 >>> 6) | 8) >>> 1);
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((data_15 >>> 6) | 8) >>> 1);
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((data_16 + 4) ^ 9) ^ (data_16 & 9));
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((data_17 + 4) ^ 9) ^ (data_17 & 9));
    wire [WIDTH-1:0] data_19;
    assign data_19 = (((data_18 + 4) ^ 9) ^ (data_18 & 9));
    wire [WIDTH-1:0] data_20;
    assign data_20 = (((data_19 + 4) ^ 9) ^ (data_19 & 9));
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((data_20 | 5) & (data_20 <<< 4));
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((data_21 <<< 7) >>> ((data_21 + 7) >>> (data_21 - 1)));
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 <<< 7) >>> ((data_22 + 7) >>> (data_22 - 1)));
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 <<< 7) >>> ((data_23 + 7) >>> (data_23 - 1)));
    wire [WIDTH-1:0] data_25;
    assign data_25 = (((data_24 ^ 8) >>> 4) ^ ((data_24 - 6) + (data_24 >>> 9)));
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((data_25 & 9) & 5);
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((data_26 & 9) & 5);
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((data_27 & 9) & 5);
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((data_28 & 9) & 5);
    wire [WIDTH-1:0] data_30;
    assign data_30 = (((data_29 ^ 2) ^ (data_29 >>> 7)) | (data_29 + 5));
    wire [WIDTH-1:0] data_31;
    assign data_31 = (((data_30 ^ 2) ^ (data_30 >>> 7)) | (data_30 + 5));
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((data_31 >>> 9) <<< (data_31 + 4));
    wire [WIDTH-1:0] data_33;
    assign data_33 = ((data_32 >>> 9) <<< (data_32 + 4));
    wire [WIDTH-1:0] data_34;
    assign data_34 = ((data_33 & 3) >>> 7);
    wire [WIDTH-1:0] data_35;
    assign data_35 = (((data_34 ^ 7) <<< 9) & 3);
    wire [WIDTH-1:0] data_36;
    assign data_36 = (((data_35 <<< 8) | 7) + 4);
    wire [WIDTH-1:0] data_37;
    assign data_37 = (((data_36 <<< 8) | 7) + 4);
    wire [WIDTH-1:0] data_38;
    assign data_38 = (((data_37 <<< 8) | 7) + 4);
    wire [WIDTH-1:0] data_39;
    assign data_39 = (((data_38 <<< 8) | 7) + 4);
    wire [WIDTH-1:0] data_40;
    assign data_40 = (((data_39 - 1) + (data_39 >>> 7)) & ((data_39 >>> 8) >>> 3));
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((data_40 <<< 6) & ((data_40 - 7) - (data_40 & 10)));
    wire [WIDTH-1:0] data_42;
    assign data_42 = (((data_41 ^ 2) | 8) & ((data_41 >>> 1) <<< (data_41 ^ 2)));
    wire [WIDTH-1:0] data_43;
    assign data_43 = (((data_42 ^ 2) | 8) & ((data_42 >>> 1) <<< (data_42 ^ 2)));
    wire [WIDTH-1:0] data_44;
    assign data_44 = (((data_43 ^ 2) | 8) & ((data_43 >>> 1) <<< (data_43 ^ 2)));
    wire [WIDTH-1:0] data_45;
    assign data_45 = (((data_44 | 7) & 8) | 9);
    wire [WIDTH-1:0] data_46;
    assign data_46 = (((data_45 | 6) >>> 5) - 8);
    wire [WIDTH-1:0] data_47;
    assign data_47 = (((data_46 ^ 7) ^ (data_46 ^ 4)) ^ (data_46 | 4));
    wire [WIDTH-1:0] data_48;
    assign data_48 = (((data_47 >>> 5) ^ 4) | 10);
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((data_48 - 2) & 5);
    wire [WIDTH-1:0] data_50;
    assign data_50 = ((data_49 ^ 2) - ((data_49 | 7) <<< 5));
    wire [WIDTH-1:0] data_51;
    assign data_51 = ((data_50 ^ 2) - ((data_50 | 7) <<< 5));
    wire [WIDTH-1:0] data_52;
    assign data_52 = ((data_51 ^ 2) - ((data_51 | 7) <<< 5));
    wire [WIDTH-1:0] data_53;
    assign data_53 = ((data_52 ^ 2) - ((data_52 | 7) <<< 5));
    wire [WIDTH-1:0] data_54;
    assign data_54 = ((data_53 ^ 7) | 3);
    wire [WIDTH-1:0] data_55;
    assign data_55 = ((data_54 & 10) ^ (data_54 <<< 3));
    wire [WIDTH-1:0] data_56;
    assign data_56 = (((data_55 & 10) <<< 10) & 4);
    wire [WIDTH-1:0] data_57;
    assign data_57 = (((data_56 & 10) <<< 10) & 4);
    wire [WIDTH-1:0] data_58;
    assign data_58 = (((data_57 & 10) <<< 10) & 4);
    wire [WIDTH-1:0] data_59;
    assign data_59 = (((data_58 + 9) ^ (data_58 & 10)) & 10);
    wire [WIDTH-1:0] data_60;
    assign data_60 = ((data_59 >>> 6) | 5);
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((data_60 - 9) >>> (data_60 <<< 5));
    wire [WIDTH-1:0] data_62;
    assign data_62 = (((data_61 - 7) - (data_61 - 5)) + 9);
    wire [WIDTH-1:0] data_63;
    assign data_63 = (((data_62 - 7) - (data_62 - 5)) + 9);
    wire [WIDTH-1:0] data_64;
    assign data_64 = (((data_63 - 7) - (data_63 - 5)) + 9);
    wire [WIDTH-1:0] data_65;
    assign data_65 = ((data_64 + 3) ^ ((data_64 <<< 9) + 5));
    wire [WIDTH-1:0] data_66;
    assign data_66 = ((data_65 + 3) ^ ((data_65 <<< 9) + 5));
    wire [WIDTH-1:0] data_67;
    assign data_67 = ((data_66 + 3) ^ ((data_66 <<< 9) + 5));
    wire [WIDTH-1:0] data_68;
    assign data_68 = ((data_67 + 3) ^ ((data_67 <<< 9) + 5));
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((data_68 ^ 4) <<< 10);
    wire [WIDTH-1:0] data_70;
    assign data_70 = ((data_69 <<< 3) <<< 8);
    wire [WIDTH-1:0] data_71;
    assign data_71 = (((data_70 <<< 9) <<< (data_70 + 8)) <<< 3);
    wire [WIDTH-1:0] data_72;
    assign data_72 = (((data_71 >>> 7) ^ (data_71 >>> 1)) | ((data_71 + 10) + 3));
    wire [WIDTH-1:0] data_73;
    assign data_73 = (((data_72 - 9) + 6) <<< (data_72 | 10));
    wire [WIDTH-1:0] data_74;
    assign data_74 = (((data_73 + 7) | 1) + (data_73 & 9));
    wire [WIDTH-1:0] data_75;
    assign data_75 = (((data_74 + 4) <<< 9) ^ ((data_74 <<< 5) + 7));
    wire [WIDTH-1:0] data_76;
    assign data_76 = (((data_75 + 4) <<< 9) ^ ((data_75 <<< 5) + 7));
    wire [WIDTH-1:0] data_77;
    assign data_77 = (((data_76 + 4) <<< 9) ^ ((data_76 <<< 5) + 7));
    wire [WIDTH-1:0] data_78;
    assign data_78 = (((data_77 + 4) <<< 9) ^ ((data_77 <<< 5) + 7));
    wire [WIDTH-1:0] data_79;
    assign data_79 = (((data_78 & 1) <<< 9) & ((data_78 | 5) - 10));
    wire [WIDTH-1:0] data_80;
    assign data_80 = (((data_79 & 7) - (data_79 | 9)) ^ (data_79 & 9));
    wire [WIDTH-1:0] data_81;
    assign data_81 = (((data_80 & 3) <<< (data_80 <<< 4)) & ((data_80 - 6) <<< 3));
    wire [WIDTH-1:0] data_82;
    assign data_82 = ((data_81 >>> 1) >>> 9);
    wire [WIDTH-1:0] data_83;
    assign data_83 = ((data_82 >>> 1) >>> 9);
    wire [WIDTH-1:0] data_84;
    assign data_84 = (((data_83 + 8) >>> (data_83 + 9)) ^ ((data_83 <<< 9) - (data_83 <<< 7)));
    wire [WIDTH-1:0] data_85;
    assign data_85 = ((data_84 & 1) | 2);
    wire [WIDTH-1:0] data_86;
    assign data_86 = ((data_85 | 3) & 3);
    wire [WIDTH-1:0] data_87;
    assign data_87 = (((data_86 ^ 7) & (data_86 ^ 10)) ^ 8);
    wire [WIDTH-1:0] data_88;
    assign data_88 = (((data_87 ^ 7) & (data_87 ^ 10)) ^ 8);
    wire [WIDTH-1:0] data_89;
    assign data_89 = (((data_88 ^ 7) & (data_88 ^ 10)) ^ 8);
    wire [WIDTH-1:0] data_90;
    assign data_90 = (((data_89 ^ 7) & (data_89 ^ 10)) ^ 8);
    wire [WIDTH-1:0] data_91;
    assign data_91 = ((data_90 & 9) & (data_90 & 2));
    wire [WIDTH-1:0] data_92;
    assign data_92 = ((data_91 & 9) & (data_91 & 2));
    wire [WIDTH-1:0] data_93;
    assign data_93 = ((data_92 & 9) & (data_92 & 2));
    wire [WIDTH-1:0] data_94;
    assign data_94 = ((data_93 & 9) & (data_93 & 2));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_94, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_2-5,"`define WIDTH 128
`define DEPTH 74

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 10) | 5) | ((in_data | 6) <<< (in_data + 7)));
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) <<< (in_data <<< 6)) ^ 6);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 8) - ((data[i] | 2) <<< (data[i] ^ 2)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) + (in_data ^ 3)) ^ (in_data >>> 8));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 4) - ((in_data - 4) >>> (in_data | 7)));
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 7) | (data[i] - 3)) <<< 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) <<< (in_data + 9)) | ((in_data | 4) <<< (in_data >>> 6)));
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 8) >>> ((data[i] + 4) <<< 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) & 7) + (in_data <<< 9));
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) <<< 2) ^ 10);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 10) + (in_data + 2)) + ((in_data | 8) & 9));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 5) - (in_data ^ 8)) >>> ((in_data | 3) >>> (in_data ^ 2)));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 5) + (in_data | 3)) & ((in_data + 8) ^ (in_data - 5)));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 5) - 7);
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 4) | 3) >>> ((in_data - 10) & (in_data & 4)));
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 9) & 10) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 4) - (in_data >>> 4)) & ((in_data & 10) - (in_data >>> 5)));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 10) - 5);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 9) - 4);
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 3) + 5);
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 1) + 4) >>> ((in_data & 5) + 8));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 9) <<< (in_data ^ 9)) >>> 9);
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 10) + 9);
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 4) | 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 3) - 2);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 3) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 1) & (in_data | 6)) ^ 7);
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 1) & 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 8) <<< (in_data ^ 7));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) | (in_data - 8)) & 9);
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 4) ^ 7) | 9);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) - (in_data + 8)) >>> 7);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 2) <<< 10);
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 9) + 3);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) - 4) - 4);
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 1) | 2) - 5);
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 1) | 3);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 7) >>> (data[i] & 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 3) >>> 1) <<< 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 2) - (in_data ^ 9));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 1) - 3) & 3);
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 10) <<< (in_data >>> 2));
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 5) & 4) & 4);
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 7) <<< (data[i] ^ 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 3) | ((in_data + 5) >>> (in_data <<< 6)));
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 5) <<< 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) - (in_data + 7));
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 1) >>> 2) & 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 1) + 4) <<< ((in_data >>> 6) - (in_data - 3)));
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 10) - 3) | (in_data & 8));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 74

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data <<< 9) <<< (in_data + 9)) | ((in_data | 4) <<< (in_data >>> 6)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 + 2) - (data_0 ^ 9));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 <<< 3) | 7);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 <<< 3) | 7);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 <<< 3) | 7);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 <<< 3) | 7);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 & 5) - (data_5 ^ 8)) >>> ((data_5 | 3) >>> (data_5 ^ 2)));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 - 4) - ((data_6 - 4) >>> (data_6 | 7)));
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 | 1) & (data_7 | 6)) ^ 7);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 ^ 1) - 3) & 3);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 & 3) - (data_9 + 7));
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 ^ 7) - (data_10 + 8)) >>> 7);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 ^ 3) | ((data_11 + 5) >>> (data_11 <<< 6)));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 - 10) - 5);
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 | 8) >>> ((data_13 + 4) <<< 6));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 | 8) >>> ((data_14 + 4) <<< 6));
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 | 8) >>> ((data_15 + 4) <<< 6));
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((data_16 + 1) + 4) >>> ((data_16 & 5) + 8));
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((data_17 & 5) + (data_17 | 3)) & ((data_17 + 8) ^ (data_17 - 5)));
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 + 3) + 5);
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 & 4) | 1);
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((data_20 & 4) | 1);
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((data_21 & 4) | 1);
    wire [WIDTH-1:0] data_23;
    assign data_23 = (((data_22 + 4) - (data_22 >>> 4)) & ((data_22 & 10) - (data_22 >>> 5)));
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 <<< 7) >>> (data_23 & 9));
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((data_24 <<< 7) >>> (data_24 & 9));
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((data_25 <<< 7) >>> (data_25 & 9));
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((data_26 & 10) + 9);
    wire [WIDTH-1:0] data_28;
    assign data_28 = (((data_27 >>> 4) <<< 2) ^ 10);
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((data_28 >>> 8) - ((data_28 | 2) <<< (data_28 ^ 2)));
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((data_29 >>> 8) - ((data_29 | 2) <<< (data_29 ^ 2)));
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((data_30 >>> 8) - ((data_30 | 2) <<< (data_30 ^ 2)));
    wire [WIDTH-1:0] data_32;
    assign data_32 = (((data_31 & 9) <<< (data_31 ^ 9)) >>> 9);
    wire [WIDTH-1:0] data_33;
    assign data_33 = ((data_32 | 9) + 3);
    wire [WIDTH-1:0] data_34;
    assign data_34 = (((data_33 - 7) | (data_33 - 3)) <<< 10);
    wire [WIDTH-1:0] data_35;
    assign data_35 = (((data_34 - 7) | (data_34 - 3)) <<< 10);
    wire [WIDTH-1:0] data_36;
    assign data_36 = (((data_35 ^ 1) + 4) <<< ((data_35 >>> 6) - (data_35 - 3)));
    wire [WIDTH-1:0] data_37;
    assign data_37 = (((data_36 + 10) | 5) | ((data_36 | 6) <<< (data_36 + 7)));
    wire [WIDTH-1:0] data_38;
    assign data_38 = ((data_37 - 9) - 4);
    wire [WIDTH-1:0] data_39;
    assign data_39 = (((data_38 ^ 7) <<< (data_38 <<< 6)) ^ 6);
    wire [WIDTH-1:0] data_40;
    assign data_40 = ((data_39 <<< 5) <<< 7);
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((data_40 <<< 5) <<< 7);
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((data_41 <<< 5) <<< 7);
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 >>> 1) & 4);
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((data_43 >>> 1) & 4);
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((data_44 >>> 1) & 4);
    wire [WIDTH-1:0] data_46;
    assign data_46 = ((data_45 >>> 1) & 4);
    wire [WIDTH-1:0] data_47;
    assign data_47 = (((data_46 + 4) ^ 7) | 9);
    wire [WIDTH-1:0] data_48;
    assign data_48 = (((data_47 | 10) - 3) | (data_47 & 8));
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((data_48 + 8) <<< (data_48 ^ 7));
    wire [WIDTH-1:0] data_50;
    assign data_50 = (((data_49 ^ 2) + (data_49 ^ 3)) ^ (data_49 >>> 8));
    wire [WIDTH-1:0] data_51;
    assign data_51 = ((data_50 + 10) <<< (data_50 >>> 2));
    wire [WIDTH-1:0] data_52;
    assign data_52 = ((data_51 - 7) <<< (data_51 ^ 5));
    wire [WIDTH-1:0] data_53;
    assign data_53 = ((data_52 - 7) <<< (data_52 ^ 5));
    wire [WIDTH-1:0] data_54;
    assign data_54 = ((data_53 - 7) <<< (data_53 ^ 5));
    wire [WIDTH-1:0] data_55;
    assign data_55 = (((data_54 | 2) | (data_54 - 8)) & 9);
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((data_55 >>> 3) - 2);
    wire [WIDTH-1:0] data_57;
    assign data_57 = ((data_56 - 2) <<< 10);
    wire [WIDTH-1:0] data_58;
    assign data_58 = ((data_57 <<< 1) | 3);
    wire [WIDTH-1:0] data_59;
    assign data_59 = (((data_58 ^ 7) - 4) - 4);
    wire [WIDTH-1:0] data_60;
    assign data_60 = (((data_59 >>> 1) >>> 2) & 4);
    wire [WIDTH-1:0] data_61;
    assign data_61 = (((data_60 >>> 1) >>> 2) & 4);
    wire [WIDTH-1:0] data_62;
    assign data_62 = (((data_61 >>> 1) >>> 2) & 4);
    wire [WIDTH-1:0] data_63;
    assign data_63 = (((data_62 | 2) & 7) + (data_62 <<< 9));
    wire [WIDTH-1:0] data_64;
    assign data_64 = (((data_63 - 5) & 4) & 4);
    wire [WIDTH-1:0] data_65;
    assign data_65 = ((data_64 ^ 5) - 7);
    wire [WIDTH-1:0] data_66;
    assign data_66 = (((data_65 & 9) & 10) >>> 3);
    wire [WIDTH-1:0] data_67;
    assign data_67 = (((data_66 & 9) & 10) >>> 3);
    wire [WIDTH-1:0] data_68;
    assign data_68 = (((data_67 & 9) & 10) >>> 3);
    wire [WIDTH-1:0] data_69;
    assign data_69 = (((data_68 & 10) + (data_68 + 2)) + ((data_68 | 8) & 9));
    wire [WIDTH-1:0] data_70;
    assign data_70 = (((data_69 | 3) >>> 1) <<< 4);
    wire [WIDTH-1:0] data_71;
    assign data_71 = (((data_70 | 3) >>> 1) <<< 4);
    wire [WIDTH-1:0] data_72;
    assign data_72 = (((data_71 | 4) | 3) >>> ((data_71 - 10) & (data_71 & 4)));
    wire [WIDTH-1:0] data_73;
    assign data_73 = (((data_72 - 1) | 2) - 5);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_73, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_3-0,"`define WIDTH 128
`define DEPTH 79

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 10) <<< 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 3) ^ ((in_data >>> 7) ^ (in_data >>> 7))) ^ (in_data ^ 9));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 5) | ((data[i] <<< 3) <<< (data[i] <<< 1))) & 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 7) >>> 4) <<< (in_data ^ 3)) & 2);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 9) + 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 3) | (data[i] <<< 8)) >>> 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 10) ^ 2) <<< 8) ^ 9);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 4) + 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 1) - 8) + (((in_data + 1) - 2) + ((in_data & 5) - 2)));
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) ^ 9) + ((in_data >>> 4) | ((in_data + 9) ^ 7)));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 9) <<< 2) + (in_data - 6));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 4) | 2);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 3) ^ 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 7) & (in_data & 6)) - 1) <<< (((in_data ^ 2) & (in_data ^ 7)) | 6));
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) + 10) <<< 10);
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 4) + (in_data <<< 4));
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 5) >>> (data[i] >>> 2)) | ((data[i] - 4) <<< 9)) & 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 2) & 8);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 9) - 10) & ((data[i] | 7) & 3)) & 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 5) | ((data[i] | 8) + 2)) ^ 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 10) | 10) & ((in_data ^ 8) >>> ((in_data | 6) | 9)));
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 10) ^ ((in_data + 8) >>> 1)) & ((in_data >>> 1) ^ (in_data + 10)));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) & 8) - (in_data + 2));
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) | (in_data <<< 6)) ^ ((in_data <<< 8) ^ (in_data & 2)));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 4) >>> 8) <<< 5) & 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 1) ^ (in_data + 6));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 8) & ((in_data - 5) + (in_data & 7))) & (in_data <<< 4));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 6) | (in_data >>> 6)) - 10) >>> ((in_data - 10) | 9));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 7) - (in_data ^ 5)) + (((in_data ^ 9) + 2) & 3));
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 2) + (in_data ^ 2));
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 4) >>> 4);
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 10) & (data[i] ^ 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 9) + (in_data >>> 2)) - 8) - 2);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 5) ^ (in_data <<< 3));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 8) & (data[i] ^ 4)) <<< (data[i] >>> 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 10) >>> ((in_data | 9) ^ (in_data >>> 4)));
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 4) >>> 5) + ((data[i] - 8) + (data[i] & 8))) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 1) - (((in_data - 7) ^ (in_data ^ 3)) <<< 8));
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 10) >>> 2) ^ (in_data | 8)) & 1);
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 10) | 8);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 2) >>> 1);
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 2) + ((in_data | 4) >>> 4));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 9) <<< 1) - (((in_data & 5) ^ 2) + 7));
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 4) <<< (data[i] >>> 10)) & 10) + 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 10) - 9);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 6) ^ 8);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) <<< 3) + (in_data ^ 9));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 3) - (in_data ^ 7)) ^ 1) + (in_data ^ 5));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 4) & 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 6) >>> ((in_data - 3) + (in_data | 1)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[77]),
        .in_vld(ready[77]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 79

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data <<< 10) - 9);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 >>> 8) & (data_0 ^ 4)) <<< (data_0 >>> 3));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 >>> 8) & (data_1 ^ 4)) <<< (data_1 >>> 3));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 | 6) & 8) - (data_2 + 2));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 - 2) & 8);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 <<< 5) | ((data_4 <<< 3) <<< (data_4 <<< 1))) & 7);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 <<< 5) | ((data_5 <<< 3) <<< (data_5 <<< 1))) & 7);
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 + 3) ^ ((data_6 >>> 7) ^ (data_6 >>> 7))) ^ (data_6 ^ 9));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 <<< 6) >>> ((data_7 - 3) + (data_7 | 1)));
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 + 4) | 2);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 <<< 5) ^ (data_9 <<< 3));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 | 4) & 2);
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 | 4) & 2);
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 | 9) <<< 1) - (((data_12 & 5) ^ 2) + 7));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((((data_13 + 4) >>> 5) + ((data_13 - 8) + (data_13 & 8))) | 7);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((((data_14 + 4) >>> 5) + ((data_14 - 8) + (data_14 & 8))) | 7);
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((((data_15 + 4) >>> 5) + ((data_15 - 8) + (data_15 & 8))) | 7);
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((data_16 <<< 4) >>> 4);
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((data_17 + 9) <<< 2) + (data_17 - 6));
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 | 4) + (data_18 <<< 4));
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 >>> 10) | 8);
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((data_20 ^ 10) ^ ((data_20 + 8) >>> 1)) & ((data_20 >>> 1) ^ (data_20 + 10)));
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((data_21 >>> 4) + 9);
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 >>> 4) + 9);
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 >>> 4) + 9);
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((data_24 >>> 4) + 9);
    wire [WIDTH-1:0] data_26;
    assign data_26 = (((data_25 & 10) | 10) & ((data_25 ^ 8) >>> ((data_25 | 6) | 9)));
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((data_26 - 1) ^ (data_26 + 6));
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((((data_27 >>> 10) ^ 2) <<< 8) ^ 9);
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((((data_28 ^ 4) >>> 8) <<< 5) & 6);
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((((data_29 ^ 4) >>> 8) <<< 5) & 6);
    wire [WIDTH-1:0] data_31;
    assign data_31 = (((data_30 <<< 9) ^ 9) + ((data_30 >>> 4) | ((data_30 + 9) ^ 7)));
    wire [WIDTH-1:0] data_32;
    assign data_32 = (((data_31 ^ 3) | (data_31 <<< 8)) >>> 4);
    wire [WIDTH-1:0] data_33;
    assign data_33 = (((data_32 ^ 3) | (data_32 <<< 8)) >>> 4);
    wire [WIDTH-1:0] data_34;
    assign data_34 = (((data_33 ^ 3) | (data_33 <<< 8)) >>> 4);
    wire [WIDTH-1:0] data_35;
    assign data_35 = (((data_34 >>> 8) & ((data_34 - 5) + (data_34 & 7))) & (data_34 <<< 4));
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((data_35 >>> 10) >>> ((data_35 | 9) ^ (data_35 >>> 4)));
    wire [WIDTH-1:0] data_37;
    assign data_37 = (((data_36 | 5) | ((data_36 | 8) + 2)) ^ 2);
    wire [WIDTH-1:0] data_38;
    assign data_38 = (((data_37 | 5) | ((data_37 | 8) + 2)) ^ 2);
    wire [WIDTH-1:0] data_39;
    assign data_39 = (((data_38 | 5) | ((data_38 | 8) + 2)) ^ 2);
    wire [WIDTH-1:0] data_40;
    assign data_40 = (((data_39 | 5) | ((data_39 | 8) + 2)) ^ 2);
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((data_40 - 2) + (data_40 ^ 2));
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((data_41 - 2) >>> 1);
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 | 10) & (data_42 ^ 5));
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((data_43 | 10) & (data_43 ^ 5));
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((data_44 | 10) & (data_44 ^ 5));
    wire [WIDTH-1:0] data_46;
    assign data_46 = (((data_45 & 1) - 8) + (((data_45 + 1) - 2) + ((data_45 & 5) - 2)));
    wire [WIDTH-1:0] data_47;
    assign data_47 = ((((data_46 ^ 4) <<< (data_46 >>> 10)) & 10) + 2);
    wire [WIDTH-1:0] data_48;
    assign data_48 = ((((data_47 ^ 4) <<< (data_47 >>> 10)) & 10) + 2);
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((((data_48 ^ 4) <<< (data_48 >>> 10)) & 10) + 2);
    wire [WIDTH-1:0] data_50;
    assign data_50 = ((((data_49 ^ 4) <<< (data_49 >>> 10)) & 10) + 2);
    wire [WIDTH-1:0] data_51;
    assign data_51 = (((data_50 >>> 4) | (data_50 <<< 6)) ^ ((data_50 <<< 8) ^ (data_50 & 2)));
    wire [WIDTH-1:0] data_52;
    assign data_52 = ((((data_51 | 3) - (data_51 ^ 7)) ^ 1) + (data_51 ^ 5));
    wire [WIDTH-1:0] data_53;
    assign data_53 = (((data_52 | 2) + 10) <<< 10);
    wire [WIDTH-1:0] data_54;
    assign data_54 = ((((data_53 & 6) | (data_53 >>> 6)) - 10) >>> ((data_53 - 10) | 9));
    wire [WIDTH-1:0] data_55;
    assign data_55 = (((data_54 >>> 7) - (data_54 ^ 5)) + (((data_54 ^ 9) + 2) & 3));
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((data_55 + 6) ^ 8);
    wire [WIDTH-1:0] data_57;
    assign data_57 = (((data_56 + 8) <<< 3) + (data_56 ^ 9));
    wire [WIDTH-1:0] data_58;
    assign data_58 = ((data_57 + 1) - (((data_57 - 7) ^ (data_57 ^ 3)) <<< 8));
    wire [WIDTH-1:0] data_59;
    assign data_59 = ((data_58 & 3) ^ 4);
    wire [WIDTH-1:0] data_60;
    assign data_60 = ((data_59 & 3) ^ 4);
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((((data_60 - 7) >>> 4) <<< (data_60 ^ 3)) & 2);
    wire [WIDTH-1:0] data_62;
    assign data_62 = ((((data_61 | 10) >>> 2) ^ (data_61 | 8)) & 1);
    wire [WIDTH-1:0] data_63;
    assign data_63 = ((data_62 - 2) + ((data_62 | 4) >>> 4));
    wire [WIDTH-1:0] data_64;
    assign data_64 = ((((data_63 | 7) & (data_63 & 6)) - 1) <<< (((data_63 ^ 2) & (data_63 ^ 7)) | 6));
    wire [WIDTH-1:0] data_65;
    assign data_65 = ((((data_64 <<< 9) + (data_64 >>> 2)) - 8) - 2);
    wire [WIDTH-1:0] data_66;
    assign data_66 = ((((data_65 >>> 9) - 10) & ((data_65 | 7) & 3)) & 2);
    wire [WIDTH-1:0] data_67;
    assign data_67 = ((((data_66 >>> 9) - 10) & ((data_66 | 7) & 3)) & 2);
    wire [WIDTH-1:0] data_68;
    assign data_68 = ((((data_67 >>> 9) - 10) & ((data_67 | 7) & 3)) & 2);
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((((data_68 >>> 9) - 10) & ((data_68 | 7) & 3)) & 2);
    wire [WIDTH-1:0] data_70;
    assign data_70 = ((data_69 >>> 9) + 4);
    wire [WIDTH-1:0] data_71;
    assign data_71 = ((data_70 >>> 9) + 4);
    wire [WIDTH-1:0] data_72;
    assign data_72 = ((data_71 >>> 9) + 4);
    wire [WIDTH-1:0] data_73;
    assign data_73 = ((data_72 >>> 9) + 4);
    wire [WIDTH-1:0] data_74;
    assign data_74 = ((data_73 <<< 10) <<< 8);
    wire [WIDTH-1:0] data_75;
    assign data_75 = ((data_74 <<< 10) <<< 8);
    wire [WIDTH-1:0] data_76;
    assign data_76 = ((data_75 <<< 10) <<< 8);
    wire [WIDTH-1:0] data_77;
    assign data_77 = ((((data_76 >>> 5) >>> (data_76 >>> 2)) | ((data_76 - 4) <<< 9)) & 6);
    wire [WIDTH-1:0] data_78;
    assign data_78 = ((((data_77 >>> 5) >>> (data_77 >>> 2)) | ((data_77 - 4) <<< 9)) & 6);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_78, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_3-1,"`define WIDTH 128
`define DEPTH 88

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 5) <<< 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 8) - ((in_data >>> 10) & (in_data | 8)));
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 7) & 8) >>> (in_data ^ 7));
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 4) <<< 8);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 8) | (((in_data - 9) - 3) <<< (in_data + 8)));
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 3) - 10);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 3) >>> 10) ^ (data[i] <<< 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 3) <<< ((in_data ^ 4) - (in_data & 7))) <<< (in_data + 10));
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 4) ^ 10) + (in_data ^ 9));
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 10) + 6) ^ 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 10) & 4) ^ ((in_data & 1) + (in_data & 1)));
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 2) - 1) + ((in_data ^ 7) & 1)) <<< 9);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) + 10) - 2);
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) & ((in_data >>> 4) ^ (in_data + 1))) - ((in_data >>> 1) <<< 5));
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 10) ^ (in_data & 2)) | 8);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 6) & 6) - 5) >>> 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 5) ^ 7) & 5);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 9) ^ (in_data - 4)) >>> 8);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 5) - ((data[i] <<< 6) & 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 3) <<< 4);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 6) - ((data[i] >>> 10) >>> (data[i] & 8))) | ((data[i] - 10) & ((data[i] & 3) - (data[i] <<< 7))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 2) <<< 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 4) ^ 1) & ((in_data | 2) ^ 3));
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 1) >>> 1) + 1) & 10);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 1) & 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 9) & ((in_data ^ 3) ^ ((in_data | 9) - 9)));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 9) + 3) | (in_data | 10)) & ((in_data <<< 9) & 7));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 7) + 5) <<< 2) + 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 8) & ((in_data ^ 8) >>> (in_data ^ 3))) | 9);
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 2) >>> (in_data | 2));
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 5) + 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 4) ^ (data[i] + 4)) ^ (data[i] <<< 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 10) ^ ((in_data & 2) - (in_data <<< 6))) | 9);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 4) & ((data[i] ^ 10) + (data[i] ^ 2))) + (data[i] | 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 6) <<< ((in_data + 3) ^ (in_data <<< 4))) & ((in_data + 8) <<< 9));
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 7) <<< (data[i] | 8)) & ((data[i] >>> 3) >>> (data[i] ^ 1))) + 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 4) <<< (data[i] & 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 9) & 1) ^ 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 4) | 7) ^ 2);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 5) >>> 7) >>> 10);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 6) + (in_data - 2)) - ((in_data - 5) ^ (in_data | 8))) >>> ((in_data & 10) - ((in_data ^ 4) >>> (in_data | 10))));
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 2) & 6);
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 5) & 6);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) | 9) & 10);
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 3) <<< 4) | 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 4) + (data[i] >>> 9)) | 10) <<< 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 10) | 2);
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 4) - 2) ^ 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 8) ^ 2);
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 10) ^ 9) ^ ((in_data >>> 3) | (in_data >>> 1))) + (in_data <<< 8));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[79]),
        .in_vld(ready[79]),
        .out_data(data[80]), 
        .out_vld(ready[80])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[80]),
        .in_vld(ready[80]),
        .out_data(data[81]), 
        .out_vld(ready[81])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[81]),
        .in_vld(ready[81]),
        .out_data(data[85]), 
        .out_vld(ready[85])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[85]),
        .in_vld(ready[85]),
        .out_data(data[86]), 
        .out_vld(ready[86])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[86]),
        .in_vld(ready[86]),
        .out_data(data[88]), 
        .out_vld(ready[88])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 88

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data | 2) | 9) & 10);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 >>> 6) - ((data_0 >>> 10) >>> (data_0 & 8))) | ((data_0 - 10) & ((data_0 & 3) - (data_0 <<< 7))));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 >>> 6) - ((data_1 >>> 10) >>> (data_1 & 8))) | ((data_1 - 10) & ((data_1 & 3) - (data_1 <<< 7))));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 >>> 6) - ((data_2 >>> 10) >>> (data_2 & 8))) | ((data_2 - 10) & ((data_2 & 3) - (data_2 <<< 7))));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 >>> 6) - ((data_3 >>> 10) >>> (data_3 & 8))) | ((data_3 - 10) & ((data_3 & 3) - (data_3 <<< 7))));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 ^ 9) ^ (data_4 - 4)) >>> 8);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 >>> 8) & ((data_5 ^ 8) >>> (data_5 ^ 3))) | 9);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 >>> 5) <<< 7);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 >>> 5) <<< 7);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 >>> 5) <<< 7);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 >>> 5) <<< 7);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 & 10) & 4) ^ ((data_10 & 1) + (data_10 & 1)));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((((data_11 - 6) & 6) - 5) >>> 1);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((((data_12 - 6) & 6) - 5) >>> 1);
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 + 4) <<< (data_13 & 1));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 + 4) <<< (data_14 & 1));
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 & 10) | 2);
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((data_16 + 4) & ((data_16 ^ 10) + (data_16 ^ 2))) + (data_16 | 8));
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((data_17 + 4) & ((data_17 ^ 10) + (data_17 ^ 2))) + (data_17 | 8));
    wire [WIDTH-1:0] data_19;
    assign data_19 = (((data_18 + 4) & ((data_18 ^ 10) + (data_18 ^ 2))) + (data_18 | 8));
    wire [WIDTH-1:0] data_20;
    assign data_20 = (((data_19 + 4) & ((data_19 ^ 10) + (data_19 ^ 2))) + (data_19 | 8));
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((data_20 >>> 8) - ((data_20 >>> 10) & (data_20 | 8)));
    wire [WIDTH-1:0] data_22;
    assign data_22 = (((data_21 | 9) & 1) ^ 4);
    wire [WIDTH-1:0] data_23;
    assign data_23 = (((data_22 | 9) & 1) ^ 4);
    wire [WIDTH-1:0] data_24;
    assign data_24 = (((data_23 | 9) & 1) ^ 4);
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((data_24 <<< 3) <<< 4);
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((data_25 >>> 9) & ((data_25 ^ 3) ^ ((data_25 | 9) - 9)));
    wire [WIDTH-1:0] data_27;
    assign data_27 = (((data_26 ^ 2) & ((data_26 >>> 4) ^ (data_26 + 1))) - ((data_26 >>> 1) <<< 5));
    wire [WIDTH-1:0] data_28;
    assign data_28 = (((data_27 + 4) ^ 10) + (data_27 ^ 9));
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((((data_28 & 2) - 1) + ((data_28 ^ 7) & 1)) <<< 9);
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((((data_29 >>> 7) <<< (data_29 | 8)) & ((data_29 >>> 3) >>> (data_29 ^ 1))) + 9);
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((((data_30 >>> 7) <<< (data_30 | 8)) & ((data_30 >>> 3) >>> (data_30 ^ 1))) + 9);
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((((data_31 >>> 7) <<< (data_31 | 8)) & ((data_31 >>> 3) >>> (data_31 ^ 1))) + 9);
    wire [WIDTH-1:0] data_33;
    assign data_33 = ((((data_32 >>> 7) <<< (data_32 | 8)) & ((data_32 >>> 3) >>> (data_32 ^ 1))) + 9);
    wire [WIDTH-1:0] data_34;
    assign data_34 = (((data_33 & 3) <<< 4) | 6);
    wire [WIDTH-1:0] data_35;
    assign data_35 = (((data_34 & 3) <<< 4) | 6);
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((data_35 & 2) & 6);
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((((data_36 & 1) >>> 1) + 1) & 10);
    wire [WIDTH-1:0] data_38;
    assign data_38 = (((data_37 ^ 5) ^ 7) & 5);
    wire [WIDTH-1:0] data_39;
    assign data_39 = (((data_38 >>> 7) & 8) >>> (data_38 ^ 7));
    wire [WIDTH-1:0] data_40;
    assign data_40 = ((data_39 ^ 5) & 6);
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((((data_40 <<< 10) ^ 9) ^ ((data_40 >>> 3) | (data_40 >>> 1))) + (data_40 <<< 8));
    wire [WIDTH-1:0] data_42;
    assign data_42 = (((data_41 + 4) ^ 1) & ((data_41 | 2) ^ 3));
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 - 5) + 6);
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((data_43 - 5) + 6);
    wire [WIDTH-1:0] data_45;
    assign data_45 = (((data_44 & 10) + 6) ^ 1);
    wire [WIDTH-1:0] data_46;
    assign data_46 = (((data_45 & 10) + 6) ^ 1);
    wire [WIDTH-1:0] data_47;
    assign data_47 = (((data_46 & 10) + 6) ^ 1);
    wire [WIDTH-1:0] data_48;
    assign data_48 = ((data_47 - 8) | (((data_47 - 9) - 3) <<< (data_47 + 8)));
    wire [WIDTH-1:0] data_49;
    assign data_49 = (((data_48 - 4) | 7) ^ 2);
    wire [WIDTH-1:0] data_50;
    assign data_50 = (((data_49 <<< 10) ^ ((data_49 & 2) - (data_49 <<< 6))) | 9);
    wire [WIDTH-1:0] data_51;
    assign data_51 = (((data_50 >>> 4) + 10) - 2);
    wire [WIDTH-1:0] data_52;
    assign data_52 = (((data_51 ^ 3) <<< ((data_51 ^ 4) - (data_51 & 7))) <<< (data_51 + 10));
    wire [WIDTH-1:0] data_53;
    assign data_53 = ((data_52 - 8) ^ 2);
    wire [WIDTH-1:0] data_54;
    assign data_54 = ((data_53 ^ 4) <<< 8);
    wire [WIDTH-1:0] data_55;
    assign data_55 = ((((data_54 & 7) + 5) <<< 2) + 2);
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((((data_55 & 7) + 5) <<< 2) + 2);
    wire [WIDTH-1:0] data_57;
    assign data_57 = ((((data_56 & 7) + 5) <<< 2) + 2);
    wire [WIDTH-1:0] data_58;
    assign data_58 = ((((data_57 & 9) + 3) | (data_57 | 10)) & ((data_57 <<< 9) & 7));
    wire [WIDTH-1:0] data_59;
    assign data_59 = ((data_58 ^ 5) - ((data_58 <<< 6) & 4));
    wire [WIDTH-1:0] data_60;
    assign data_60 = ((data_59 ^ 5) - ((data_59 <<< 6) & 4));
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((data_60 ^ 5) - ((data_60 <<< 6) & 4));
    wire [WIDTH-1:0] data_62;
    assign data_62 = ((data_61 ^ 5) - ((data_61 <<< 6) & 4));
    wire [WIDTH-1:0] data_63;
    assign data_63 = ((((data_62 - 6) + (data_62 - 2)) - ((data_62 - 5) ^ (data_62 | 8))) >>> ((data_62 & 10) - ((data_62 ^ 4) >>> (data_62 | 10))));
    wire [WIDTH-1:0] data_64;
    assign data_64 = ((data_63 ^ 3) - 10);
    wire [WIDTH-1:0] data_65;
    assign data_65 = ((((data_64 & 4) + (data_64 >>> 9)) | 10) <<< 6);
    wire [WIDTH-1:0] data_66;
    assign data_66 = ((((data_65 & 4) + (data_65 >>> 9)) | 10) <<< 6);
    wire [WIDTH-1:0] data_67;
    assign data_67 = ((((data_66 & 4) + (data_66 >>> 9)) | 10) <<< 6);
    wire [WIDTH-1:0] data_68;
    assign data_68 = ((((data_67 & 4) + (data_67 >>> 9)) | 10) <<< 6);
    wire [WIDTH-1:0] data_69;
    assign data_69 = (((data_68 ^ 4) ^ (data_68 + 4)) ^ (data_68 <<< 6));
    wire [WIDTH-1:0] data_70;
    assign data_70 = (((data_69 ^ 4) ^ (data_69 + 4)) ^ (data_69 <<< 6));
    wire [WIDTH-1:0] data_71;
    assign data_71 = (((data_70 ^ 4) ^ (data_70 + 4)) ^ (data_70 <<< 6));
    wire [WIDTH-1:0] data_72;
    assign data_72 = (((data_71 ^ 4) - 2) ^ 7);
    wire [WIDTH-1:0] data_73;
    assign data_73 = (((data_72 ^ 4) - 2) ^ 7);
    wire [WIDTH-1:0] data_74;
    assign data_74 = ((data_73 | 2) >>> (data_73 | 2));
    wire [WIDTH-1:0] data_75;
    assign data_75 = ((data_74 - 1) & 5);
    wire [WIDTH-1:0] data_76;
    assign data_76 = ((data_75 - 1) & 5);
    wire [WIDTH-1:0] data_77;
    assign data_77 = ((data_76 - 1) & 5);
    wire [WIDTH-1:0] data_78;
    assign data_78 = ((data_77 - 1) & 5);
    wire [WIDTH-1:0] data_79;
    assign data_79 = (((data_78 - 5) >>> 7) >>> 10);
    wire [WIDTH-1:0] data_80;
    assign data_80 = (((data_79 - 10) ^ (data_79 & 2)) | 8);
    wire [WIDTH-1:0] data_81;
    assign data_81 = (((data_80 ^ 3) >>> 10) ^ (data_80 <<< 1));
    wire [WIDTH-1:0] data_82;
    assign data_82 = (((data_81 ^ 3) >>> 10) ^ (data_81 <<< 1));
    wire [WIDTH-1:0] data_83;
    assign data_83 = (((data_82 ^ 3) >>> 10) ^ (data_82 <<< 1));
    wire [WIDTH-1:0] data_84;
    assign data_84 = (((data_83 ^ 3) >>> 10) ^ (data_83 <<< 1));
    wire [WIDTH-1:0] data_85;
    assign data_85 = (((data_84 >>> 6) <<< ((data_84 + 3) ^ (data_84 <<< 4))) & ((data_84 + 8) <<< 9));
    wire [WIDTH-1:0] data_86;
    assign data_86 = ((data_85 ^ 2) <<< 5);
    wire [WIDTH-1:0] data_87;
    assign data_87 = ((data_86 ^ 2) <<< 5);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_87, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_3-2,"`define WIDTH 128
`define DEPTH 78

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 10) & (in_data - 5)) <<< ((in_data <<< 3) >>> ((in_data >>> 9) ^ 7)));
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 5) <<< (data[i] - 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 5) & 8);
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) + ((in_data & 1) + 9)) >>> ((in_data >>> 1) + ((in_data >>> 5) ^ (in_data <<< 7))));
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 9) & 10) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 8) + 10) - 6);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 6) >>> (in_data ^ 10));
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 8) & ((in_data <<< 6) + 7));
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 4) >>> (data[i] ^ 9)) | 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 6) ^ 2) & 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 2) & 5) <<< (data[i] >>> 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 7) | (in_data - 5)) & 2) ^ 10);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 5) + ((in_data & 2) - (in_data + 1))) & ((in_data + 1) + (in_data + 5)));
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) + (in_data - 1)) - (in_data >>> 8));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 6) | 1);
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 1) <<< 1) >>> 7);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 9) ^ (data[i] - 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 7) | 4) & 7);
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 4) - (data[i] ^ 6)) & ((data[i] <<< 8) <<< 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 9) <<< 7) ^ 1) >>> ((in_data <<< 2) <<< ((in_data - 6) ^ 2)));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 10) <<< 1) >>> ((in_data ^ 9) | 10)) >>> 4);
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 7) <<< 7);
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 9) - 8) ^ ((in_data + 3) >>> (in_data >>> 8)));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 9) - (in_data & 2)) | 7) >>> 9);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 6) - 6) >>> 1);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 9) | ((in_data <<< 5) + ((in_data | 7) - 7)));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 3) & 9) >>> 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 9) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 7) - 10);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 1) | ((data[i] - 10) ^ 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 6) <<< 1) ^ (in_data ^ 5));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 6) >>> 8) >>> 5);
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) <<< 7);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 1) <<< (in_data <<< 7)) >>> 9);
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 6) | 4) >>> 4) | ((data[i] + 5) - 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 3) <<< 10) + 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 7) ^ 5);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 3) & 4) + (in_data <<< 10)) <<< (in_data | 2));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 10) <<< 9);
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 10) - ((in_data - 7) & 5)) >>> 9);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 7) & ((in_data + 9) | (in_data | 2)));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 3) - (in_data <<< 7)) >>> ((in_data - 6) >>> (in_data + 2))) | 2);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 1) + 9) >>> (in_data + 6));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 1) | ((in_data >>> 1) >>> 1));
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 4) + 10) <<< (in_data <<< 10)) + 5);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 8) <<< (data[i] - 10)) ^ 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 2) & ((in_data + 2) <<< ((in_data | 3) <<< 4)));
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 9) ^ 2) >>> (data[i] ^ 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 9) | (in_data - 1)) <<< 7);
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 5) ^ 4) ^ 4) + 2);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[77]),
        .in_vld(ready[77]),
        .out_data(data[78]), 
        .out_vld(ready[78])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 78

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data & 6) >>> 8) >>> 5);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 & 3) - (data_0 <<< 7)) >>> ((data_0 - 6) >>> (data_0 + 2))) | 2);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 ^ 10) <<< 9);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 >>> 1) + 9) >>> (data_2 + 6));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 | 7) & ((data_3 + 9) | (data_3 | 2)));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 + 1) | ((data_4 - 10) ^ 4));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 + 1) | ((data_5 - 10) ^ 4));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 + 1) | ((data_6 - 10) ^ 4));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 + 1) | ((data_7 - 10) ^ 4));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 + 6) ^ 2) & 1);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 + 6) ^ 2) & 1);
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 & 9) | ((data_10 <<< 5) + ((data_10 | 7) - 7)));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((((data_11 <<< 9) - (data_11 & 2)) | 7) >>> 9);
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 & 8) + 10) - 6);
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 & 9) - 8) ^ ((data_13 + 3) >>> (data_13 >>> 8)));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((((data_14 + 3) & 4) + (data_14 <<< 10)) <<< (data_14 | 2));
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((data_15 & 9) ^ 2) >>> (data_15 ^ 10));
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((data_16 & 9) ^ 2) >>> (data_16 ^ 10));
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((data_17 & 9) ^ 2) >>> (data_17 ^ 10));
    wire [WIDTH-1:0] data_19;
    assign data_19 = (((data_18 & 9) ^ 2) >>> (data_18 ^ 10));
    wire [WIDTH-1:0] data_20;
    assign data_20 = (((data_19 + 2) & 5) <<< (data_19 >>> 2));
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((data_20 + 2) & 5) <<< (data_20 >>> 2));
    wire [WIDTH-1:0] data_22;
    assign data_22 = (((data_21 + 2) & 5) <<< (data_21 >>> 2));
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((((data_22 + 7) | (data_22 - 5)) & 2) ^ 10);
    wire [WIDTH-1:0] data_24;
    assign data_24 = (((data_23 - 10) - ((data_23 - 7) & 5)) >>> 9);
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((data_24 | 5) & 8);
    wire [WIDTH-1:0] data_26;
    assign data_26 = (((data_25 >>> 5) + ((data_25 & 2) - (data_25 + 1))) & ((data_25 + 1) + (data_25 + 5)));
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((((data_26 ^ 9) <<< 7) ^ 1) >>> ((data_26 <<< 2) <<< ((data_26 - 6) ^ 2)));
    wire [WIDTH-1:0] data_28;
    assign data_28 = (((data_27 | 9) & 10) | 7);
    wire [WIDTH-1:0] data_29;
    assign data_29 = (((data_28 | 9) & 10) | 7);
    wire [WIDTH-1:0] data_30;
    assign data_30 = (((data_29 | 9) & 10) | 7);
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((data_30 & 7) - 10);
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((data_31 - 6) | 1);
    wire [WIDTH-1:0] data_33;
    assign data_33 = (((data_32 >>> 9) | (data_32 - 1)) <<< 7);
    wire [WIDTH-1:0] data_34;
    assign data_34 = ((data_33 <<< 9) >>> 3);
    wire [WIDTH-1:0] data_35;
    assign data_35 = ((data_34 <<< 9) >>> 3);
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((data_35 <<< 9) >>> 3);
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((data_36 <<< 9) >>> 3);
    wire [WIDTH-1:0] data_38;
    assign data_38 = ((data_37 ^ 1) | ((data_37 >>> 1) >>> 1));
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((data_38 <<< 7) <<< 7);
    wire [WIDTH-1:0] data_40;
    assign data_40 = (((data_39 <<< 9) + (data_39 - 1)) - (data_39 >>> 8));
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((data_40 & 6) >>> (data_40 ^ 10));
    wire [WIDTH-1:0] data_42;
    assign data_42 = (((data_41 ^ 4) >>> (data_41 ^ 9)) | 3);
    wire [WIDTH-1:0] data_43;
    assign data_43 = (((data_42 ^ 4) >>> (data_42 ^ 9)) | 3);
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((data_43 | 7) ^ 5);
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((((data_44 | 4) + 10) <<< (data_44 <<< 10)) + 5);
    wire [WIDTH-1:0] data_46;
    assign data_46 = ((data_45 + 9) ^ (data_45 - 8));
    wire [WIDTH-1:0] data_47;
    assign data_47 = ((data_46 + 9) ^ (data_46 - 8));
    wire [WIDTH-1:0] data_48;
    assign data_48 = ((data_47 + 9) ^ (data_47 - 8));
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((data_48 + 9) ^ (data_48 - 8));
    wire [WIDTH-1:0] data_50;
    assign data_50 = (((data_49 <<< 1) <<< 1) >>> 7);
    wire [WIDTH-1:0] data_51;
    assign data_51 = ((((data_50 + 6) | 4) >>> 4) | ((data_50 + 5) - 7));
    wire [WIDTH-1:0] data_52;
    assign data_52 = ((((data_51 + 6) | 4) >>> 4) | ((data_51 + 5) - 7));
    wire [WIDTH-1:0] data_53;
    assign data_53 = ((data_52 >>> 2) & ((data_52 + 2) <<< ((data_52 | 3) <<< 4)));
    wire [WIDTH-1:0] data_54;
    assign data_54 = (((data_53 >>> 3) <<< 10) + 8);
    wire [WIDTH-1:0] data_55;
    assign data_55 = (((data_54 >>> 3) <<< 10) + 8);
    wire [WIDTH-1:0] data_56;
    assign data_56 = (((data_55 - 4) - (data_55 ^ 6)) & ((data_55 <<< 8) <<< 5));
    wire [WIDTH-1:0] data_57;
    assign data_57 = (((data_56 - 4) - (data_56 ^ 6)) & ((data_56 <<< 8) <<< 5));
    wire [WIDTH-1:0] data_58;
    assign data_58 = (((data_57 - 4) - (data_57 ^ 6)) & ((data_57 <<< 8) <<< 5));
    wire [WIDTH-1:0] data_59;
    assign data_59 = (((data_58 - 4) - (data_58 ^ 6)) & ((data_58 <<< 8) <<< 5));
    wire [WIDTH-1:0] data_60;
    assign data_60 = ((data_59 & 8) & ((data_59 <<< 6) + 7));
    wire [WIDTH-1:0] data_61;
    assign data_61 = (((data_60 + 6) <<< 1) ^ (data_60 ^ 5));
    wire [WIDTH-1:0] data_62;
    assign data_62 = (((data_61 ^ 10) & (data_61 - 5)) <<< ((data_61 <<< 3) >>> ((data_61 >>> 9) ^ 7)));
    wire [WIDTH-1:0] data_63;
    assign data_63 = (((data_62 & 6) - 6) >>> 1);
    wire [WIDTH-1:0] data_64;
    assign data_64 = (((data_63 >>> 4) + ((data_63 & 1) + 9)) >>> ((data_63 >>> 1) + ((data_63 >>> 5) ^ (data_63 <<< 7))));
    wire [WIDTH-1:0] data_65;
    assign data_65 = (((data_64 <<< 7) | 4) & 7);
    wire [WIDTH-1:0] data_66;
    assign data_66 = ((((data_65 + 5) ^ 4) ^ 4) + 2);
    wire [WIDTH-1:0] data_67;
    assign data_67 = ((((data_66 & 10) <<< 1) >>> ((data_66 ^ 9) | 10)) >>> 4);
    wire [WIDTH-1:0] data_68;
    assign data_68 = ((data_67 | 5) <<< (data_67 - 7));
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((data_68 | 5) <<< (data_68 - 7));
    wire [WIDTH-1:0] data_70;
    assign data_70 = (((data_69 & 1) <<< (data_69 <<< 7)) >>> 9);
    wire [WIDTH-1:0] data_71;
    assign data_71 = (((data_70 & 8) <<< (data_70 - 10)) ^ 9);
    wire [WIDTH-1:0] data_72;
    assign data_72 = (((data_71 & 8) <<< (data_71 - 10)) ^ 9);
    wire [WIDTH-1:0] data_73;
    assign data_73 = (((data_72 & 8) <<< (data_72 - 10)) ^ 9);
    wire [WIDTH-1:0] data_74;
    assign data_74 = (((data_73 & 8) <<< (data_73 - 10)) ^ 9);
    wire [WIDTH-1:0] data_75;
    assign data_75 = (((data_74 | 3) & 9) >>> 9);
    wire [WIDTH-1:0] data_76;
    assign data_76 = (((data_75 | 3) & 9) >>> 9);
    wire [WIDTH-1:0] data_77;
    assign data_77 = ((data_76 + 7) <<< 7);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_77, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_3-3,"`define WIDTH 128
`define DEPTH 83

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 5) & 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 9) & 3) ^ 3) >>> (((data[i] + 10) | (data[i] | 2)) >>> 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 3) + 2) + (data[i] <<< 3)) ^ 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 9) - 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 6) ^ ((in_data ^ 5) >>> 4));
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 9) | 9) | 10) - (((data[i] <<< 9) & 8) | ((data[i] & 8) >>> (data[i] ^ 5))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 4) - 10) - 8);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 5) + (in_data - 4)) <<< ((in_data + 6) ^ ((in_data | 10) | (in_data & 5))));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 2) ^ (data[i] ^ 10)) >>> (data[i] - 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) <<< (in_data ^ 3)) | (in_data ^ 2));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 8) ^ 3) | ((in_data + 4) & (in_data >>> 3)));
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 3) >>> (data[i] + 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 1) >>> ((data[i] <<< 3) <<< (data[i] <<< 8))) - (((data[i] & 9) ^ 3) | (data[i] | 2)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 2) <<< 2);
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 1) | 1) <<< (in_data <<< 5));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 7) <<< (data[i] <<< 8)) ^ 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) + 7) + ((in_data + 3) <<< 10));
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 1) <<< (data[i] ^ 10)) >>> 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 7) ^ ((in_data + 9) ^ 6));
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 3) >>> 9) >>> 6) | 7);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) + 1) + ((in_data >>> 8) >>> 8));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 2) | ((in_data - 4) | 6)) >>> 7);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 5) + 9) | 3) >>> (((in_data + 1) & (in_data - 7)) - 10));
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 2) & 4) - ((in_data ^ 9) + 2));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 5) <<< 8) ^ (data[i] + 6)) >>> 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 2) - (in_data & 10));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 5) & 8);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 1) + 6) <<< 4);
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 4) ^ (in_data & 4));
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 9) <<< (in_data + 9)) >>> (in_data - 9)) | 7);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 4) - ((in_data >>> 10) | (in_data & 8))) + ((in_data >>> 4) | ((in_data ^ 3) + 1)));
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 5) - ((data[i] ^ 6) + 2)) | ((data[i] >>> 4) & ((data[i] - 1) - (data[i] ^ 7))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 1) ^ ((data[i] & 1) - ((data[i] >>> 6) - 9)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 2) & (data[i] ^ 4)) - 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 9) <<< ((in_data - 2) & (in_data ^ 3)));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 2) - 5);
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 5) >>> 10) + ((in_data & 8) <<< (in_data <<< 4))) + 9);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 5) - 4);
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 2) + 4) ^ 4) - 5);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 6) ^ 2) <<< 9);
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) | 8) & ((in_data & 4) ^ ((in_data | 2) - (in_data - 6))));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 4) <<< ((in_data ^ 9) | (in_data ^ 8))) | ((in_data ^ 7) - 7));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 6) & 2) - 2);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 6) <<< 6);
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 3) | (in_data >>> 10)) ^ 3) + ((in_data <<< 9) + 2));
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 1) | 8) | ((in_data & 7) - (in_data - 10)));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 6) & (data[i] - 1)) | (((data[i] + 9) <<< 10) & 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 4) >>> (data[i] ^ 7)) + (((data[i] >>> 9) >>> 3) & 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 2) - (in_data - 2));
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 3) & (in_data + 5)) | 3);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[77]),
        .in_vld(ready[77]),
        .out_data(data[78]), 
        .out_vld(ready[78])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[78]),
        .in_vld(ready[78]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[79]),
        .in_vld(ready[79]),
        .out_data(data[80]), 
        .out_vld(ready[80])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[80]),
        .in_vld(ready[80]),
        .out_data(data[81]), 
        .out_vld(ready[81])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[81]),
        .in_vld(ready[81]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[82]),
        .in_vld(ready[82]),
        .out_data(data[83]), 
        .out_vld(ready[83])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 83

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data >>> 5) & 8);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 <<< 5) <<< 8) ^ (data_0 + 6)) >>> 5);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 <<< 5) <<< 8) ^ (data_1 + 6)) >>> 5);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 <<< 5) <<< 8) ^ (data_2 + 6)) >>> 5);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 <<< 5) <<< 8) ^ (data_3 + 6)) >>> 5);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 | 6) & (data_4 - 1)) | (((data_4 + 9) <<< 10) & 1));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 | 6) & (data_5 - 1)) | (((data_5 + 9) <<< 10) & 1));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 | 6) & (data_6 - 1)) | (((data_6 + 9) <<< 10) & 1));
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 | 6) & (data_7 - 1)) | (((data_7 + 9) <<< 10) & 1));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 & 7) <<< (data_8 <<< 8)) ^ 3);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 & 7) <<< (data_9 <<< 8)) ^ 3);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 & 7) <<< (data_10 <<< 8)) ^ 3);
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 ^ 6) <<< (data_11 ^ 3)) | (data_11 ^ 2));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 ^ 6) ^ ((data_12 ^ 5) >>> 4));
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 <<< 6) & 2) - 2);
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((data_14 ^ 1) + 6) <<< 4);
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 + 2) - (data_15 & 10));
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((data_16 & 4) - ((data_16 >>> 10) | (data_16 & 8))) + ((data_16 >>> 4) | ((data_16 ^ 3) + 1)));
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((data_17 ^ 2) ^ (data_17 ^ 10)) >>> (data_17 - 9));
    wire [WIDTH-1:0] data_19;
    assign data_19 = (((data_18 ^ 2) ^ (data_18 ^ 10)) >>> (data_18 - 9));
    wire [WIDTH-1:0] data_20;
    assign data_20 = (((data_19 ^ 2) ^ (data_19 ^ 10)) >>> (data_19 - 9));
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((data_20 ^ 2) ^ (data_20 ^ 10)) >>> (data_20 - 9));
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((data_21 | 6) <<< 6);
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 <<< 1) ^ ((data_22 & 1) - ((data_22 >>> 6) - 9)));
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 <<< 1) ^ ((data_23 & 1) - ((data_23 >>> 6) - 9)));
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((data_24 <<< 1) ^ ((data_24 & 1) - ((data_24 >>> 6) - 9)));
    wire [WIDTH-1:0] data_26;
    assign data_26 = (((data_25 - 1) | 1) <<< (data_25 <<< 5));
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((((data_26 >>> 9) | 9) | 10) - (((data_26 <<< 9) & 8) | ((data_26 & 8) >>> (data_26 ^ 5))));
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((((data_27 >>> 9) | 9) | 10) - (((data_27 <<< 9) & 8) | ((data_27 & 8) >>> (data_27 ^ 5))));
    wire [WIDTH-1:0] data_29;
    assign data_29 = (((data_28 >>> 4) | 8) & ((data_28 & 4) ^ ((data_28 | 2) - (data_28 - 6))));
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((data_29 >>> 9) - 2);
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((data_30 >>> 9) - 2);
    wire [WIDTH-1:0] data_32;
    assign data_32 = (((data_31 ^ 2) + 1) + ((data_31 >>> 8) >>> 8));
    wire [WIDTH-1:0] data_33;
    assign data_33 = ((((data_32 ^ 5) >>> 10) + ((data_32 & 8) <<< (data_32 <<< 4))) + 9);
    wire [WIDTH-1:0] data_34;
    assign data_34 = (((data_33 >>> 1) <<< (data_33 ^ 10)) >>> 8);
    wire [WIDTH-1:0] data_35;
    assign data_35 = (((data_34 >>> 1) <<< (data_34 ^ 10)) >>> 8);
    wire [WIDTH-1:0] data_36;
    assign data_36 = (((data_35 + 6) ^ 2) <<< 9);
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((((data_36 + 3) + 2) + (data_36 <<< 3)) ^ 6);
    wire [WIDTH-1:0] data_38;
    assign data_38 = ((((data_37 + 3) + 2) + (data_37 <<< 3)) ^ 6);
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((((data_38 + 3) + 2) + (data_38 <<< 3)) ^ 6);
    wire [WIDTH-1:0] data_40;
    assign data_40 = ((((data_39 + 3) + 2) + (data_39 <<< 3)) ^ 6);
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((((data_40 | 9) <<< (data_40 + 9)) >>> (data_40 - 9)) | 7);
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((data_41 & 3) >>> (data_41 + 10));
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 & 3) >>> (data_42 + 10));
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((data_43 & 3) >>> (data_43 + 10));
    wire [WIDTH-1:0] data_45;
    assign data_45 = (((data_44 - 2) | ((data_44 - 4) | 6)) >>> 7);
    wire [WIDTH-1:0] data_46;
    assign data_46 = ((((data_45 + 3) | (data_45 >>> 10)) ^ 3) + ((data_45 <<< 9) + 2));
    wire [WIDTH-1:0] data_47;
    assign data_47 = (((data_46 <<< 4) >>> (data_46 ^ 7)) + (((data_46 >>> 9) >>> 3) & 3));
    wire [WIDTH-1:0] data_48;
    assign data_48 = (((data_47 <<< 4) >>> (data_47 ^ 7)) + (((data_47 >>> 9) >>> 3) & 3));
    wire [WIDTH-1:0] data_49;
    assign data_49 = (((data_48 <<< 4) >>> (data_48 ^ 7)) + (((data_48 >>> 9) >>> 3) & 3));
    wire [WIDTH-1:0] data_50;
    assign data_50 = (((data_49 <<< 4) >>> (data_49 ^ 7)) + (((data_49 >>> 9) >>> 3) & 3));
    wire [WIDTH-1:0] data_51;
    assign data_51 = (((data_50 >>> 5) - ((data_50 ^ 6) + 2)) | ((data_50 >>> 4) & ((data_50 - 1) - (data_50 ^ 7))));
    wire [WIDTH-1:0] data_52;
    assign data_52 = (((data_51 >>> 5) - ((data_51 ^ 6) + 2)) | ((data_51 >>> 4) & ((data_51 - 1) - (data_51 ^ 7))));
    wire [WIDTH-1:0] data_53;
    assign data_53 = (((data_52 >>> 5) - ((data_52 ^ 6) + 2)) | ((data_52 >>> 4) & ((data_52 - 1) - (data_52 ^ 7))));
    wire [WIDTH-1:0] data_54;
    assign data_54 = (((data_53 >>> 5) - ((data_53 ^ 6) + 2)) | ((data_53 >>> 4) & ((data_53 - 1) - (data_53 ^ 7))));
    wire [WIDTH-1:0] data_55;
    assign data_55 = (((data_54 <<< 2) & 4) - ((data_54 ^ 9) + 2));
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((data_55 ^ 4) ^ (data_55 & 4));
    wire [WIDTH-1:0] data_57;
    assign data_57 = (((data_56 + 2) & (data_56 ^ 4)) - 4);
    wire [WIDTH-1:0] data_58;
    assign data_58 = (((data_57 + 2) & (data_57 ^ 4)) - 4);
    wire [WIDTH-1:0] data_59;
    assign data_59 = ((data_58 - 5) - 4);
    wire [WIDTH-1:0] data_60;
    assign data_60 = (((data_59 | 1) >>> ((data_59 <<< 3) <<< (data_59 <<< 8))) - (((data_59 & 9) ^ 3) | (data_59 | 2)));
    wire [WIDTH-1:0] data_61;
    assign data_61 = (((data_60 | 1) >>> ((data_60 <<< 3) <<< (data_60 <<< 8))) - (((data_60 & 9) ^ 3) | (data_60 | 2)));
    wire [WIDTH-1:0] data_62;
    assign data_62 = (((data_61 | 1) >>> ((data_61 <<< 3) <<< (data_61 <<< 8))) - (((data_61 & 9) ^ 3) | (data_61 | 2)));
    wire [WIDTH-1:0] data_63;
    assign data_63 = (((data_62 | 1) >>> ((data_62 <<< 3) <<< (data_62 <<< 8))) - (((data_62 & 9) ^ 3) | (data_62 | 2)));
    wire [WIDTH-1:0] data_64;
    assign data_64 = ((data_63 | 9) <<< ((data_63 - 2) & (data_63 ^ 3)));
    wire [WIDTH-1:0] data_65;
    assign data_65 = ((data_64 <<< 2) <<< 2);
    wire [WIDTH-1:0] data_66;
    assign data_66 = ((data_65 & 2) - 5);
    wire [WIDTH-1:0] data_67;
    assign data_67 = (((data_66 <<< 4) - 10) - 8);
    wire [WIDTH-1:0] data_68;
    assign data_68 = ((((data_67 | 5) + 9) | 3) >>> (((data_67 + 1) & (data_67 - 7)) - 10));
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((((data_68 ^ 9) & 3) ^ 3) >>> (((data_68 + 10) | (data_68 | 2)) >>> 9));
    wire [WIDTH-1:0] data_70;
    assign data_70 = ((((data_69 ^ 9) & 3) ^ 3) >>> (((data_69 + 10) | (data_69 | 2)) >>> 9));
    wire [WIDTH-1:0] data_71;
    assign data_71 = (((data_70 + 7) + 7) + ((data_70 + 3) <<< 10));
    wire [WIDTH-1:0] data_72;
    assign data_72 = (((data_71 | 5) + (data_71 - 4)) <<< ((data_71 + 6) ^ ((data_71 | 10) | (data_71 & 5))));
    wire [WIDTH-1:0] data_73;
    assign data_73 = ((((data_72 + 2) + 4) ^ 4) - 5);
    wire [WIDTH-1:0] data_74;
    assign data_74 = ((data_73 | 5) & 1);
    wire [WIDTH-1:0] data_75;
    assign data_75 = ((data_74 | 5) & 1);
    wire [WIDTH-1:0] data_76;
    assign data_76 = ((data_75 ^ 7) ^ ((data_75 + 9) ^ 6));
    wire [WIDTH-1:0] data_77;
    assign data_77 = (((data_76 & 4) <<< ((data_76 ^ 9) | (data_76 ^ 8))) | ((data_76 ^ 7) - 7));
    wire [WIDTH-1:0] data_78;
    assign data_78 = ((data_77 >>> 2) - (data_77 - 2));
    wire [WIDTH-1:0] data_79;
    assign data_79 = (((data_78 >>> 1) | 8) | ((data_78 & 7) - (data_78 - 10)));
    wire [WIDTH-1:0] data_80;
    assign data_80 = ((((data_79 | 3) >>> 9) >>> 6) | 7);
    wire [WIDTH-1:0] data_81;
    assign data_81 = (((data_80 | 8) ^ 3) | ((data_80 + 4) & (data_80 >>> 3)));
    wire [WIDTH-1:0] data_82;
    assign data_82 = (((data_81 >>> 3) & (data_81 + 5)) | 3);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_82, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_3-4,"`define WIDTH 128
`define DEPTH 77

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 4) + 3) >>> 10) - ((data[i] | 8) - (data[i] - 1)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 2) <<< (in_data ^ 9));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 1) >>> 5) & ((in_data <<< 10) >>> (in_data & 2)));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 1) ^ 1) <<< ((in_data - 3) >>> (in_data - 3)));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 6) & 5) - 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 7) <<< (in_data - 4)) + 9) <<< (in_data & 5));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) & (in_data >>> 6)) <<< ((in_data | 2) | 3));
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 8) ^ 5) | (data[i] ^ 4)) + (data[i] <<< 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 6) & 4) + (data[i] - 5)) <<< (((data[i] <<< 9) <<< 1) <<< (data[i] <<< 6)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 8) <<< 1) >>> 10) ^ 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 3) | 6);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 5) <<< 1);
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) <<< 7) + (in_data <<< 9));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 7) & 10) + ((in_data - 5) >>> 4));
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 1) & ((in_data & 2) <<< 8)) + 10);
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 6) ^ (in_data | 3));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 1) - (data[i] - 5)) ^ 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 5) + 3);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 10) & 9) >>> 1) <<< 9);
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 10) ^ 1);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 10) ^ 5) >>> 6);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 1) >>> 9) | 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 8) - 4);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 5) - (data[i] <<< 10)) >>> (data[i] - 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 9) >>> (in_data | 8)) >>> ((in_data ^ 9) & (in_data - 4)));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 2) | ((in_data >>> 6) | (in_data >>> 6))) + (in_data ^ 7));
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 6) + (in_data ^ 3)) <<< ((in_data + 4) + ((in_data | 8) - (in_data <<< 4))));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 4) - (in_data - 2)) | (in_data + 6));
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 3) ^ (in_data >>> 8));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 5) >>> (((in_data - 6) <<< (in_data ^ 9)) - ((in_data >>> 2) | 4)));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 1) >>> ((in_data + 5) | (in_data & 1)));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 1) ^ (in_data & 3)) - ((in_data - 5) ^ 4));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 2) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 7) + 9) - ((in_data | 6) ^ 10)) >>> 10);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 9) + 3) - (((data[i] ^ 5) | (data[i] - 6)) ^ 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 4) + (in_data <<< 9)) - 7);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) <<< ((in_data | 9) <<< ((in_data - 9) ^ 4)));
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 3) <<< (in_data - 3)) + (in_data - 2)) >>> 1);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 6) <<< 7) - (data[i] ^ 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 10) <<< (in_data >>> 9)) >>> (in_data <<< 4)) - (((in_data >>> 3) <<< (in_data - 2)) ^ 4));
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 6) | ((in_data >>> 1) >>> 4));
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 1) - 1) & 10) - 5);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 6) | 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 2) ^ 9) + (in_data + 10));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 10) >>> (data[i] <<< 2)) ^ 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 5) & (data[i] >>> 2)) | 2) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 10) <<< 10);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 3) >>> (in_data | 8)) <<< (in_data + 2)) | (in_data <<< 2));
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 2) >>> (in_data + 4));
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 3) <<< 4) | (in_data | 4)) & (in_data - 9));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 77

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data & 1) >>> 9) | 5);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 & 1) >>> 9) | 5);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 & 1) >>> 9) | 5);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 & 1) >>> 9) | 5);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 <<< 7) <<< (data_3 - 4)) + 9) <<< (data_3 & 5));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 - 9) + 3) - (((data_4 ^ 5) | (data_4 - 6)) ^ 1));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 - 9) + 3) - (((data_5 ^ 5) | (data_5 - 6)) ^ 1));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 & 3) <<< ((data_6 | 9) <<< ((data_6 - 9) ^ 4)));
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 >>> 2) ^ 9) + (data_7 + 10));
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 >>> 10) <<< 10);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 <<< 1) >>> ((data_9 + 5) | (data_9 & 1)));
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 + 6) & 5) - 9);
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 + 6) & 5) - 9);
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 + 6) & 5) - 9);
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 & 1) ^ 1) <<< ((data_13 - 3) >>> (data_13 - 3)));
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((data_14 ^ 2) & (data_14 >>> 6)) <<< ((data_14 | 2) | 3));
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((data_15 ^ 1) >>> 5) & ((data_15 <<< 10) >>> (data_15 & 2)));
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((((data_16 & 3) >>> (data_16 | 8)) <<< (data_16 + 2)) | (data_16 <<< 2));
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((((data_17 & 6) & 4) + (data_17 - 5)) <<< (((data_17 <<< 9) <<< 1) <<< (data_17 <<< 6)));
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((((data_18 & 6) & 4) + (data_18 - 5)) <<< (((data_18 <<< 9) <<< 1) <<< (data_18 <<< 6)));
    wire [WIDTH-1:0] data_20;
    assign data_20 = (((data_19 ^ 9) >>> (data_19 | 8)) >>> ((data_19 ^ 9) & (data_19 - 4)));
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((((data_20 <<< 3) <<< (data_20 - 3)) + (data_20 - 2)) >>> 1);
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((((data_21 - 10) <<< (data_21 >>> 9)) >>> (data_21 <<< 4)) - (((data_21 >>> 3) <<< (data_21 - 2)) ^ 4));
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 <<< 2) >>> (data_22 + 4));
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((((data_23 & 3) <<< 4) | (data_23 | 4)) & (data_23 - 9));
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((data_24 ^ 5) >>> (((data_24 - 6) <<< (data_24 ^ 9)) - ((data_24 >>> 2) | 4)));
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((((data_25 + 8) <<< 1) >>> 10) ^ 10);
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((((data_26 + 8) <<< 1) >>> 10) ^ 10);
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((((data_27 + 8) <<< 1) >>> 10) ^ 10);
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((((data_28 + 10) & 9) >>> 1) <<< 9);
    wire [WIDTH-1:0] data_30;
    assign data_30 = (((data_29 <<< 1) ^ (data_29 & 3)) - ((data_29 - 5) ^ 4));
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((((data_30 + 7) + 9) - ((data_30 | 6) ^ 10)) >>> 10);
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((data_31 ^ 6) | ((data_31 >>> 1) >>> 4));
    wire [WIDTH-1:0] data_33;
    assign data_33 = (((data_32 - 1) - (data_32 - 5)) ^ 8);
    wire [WIDTH-1:0] data_34;
    assign data_34 = (((data_33 - 1) - (data_33 - 5)) ^ 8);
    wire [WIDTH-1:0] data_35;
    assign data_35 = (((data_34 - 1) - (data_34 - 5)) ^ 8);
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((((data_35 >>> 8) ^ 5) | (data_35 ^ 4)) + (data_35 <<< 6));
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((((data_36 >>> 8) ^ 5) | (data_36 ^ 4)) + (data_36 <<< 6));
    wire [WIDTH-1:0] data_38;
    assign data_38 = ((((data_37 >>> 8) ^ 5) | (data_37 ^ 4)) + (data_37 <<< 6));
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((data_38 ^ 6) | 8);
    wire [WIDTH-1:0] data_40;
    assign data_40 = ((data_39 ^ 6) | 8);
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((data_40 ^ 6) | 8);
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((data_41 ^ 6) | 8);
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((((data_42 | 4) + 3) >>> 10) - ((data_42 | 8) - (data_42 - 1)));
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((((data_43 | 4) + 3) >>> 10) - ((data_43 | 8) - (data_43 - 1)));
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((((data_44 | 4) + 3) >>> 10) - ((data_44 | 8) - (data_44 - 1)));
    wire [WIDTH-1:0] data_46;
    assign data_46 = (((data_45 >>> 5) - (data_45 <<< 10)) >>> (data_45 - 1));
    wire [WIDTH-1:0] data_47;
    assign data_47 = (((data_46 >>> 5) - (data_46 <<< 10)) >>> (data_46 - 1));
    wire [WIDTH-1:0] data_48;
    assign data_48 = (((data_47 >>> 5) - (data_47 <<< 10)) >>> (data_47 - 1));
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((data_48 ^ 2) >>> 3);
    wire [WIDTH-1:0] data_50;
    assign data_50 = ((data_49 ^ 2) >>> 3);
    wire [WIDTH-1:0] data_51;
    assign data_51 = ((data_50 ^ 2) >>> 3);
    wire [WIDTH-1:0] data_52;
    assign data_52 = (((data_51 + 8) <<< 7) + (data_51 <<< 9));
    wire [WIDTH-1:0] data_53;
    assign data_53 = ((data_52 & 8) - 4);
    wire [WIDTH-1:0] data_54;
    assign data_54 = ((data_53 - 5) + 3);
    wire [WIDTH-1:0] data_55;
    assign data_55 = (((data_54 + 2) | ((data_54 >>> 6) | (data_54 >>> 6))) + (data_54 ^ 7));
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((((data_55 <<< 5) & (data_55 >>> 2)) | 2) >>> 3);
    wire [WIDTH-1:0] data_57;
    assign data_57 = ((((data_56 <<< 5) & (data_56 >>> 2)) | 2) >>> 3);
    wire [WIDTH-1:0] data_58;
    assign data_58 = ((((data_57 <<< 5) & (data_57 >>> 2)) | 2) >>> 3);
    wire [WIDTH-1:0] data_59;
    assign data_59 = ((data_58 - 10) ^ 1);
    wire [WIDTH-1:0] data_60;
    assign data_60 = (((data_59 + 4) - (data_59 - 2)) | (data_59 + 6));
    wire [WIDTH-1:0] data_61;
    assign data_61 = (((data_60 + 10) ^ 5) >>> 6);
    wire [WIDTH-1:0] data_62;
    assign data_62 = ((((data_61 ^ 1) - 1) & 10) - 5);
    wire [WIDTH-1:0] data_63;
    assign data_63 = ((data_62 + 3) | 6);
    wire [WIDTH-1:0] data_64;
    assign data_64 = ((data_63 | 3) ^ (data_63 >>> 8));
    wire [WIDTH-1:0] data_65;
    assign data_65 = (((data_64 | 4) + (data_64 <<< 9)) - 7);
    wire [WIDTH-1:0] data_66;
    assign data_66 = ((data_65 <<< 6) ^ (data_65 | 3));
    wire [WIDTH-1:0] data_67;
    assign data_67 = ((data_66 >>> 2) <<< (data_66 ^ 9));
    wire [WIDTH-1:0] data_68;
    assign data_68 = (((data_67 >>> 7) & 10) + ((data_67 - 5) >>> 4));
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((data_68 ^ 5) <<< 1);
    wire [WIDTH-1:0] data_70;
    assign data_70 = (((data_69 ^ 6) <<< 7) - (data_69 ^ 2));
    wire [WIDTH-1:0] data_71;
    assign data_71 = (((data_70 ^ 6) <<< 7) - (data_70 ^ 2));
    wire [WIDTH-1:0] data_72;
    assign data_72 = (((data_71 <<< 6) + (data_71 ^ 3)) <<< ((data_71 + 4) + ((data_71 | 8) - (data_71 <<< 4))));
    wire [WIDTH-1:0] data_73;
    assign data_73 = (((data_72 + 10) >>> (data_72 <<< 2)) ^ 5);
    wire [WIDTH-1:0] data_74;
    assign data_74 = (((data_73 + 10) >>> (data_73 <<< 2)) ^ 5);
    wire [WIDTH-1:0] data_75;
    assign data_75 = (((data_74 + 10) >>> (data_74 <<< 2)) ^ 5);
    wire [WIDTH-1:0] data_76;
    assign data_76 = (((data_75 - 1) & ((data_75 & 2) <<< 8)) + 10);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_76, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_3-5,"`define WIDTH 128
`define DEPTH 79

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 8) <<< (in_data <<< 8));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 10) ^ 8);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 7) - 6) <<< (in_data | 1));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 8) + ((in_data ^ 6) | (in_data >>> 4))) <<< 4);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 8) ^ (in_data ^ 2)) <<< ((in_data + 2) >>> (in_data | 9)));
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) & (in_data | 4)) | (in_data & 9));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 7) + (in_data | 8)) <<< 9) >>> ((in_data | 8) + (in_data <<< 2)));
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 4) ^ ((in_data <<< 5) + 3));
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 6) - (data[i] - 9)) + (data[i] >>> 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 10) <<< ((in_data - 1) <<< (in_data <<< 5)));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 9) - (in_data | 9)) ^ 4) | (((in_data ^ 5) & (in_data - 3)) >>> (in_data & 1)));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 7) <<< (data[i] >>> 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 7) | 4);
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 3) >>> (in_data ^ 4));
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 1) | (in_data <<< 10)) ^ 1);
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 9) >>> 6) + 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 9) <<< (in_data & 9)) + (in_data - 3)) | 10);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 10) <<< 7) + ((in_data <<< 3) - 3));
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 8) ^ ((data[i] >>> 9) & (data[i] <<< 7)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 2) <<< ((data[i] <<< 6) ^ 7)) >>> 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 4) & 4) <<< 3);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 5) | 4) ^ 1) | (((in_data >>> 3) <<< (in_data ^ 10)) <<< ((in_data ^ 3) ^ (in_data <<< 2))));
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 2) <<< (data[i] - 8)) - 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 2) - ((in_data & 6) - (in_data | 1))) & ((in_data - 7) ^ (in_data | 6)));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 8) >>> (in_data - 4)) & ((in_data + 5) - 5)) & (in_data >>> 9));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 7) <<< ((data[i] >>> 9) + (data[i] <<< 1))) ^ 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 4) & (in_data & 8));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) - 10) ^ ((in_data & 9) <<< 9));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 8) - 8) & ((data[i] - 7) & (data[i] | 1))) & 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 3) >>> 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 8) + 4) >>> 7);
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 5) <<< (data[i] | 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 8) & ((data[i] & 9) & (data[i] | 6))) | 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 8) ^ 5) - (data[i] - 3)) - (data[i] >>> 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 6) & (data[i] + 9)) >>> ((data[i] <<< 8) + 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 9) & 3) + ((data[i] ^ 7) - 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 1) <<< 4);
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 4) & 3);
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 7) ^ (in_data + 4)) + 6);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 1) - (in_data | 1)) + 9);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) >>> ((in_data <<< 2) - 5)) >>> 9);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 4) & 4) & (((in_data & 7) & 8) | 2));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 7) + 6) >>> (data[i] ^ 9)) >>> (((data[i] - 6) & 10) <<< 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 9) + 3) <<< 9);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 6) >>> 6) >>> (in_data >>> 8)) | 9);
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 9) & (in_data >>> 4)) ^ ((in_data & 4) ^ (in_data - 6)));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 1) & (in_data - 6)) & 9);
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 5) | 7) ^ 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 7) >>> 3);
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 3) ^ 10) + 5);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[77]),
        .in_vld(ready[77]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 79

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data | 7) >>> 3);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 & 2) - ((data_0 & 6) - (data_0 | 1))) & ((data_0 - 7) ^ (data_0 | 6)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 + 4) & 4) <<< 3);
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 + 7) + (data_2 | 8)) <<< 9) >>> ((data_2 | 8) + (data_2 <<< 2)));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 <<< 7) <<< ((data_3 >>> 9) + (data_3 <<< 1))) ^ 7);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 <<< 7) <<< ((data_4 >>> 9) + (data_4 <<< 1))) ^ 7);
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 - 1) & (data_5 - 6)) & 9);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 & 7) <<< (data_6 >>> 1));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 & 7) <<< (data_7 >>> 1));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 & 8) ^ (data_8 ^ 2)) <<< ((data_8 + 2) >>> (data_8 | 9)));
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((((data_9 <<< 7) + 6) >>> (data_9 ^ 9)) >>> (((data_9 - 6) & 10) <<< 3));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((((data_10 <<< 7) + 6) >>> (data_10 ^ 9)) >>> (((data_10 - 6) & 10) <<< 3));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((((data_11 <<< 7) + 6) >>> (data_11 ^ 9)) >>> (((data_11 - 6) & 10) <<< 3));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((((data_12 <<< 7) + 6) >>> (data_12 ^ 9)) >>> (((data_12 - 6) & 10) <<< 3));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 >>> 3) >>> 2);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 >>> 3) >>> 2);
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((data_15 & 6) & (data_15 + 9)) >>> ((data_15 <<< 8) + 10));
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((data_16 & 6) & (data_16 + 9)) >>> ((data_16 <<< 8) + 10));
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((data_17 ^ 6) - (data_17 - 9)) + (data_17 >>> 10));
    wire [WIDTH-1:0] data_19;
    assign data_19 = (((data_18 ^ 6) - (data_18 - 9)) + (data_18 >>> 10));
    wire [WIDTH-1:0] data_20;
    assign data_20 = (((data_19 ^ 6) - (data_19 - 9)) + (data_19 >>> 10));
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((data_20 | 2) <<< ((data_20 <<< 6) ^ 7)) >>> 10);
    wire [WIDTH-1:0] data_22;
    assign data_22 = (((data_21 | 2) <<< ((data_21 <<< 6) ^ 7)) >>> 10);
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((((data_22 + 9) - (data_22 | 9)) ^ 4) | (((data_22 ^ 5) & (data_22 - 3)) >>> (data_22 & 1)));
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 - 7) | 4);
    wire [WIDTH-1:0] data_25;
    assign data_25 = (((data_24 + 2) <<< (data_24 - 8)) - 4);
    wire [WIDTH-1:0] data_26;
    assign data_26 = (((data_25 + 2) <<< (data_25 - 8)) - 4);
    wire [WIDTH-1:0] data_27;
    assign data_27 = (((data_26 + 2) <<< (data_26 - 8)) - 4);
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((data_27 | 4) ^ ((data_27 <<< 5) + 3));
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((data_28 & 10) <<< ((data_28 - 1) <<< (data_28 <<< 5)));
    wire [WIDTH-1:0] data_30;
    assign data_30 = (((data_29 - 9) & (data_29 >>> 4)) ^ ((data_29 & 4) ^ (data_29 - 6)));
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((data_30 | 8) ^ ((data_30 >>> 9) & (data_30 <<< 7)));
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((data_31 | 8) ^ ((data_31 >>> 9) & (data_31 <<< 7)));
    wire [WIDTH-1:0] data_33;
    assign data_33 = ((data_32 | 8) ^ ((data_32 >>> 9) & (data_32 <<< 7)));
    wire [WIDTH-1:0] data_34;
    assign data_34 = ((data_33 | 8) ^ ((data_33 >>> 9) & (data_33 <<< 7)));
    wire [WIDTH-1:0] data_35;
    assign data_35 = (((data_34 <<< 10) <<< 7) + ((data_34 <<< 3) - 3));
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((((data_35 >>> 8) - 8) & ((data_35 - 7) & (data_35 | 1))) & 2);
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((((data_36 >>> 8) - 8) & ((data_36 - 7) & (data_36 | 1))) & 2);
    wire [WIDTH-1:0] data_38;
    assign data_38 = (((data_37 ^ 3) ^ 10) + 5);
    wire [WIDTH-1:0] data_39;
    assign data_39 = (((data_38 <<< 8) & ((data_38 & 9) & (data_38 | 6))) | 5);
    wire [WIDTH-1:0] data_40;
    assign data_40 = (((data_39 <<< 8) & ((data_39 & 9) & (data_39 | 6))) | 5);
    wire [WIDTH-1:0] data_41;
    assign data_41 = (((data_40 <<< 8) & ((data_40 & 9) & (data_40 | 6))) | 5);
    wire [WIDTH-1:0] data_42;
    assign data_42 = (((data_41 <<< 8) & ((data_41 & 9) & (data_41 | 6))) | 5);
    wire [WIDTH-1:0] data_43;
    assign data_43 = (((data_42 >>> 8) + ((data_42 ^ 6) | (data_42 >>> 4))) <<< 4);
    wire [WIDTH-1:0] data_44;
    assign data_44 = (((data_43 + 5) | 7) ^ 7);
    wire [WIDTH-1:0] data_45;
    assign data_45 = (((data_44 + 5) | 7) ^ 7);
    wire [WIDTH-1:0] data_46;
    assign data_46 = (((data_45 + 5) | 7) ^ 7);
    wire [WIDTH-1:0] data_47;
    assign data_47 = ((((data_46 ^ 6) >>> 6) >>> (data_46 >>> 8)) | 9);
    wire [WIDTH-1:0] data_48;
    assign data_48 = (((data_47 <<< 7) - 6) <<< (data_47 | 1));
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((((data_48 | 5) | 4) ^ 1) | (((data_48 >>> 3) <<< (data_48 ^ 10)) <<< ((data_48 ^ 3) ^ (data_48 <<< 2))));
    wire [WIDTH-1:0] data_50;
    assign data_50 = ((data_49 - 10) ^ 8);
    wire [WIDTH-1:0] data_51;
    assign data_51 = (((data_50 ^ 9) >>> 6) + 8);
    wire [WIDTH-1:0] data_52;
    assign data_52 = (((data_51 ^ 9) >>> 6) + 8);
    wire [WIDTH-1:0] data_53;
    assign data_53 = (((data_52 | 9) & 3) + ((data_52 ^ 7) - 5));
    wire [WIDTH-1:0] data_54;
    assign data_54 = (((data_53 | 9) & 3) + ((data_53 ^ 7) - 5));
    wire [WIDTH-1:0] data_55;
    assign data_55 = (((data_54 | 9) & 3) + ((data_54 ^ 7) - 5));
    wire [WIDTH-1:0] data_56;
    assign data_56 = (((data_55 | 9) & 3) + ((data_55 ^ 7) - 5));
    wire [WIDTH-1:0] data_57;
    assign data_57 = ((data_56 & 1) <<< 4);
    wire [WIDTH-1:0] data_58;
    assign data_58 = ((((data_57 ^ 9) <<< (data_57 & 9)) + (data_57 - 3)) | 10);
    wire [WIDTH-1:0] data_59;
    assign data_59 = ((data_58 | 5) <<< (data_58 | 10));
    wire [WIDTH-1:0] data_60;
    assign data_60 = ((data_59 | 5) <<< (data_59 | 10));
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((data_60 | 5) <<< (data_60 | 10));
    wire [WIDTH-1:0] data_62;
    assign data_62 = ((data_61 | 5) <<< (data_61 | 10));
    wire [WIDTH-1:0] data_63;
    assign data_63 = ((((data_62 >>> 8) >>> (data_62 - 4)) & ((data_62 + 5) - 5)) & (data_62 >>> 9));
    wire [WIDTH-1:0] data_64;
    assign data_64 = ((data_63 <<< 8) <<< (data_63 <<< 8));
    wire [WIDTH-1:0] data_65;
    assign data_65 = (((data_64 >>> 4) & (data_64 | 4)) | (data_64 & 9));
    wire [WIDTH-1:0] data_66;
    assign data_66 = (((data_65 & 1) | (data_65 <<< 10)) ^ 1);
    wire [WIDTH-1:0] data_67;
    assign data_67 = ((data_66 <<< 4) & (data_66 & 8));
    wire [WIDTH-1:0] data_68;
    assign data_68 = (((data_67 <<< 3) >>> ((data_67 <<< 2) - 5)) >>> 9);
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((data_68 >>> 4) & 3);
    wire [WIDTH-1:0] data_70;
    assign data_70 = (((data_69 & 9) + 3) <<< 9);
    wire [WIDTH-1:0] data_71;
    assign data_71 = ((data_70 - 3) >>> (data_70 ^ 4));
    wire [WIDTH-1:0] data_72;
    assign data_72 = (((data_71 | 6) - 10) ^ ((data_71 & 9) <<< 9));
    wire [WIDTH-1:0] data_73;
    assign data_73 = (((data_72 - 4) & 4) & (((data_72 & 7) & 8) | 2));
    wire [WIDTH-1:0] data_74;
    assign data_74 = (((data_73 ^ 8) + 4) >>> 7);
    wire [WIDTH-1:0] data_75;
    assign data_75 = (((data_74 | 1) - (data_74 | 1)) + 9);
    wire [WIDTH-1:0] data_76;
    assign data_76 = (((data_75 & 7) ^ (data_75 + 4)) + 6);
    wire [WIDTH-1:0] data_77;
    assign data_77 = ((((data_76 - 8) ^ 5) - (data_76 - 3)) - (data_76 >>> 7));
    wire [WIDTH-1:0] data_78;
    assign data_78 = ((((data_77 - 8) ^ 5) - (data_77 - 3)) - (data_77 >>> 7));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_78, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_4-0,"`define WIDTH 128
`define DEPTH 73

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 5) - 7);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 7) | 4) + ((((in_data >>> 4) <<< (in_data & 10)) <<< 10) <<< ((in_data - 4) ^ 6)));
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 4) ^ (in_data ^ 7)) - 10) | ((in_data & 9) <<< 5));
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 9) - 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 4) & (in_data ^ 9)) <<< 1) + (in_data ^ 2));
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) - 8) <<< 3);
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 10) - 9) <<< (in_data + 1));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 6) ^ 4) ^ 4) ^ ((in_data - 2) & 4));
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 8) & 8) >>> (in_data + 3)) & 4) | 9);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 1) & (data[i] <<< 5)) <<< ((data[i] >>> 3) + 2)) - 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 10) ^ (in_data | 7)) ^ (in_data >>> 7));
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 9) + 5) ^ 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 4) <<< (data[i] + 4)) ^ ((data[i] | 9) <<< (data[i] | 4)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 2) - 7) - (in_data & 7)) - 7);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 9) - 4) & 1) >>> 9);
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 8) >>> (in_data ^ 4)) & (in_data - 6));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 10) ^ 3) >>> 7) <<< ((in_data >>> 4) & 9));
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 7) | ((in_data >>> 8) >>> 4));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 9) & 7) >>> 6) - 5);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 7) <<< 1) >>> 6) | 3) & 8);
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 4) >>> (in_data & 7));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 6) ^ 7) ^ 9);
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 4) & (in_data >>> 1)) - (((in_data - 1) - (in_data & 7)) | (in_data & 2)));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 4) <<< 10) ^ (((in_data - 2) - 4) + (in_data + 7)));
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 1) & 9) ^ (((in_data | 4) | (in_data - 3)) >>> 3)) | 8);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 10) | (((data[i] >>> 3) | (data[i] ^ 2)) | 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 6) | 5) & (in_data & 3)) + (in_data ^ 2)) & ((((in_data + 4) <<< 7) | 6) | (((in_data | 8) ^ (in_data + 5)) | 3)));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 3) - (((data[i] >>> 6) - (data[i] <<< 2)) ^ ((data[i] ^ 5) & (data[i] ^ 7))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 1) - 6) | (in_data ^ 10));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 9) + ((in_data <<< 10) >>> 3));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 5) <<< (data[i] | 5)) ^ ((data[i] >>> 8) ^ 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 2) & 8) >>> (((in_data | 10) - 4) >>> 7));
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] - 2) ^ (data[i] - 7)) & 4) <<< ((data[i] & 1) <<< (data[i] - 9))) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) | 4) & 5);
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 10) >>> (in_data & 10)) >>> 5);
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 1) >>> ((data[i] ^ 4) ^ 3)) | (((data[i] <<< 8) + ((data[i] ^ 5) <<< 7)) & ((data[i] | 4) ^ 5)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 1) & ((in_data + 3) & 10));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 3) ^ ((in_data - 2) >>> 3)) >>> 7) - 5);
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 2) + 8) + (in_data ^ 1));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 8) + 10);
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 1) + ((((data[i] - 2) <<< 3) & 10) ^ 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] ^ 2) <<< (data[i] ^ 1)) >>> 5) - ((data[i] >>> 5) - 5)) ^ ((data[i] >>> 4) ^ ((data[i] & 7) + 4)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 7) | 7);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 4) + 10) - ((in_data >>> 3) - 3)) | (in_data | 8)) >>> ((((in_data >>> 7) - 5) + 4) ^ (in_data + 8)));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 6) & ((data[i] ^ 2) ^ 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 6) - 5) + (((data[i] ^ 4) | 8) ^ 6)) & 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 10) | 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 5) <<< 10) + 10) & (((in_data >>> 8) - 9) | 4));
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 10) - 2) + (in_data & 2)) - 7);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data | 4) - 2) + ((in_data ^ 2) - (in_data ^ 10))) - (in_data + 1)) + (((in_data - 10) + (in_data ^ 10)) | ((in_data & 9) <<< (in_data - 5))));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 73

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data - 6) ^ 7) ^ 9);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 & 4) & (data_0 ^ 9)) <<< 1) + (data_0 ^ 2));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((data_1 | 9) + ((data_1 <<< 10) >>> 3));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((data_2 <<< 3) - (((data_2 >>> 6) - (data_2 <<< 2)) ^ ((data_2 ^ 5) & (data_2 ^ 7))));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 <<< 3) - (((data_3 >>> 6) - (data_3 <<< 2)) ^ ((data_3 ^ 5) & (data_3 ^ 7))));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 <<< 3) - (((data_4 >>> 6) - (data_4 <<< 2)) ^ ((data_4 ^ 5) & (data_4 ^ 7))));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 + 10) ^ (data_5 | 7)) ^ (data_5 >>> 7));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 + 4) <<< 10) ^ (((data_6 - 2) - 4) + (data_6 + 7)));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 ^ 8) + 10);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 <<< 10) | (((data_8 >>> 3) | (data_8 ^ 2)) | 9));
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 <<< 10) | (((data_9 >>> 3) | (data_9 ^ 2)) | 9));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 <<< 10) | (((data_10 >>> 3) | (data_10 ^ 2)) | 9));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((((data_11 <<< 6) - 5) + (((data_11 ^ 4) | 8) ^ 6)) & 10);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((((data_12 <<< 6) - 5) + (((data_12 ^ 4) | 8) ^ 6)) & 10);
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((((data_13 - 7) <<< 1) >>> 6) | 3) & 8);
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((data_14 - 10) >>> (data_14 & 10)) >>> 5);
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((((data_15 ^ 9) - 4) & 1) >>> 9);
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((((data_16 <<< 8) & 8) >>> (data_16 + 3)) & 4) | 9);
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((data_17 ^ 1) + ((((data_17 - 2) <<< 3) & 10) ^ 2));
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 ^ 1) + ((((data_18 - 2) <<< 3) & 10) ^ 2));
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((data_19 ^ 1) + ((((data_19 - 2) <<< 3) & 10) ^ 2));
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((data_20 - 7) | 7);
    wire [WIDTH-1:0] data_22;
    assign data_22 = (((data_21 ^ 8) >>> (data_21 ^ 4)) & (data_21 - 6));
    wire [WIDTH-1:0] data_23;
    assign data_23 = (((data_22 <<< 4) & (data_22 >>> 1)) - (((data_22 - 1) - (data_22 & 7)) | (data_22 & 2)));
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((((data_23 & 1) & (data_23 <<< 5)) <<< ((data_23 >>> 3) + 2)) - 3);
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((((data_24 & 1) & (data_24 <<< 5)) <<< ((data_24 >>> 3) + 2)) - 3);
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((((data_25 & 1) & (data_25 <<< 5)) <<< ((data_25 >>> 3) + 2)) - 3);
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((((data_26 ^ 10) ^ 3) >>> 7) <<< ((data_26 >>> 4) & 9));
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((((data_27 <<< 5) <<< 10) + 10) & (((data_27 >>> 8) - 9) | 4));
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((data_28 <<< 5) - 7);
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((((data_29 <<< 3) ^ ((data_29 - 2) >>> 3)) >>> 7) - 5);
    wire [WIDTH-1:0] data_31;
    assign data_31 = (((data_30 | 4) <<< (data_30 + 4)) ^ ((data_30 | 9) <<< (data_30 | 4)));
    wire [WIDTH-1:0] data_32;
    assign data_32 = (((data_31 | 4) <<< (data_31 + 4)) ^ ((data_31 | 9) <<< (data_31 | 4)));
    wire [WIDTH-1:0] data_33;
    assign data_33 = (((data_32 | 4) <<< (data_32 + 4)) ^ ((data_32 | 9) <<< (data_32 | 4)));
    wire [WIDTH-1:0] data_34;
    assign data_34 = ((data_33 <<< 10) | 10);
    wire [WIDTH-1:0] data_35;
    assign data_35 = ((data_34 <<< 10) | 10);
    wire [WIDTH-1:0] data_36;
    assign data_36 = (((data_35 ^ 5) <<< (data_35 | 5)) ^ ((data_35 >>> 8) ^ 8));
    wire [WIDTH-1:0] data_37;
    assign data_37 = (((data_36 ^ 5) <<< (data_36 | 5)) ^ ((data_36 >>> 8) ^ 8));
    wire [WIDTH-1:0] data_38;
    assign data_38 = (((((data_37 - 2) ^ (data_37 - 7)) & 4) <<< ((data_37 & 1) <<< (data_37 - 9))) | 7);
    wire [WIDTH-1:0] data_39;
    assign data_39 = (((((data_38 - 2) ^ (data_38 - 7)) & 4) <<< ((data_38 & 1) <<< (data_38 - 9))) | 7);
    wire [WIDTH-1:0] data_40;
    assign data_40 = (((((data_39 - 2) ^ (data_39 - 7)) & 4) <<< ((data_39 & 1) <<< (data_39 - 9))) | 7);
    wire [WIDTH-1:0] data_41;
    assign data_41 = (((data_40 - 7) | 4) + ((((data_40 >>> 4) <<< (data_40 & 10)) <<< 10) <<< ((data_40 - 4) ^ 6)));
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((((data_41 & 1) & 9) ^ (((data_41 | 4) | (data_41 - 3)) >>> 3)) | 8);
    wire [WIDTH-1:0] data_43;
    assign data_43 = (((((data_42 | 4) - 2) + ((data_42 ^ 2) - (data_42 ^ 10))) - (data_42 + 1)) + (((data_42 - 10) + (data_42 ^ 10)) | ((data_42 & 9) <<< (data_42 - 5))));
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((((data_43 & 9) & 7) >>> 6) - 5);
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((data_44 - 7) | ((data_44 >>> 8) >>> 4));
    wire [WIDTH-1:0] data_46;
    assign data_46 = (((data_45 | 6) | 4) & 5);
    wire [WIDTH-1:0] data_47;
    assign data_47 = (((data_46 >>> 1) - 6) | (data_46 ^ 10));
    wire [WIDTH-1:0] data_48;
    assign data_48 = ((((data_47 - 6) ^ 4) ^ 4) ^ ((data_47 - 2) & 4));
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((data_48 + 9) - 3);
    wire [WIDTH-1:0] data_50;
    assign data_50 = ((data_49 + 9) - 3);
    wire [WIDTH-1:0] data_51;
    assign data_51 = ((data_50 + 9) - 3);
    wire [WIDTH-1:0] data_52;
    assign data_52 = ((data_51 & 4) >>> (data_51 & 7));
    wire [WIDTH-1:0] data_53;
    assign data_53 = (((data_52 - 10) - 9) <<< (data_52 + 1));
    wire [WIDTH-1:0] data_54;
    assign data_54 = ((((data_53 <<< 4) ^ (data_53 ^ 7)) - 10) | ((data_53 & 9) <<< 5));
    wire [WIDTH-1:0] data_55;
    assign data_55 = (((((data_54 <<< 6) | 5) & (data_54 & 3)) + (data_54 ^ 2)) & ((((data_54 + 4) <<< 7) | 6) | (((data_54 | 8) ^ (data_54 + 5)) | 3)));
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((((data_55 + 10) - 2) + (data_55 & 2)) - 7);
    wire [WIDTH-1:0] data_57;
    assign data_57 = ((((data_56 ^ 2) - 7) - (data_56 & 7)) - 7);
    wire [WIDTH-1:0] data_58;
    assign data_58 = (((data_57 | 1) >>> ((data_57 ^ 4) ^ 3)) | (((data_57 <<< 8) + ((data_57 ^ 5) <<< 7)) & ((data_57 | 4) ^ 5)));
    wire [WIDTH-1:0] data_59;
    assign data_59 = (((data_58 | 1) >>> ((data_58 ^ 4) ^ 3)) | (((data_58 <<< 8) + ((data_58 ^ 5) <<< 7)) & ((data_58 | 4) ^ 5)));
    wire [WIDTH-1:0] data_60;
    assign data_60 = (((data_59 & 2) + 8) + (data_59 ^ 1));
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((data_60 + 1) & ((data_60 + 3) & 10));
    wire [WIDTH-1:0] data_62;
    assign data_62 = (((((data_61 & 4) + 10) - ((data_61 >>> 3) - 3)) | (data_61 | 8)) >>> ((((data_61 >>> 7) - 5) + 4) ^ (data_61 + 8)));
    wire [WIDTH-1:0] data_63;
    assign data_63 = (((data_62 - 2) & 8) >>> (((data_62 | 10) - 4) >>> 7));
    wire [WIDTH-1:0] data_64;
    assign data_64 = (((data_63 & 9) + 5) ^ 5);
    wire [WIDTH-1:0] data_65;
    assign data_65 = (((data_64 & 9) + 5) ^ 5);
    wire [WIDTH-1:0] data_66;
    assign data_66 = (((data_65 & 9) + 5) ^ 5);
    wire [WIDTH-1:0] data_67;
    assign data_67 = (((((data_66 ^ 2) <<< (data_66 ^ 1)) >>> 5) - ((data_66 >>> 5) - 5)) ^ ((data_66 >>> 4) ^ ((data_66 & 7) + 4)));
    wire [WIDTH-1:0] data_68;
    assign data_68 = (((((data_67 ^ 2) <<< (data_67 ^ 1)) >>> 5) - ((data_67 >>> 5) - 5)) ^ ((data_67 >>> 4) ^ ((data_67 & 7) + 4)));
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((data_68 - 6) & ((data_68 ^ 2) ^ 3));
    wire [WIDTH-1:0] data_70;
    assign data_70 = ((data_69 - 6) & ((data_69 ^ 2) ^ 3));
    wire [WIDTH-1:0] data_71;
    assign data_71 = ((data_70 - 6) & ((data_70 ^ 2) ^ 3));
    wire [WIDTH-1:0] data_72;
    assign data_72 = (((data_71 <<< 9) - 8) <<< 3);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_72, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_4-1,"`define WIDTH 128
`define DEPTH 77

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) <<< ((in_data | 4) | 10)) & 8);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 2) | (in_data & 3)) | (in_data + 7)) | (((in_data + 4) ^ (in_data + 6)) & 1)) >>> (((in_data >>> 6) + (in_data <<< 10)) >>> ((in_data + 7) - (in_data + 9))));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 3) ^ (data[i] & 4)) <<< (((data[i] | 4) + (data[i] - 5)) - (data[i] ^ 1))) >>> 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 2) ^ (((data[i] | 5) ^ (data[i] <<< 4)) ^ (data[i] & 2)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 1) - (in_data + 1)) >>> (in_data - 6)) - (in_data & 10)) <<< (in_data - 4));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 9) - (in_data <<< 4)) >>> ((in_data <<< 5) + 5)) ^ ((in_data >>> 10) | ((in_data & 1) <<< ((in_data ^ 2) - 6))));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 4) ^ (in_data <<< 10)) | 9) >>> 6);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 6) - (data[i] - 8)) >>> 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 4) - 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) | ((in_data & 10) - 6));
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 1) & 5) + 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) ^ 1);
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 4) & 4) + ((in_data ^ 8) + 2)) | 3) >>> ((in_data >>> 8) | 1));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 2) | 7) | ((in_data | 5) ^ (in_data <<< 2))) & ((((in_data | 9) & 7) | 6) <<< 2));
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 9) - 8) >>> 7);
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 6) & (data[i] >>> 8)) | (data[i] + 9)) | (data[i] >>> 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 10) + ((in_data <<< 3) & ((in_data <<< 2) <<< 3))) - 1);
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 1) & (data[i] + 3)) - ((data[i] <<< 9) & ((data[i] >>> 2) ^ (data[i] - 1))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 6) | (data[i] - 10)) & 9) >>> ((data[i] + 4) ^ ((data[i] <<< 8) | 4)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 9) >>> (in_data ^ 2)) ^ ((in_data + 9) - 1)) - 4);
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 9) <<< 3);
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 4) + 6) | 7) - 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 8) ^ 3);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 7) | 8) ^ (in_data & 3)) <<< 2);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 8) >>> ((in_data | 10) <<< (in_data >>> 8))) | 2) - 8);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 8) | (data[i] | 10)) <<< ((data[i] >>> 3) >>> (data[i] - 8))) >>> ((((data[i] >>> 7) ^ 9) & (data[i] + 2)) + 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 1) <<< 6) <<< (in_data + 8));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 3) & 8) <<< 6);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] >>> 1) <<< 9) <<< 4) & 1) ^ 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 8) + 7) & 7) <<< 9);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 10) - (((in_data ^ 10) >>> ((in_data & 2) >>> (in_data & 9))) & 3));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 8) ^ (in_data + 2)) <<< 5);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 2) + (data[i] >>> 7)) <<< 9) - (((data[i] ^ 6) & 2) & ((data[i] | 1) >>> (data[i] ^ 8))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 6) <<< (in_data - 3)) & ((((in_data - 2) >>> 3) >>> ((in_data >>> 10) - (in_data >>> 7))) <<< ((in_data >>> 10) ^ (in_data >>> 2))));
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 9) & (in_data + 10)) + 2) + (((in_data & 4) | (in_data >>> 3)) & (in_data <<< 4)));
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) >>> ((in_data ^ 6) ^ 7)) ^ (in_data + 3));
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 7) | (in_data | 5)) & (in_data + 4)) <<< (((in_data & 5) | (in_data <<< 2)) - ((in_data + 7) <<< ((in_data >>> 6) >>> (in_data - 3)))));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 4) | (in_data & 10)) - ((in_data - 6) >>> (in_data | 2))) <<< ((in_data & 2) + (in_data | 4))) + (in_data ^ 7));
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 5) <<< 5) >>> 10);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 4) ^ 2);
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 9) <<< 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 9) ^ 2) & ((in_data | 4) & (in_data + 5))) & ((in_data >>> 4) >>> 9));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) | ((in_data <<< 9) | 3)) >>> (in_data ^ 4));
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) <<< 3) - 10);
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] & 4) & (data[i] - 10)) ^ 2) <<< (data[i] ^ 8)) | ((data[i] + 4) | ((data[i] - 8) >>> 5)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 5) ^ 7) + (in_data - 3)) ^ ((in_data >>> 1) - (in_data - 8)));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 8) ^ (data[i] + 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 4) | (data[i] - 1)) - 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 9) >>> 10) - (in_data <<< 2)) | 6) + (((in_data & 1) & 7) & 2));
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 5) ^ (in_data - 4)) - (in_data <<< 8)) <<< 10);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 77

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data | 7) <<< ((in_data | 4) | 10)) & 8);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 | 4) ^ 2);
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 <<< 2) | 7) | ((data_1 | 5) ^ (data_1 <<< 2))) & ((((data_1 | 9) & 7) | 6) <<< 2));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((((data_2 ^ 9) >>> 10) - (data_2 <<< 2)) | 6) + (((data_2 & 1) & 7) & 2));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 >>> 2) ^ (((data_3 | 5) ^ (data_3 <<< 4)) ^ (data_3 & 2)));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 >>> 2) ^ (((data_4 | 5) ^ (data_4 <<< 4)) ^ (data_4 & 2)));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((((data_5 & 2) | (data_5 & 3)) | (data_5 + 7)) | (((data_5 + 4) ^ (data_5 + 6)) & 1)) >>> (((data_5 >>> 6) + (data_5 <<< 10)) >>> ((data_5 + 7) - (data_5 + 9))));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 <<< 4) | (data_6 - 1)) - 3);
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 <<< 4) | (data_7 - 1)) - 3);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((((data_8 >>> 9) - (data_8 <<< 4)) >>> ((data_8 <<< 5) + 5)) ^ ((data_8 >>> 10) | ((data_8 & 1) <<< ((data_8 ^ 2) - 6))));
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((((data_9 ^ 5) ^ 7) + (data_9 - 3)) ^ ((data_9 >>> 1) - (data_9 - 8)));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((((data_10 <<< 8) | (data_10 | 10)) <<< ((data_10 >>> 3) >>> (data_10 - 8))) >>> ((((data_10 >>> 7) ^ 9) & (data_10 + 2)) + 8));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((((data_11 <<< 8) | (data_11 | 10)) <<< ((data_11 >>> 3) >>> (data_11 - 8))) >>> ((((data_11 >>> 7) ^ 9) & (data_11 + 2)) + 8));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((((data_12 <<< 8) | (data_12 | 10)) <<< ((data_12 >>> 3) >>> (data_12 - 8))) >>> ((((data_12 >>> 7) ^ 9) & (data_12 + 2)) + 8));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((((data_13 <<< 8) | (data_13 | 10)) <<< ((data_13 >>> 3) >>> (data_13 - 8))) >>> ((((data_13 >>> 7) ^ 9) & (data_13 + 2)) + 8));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((((data_14 ^ 3) ^ (data_14 & 4)) <<< (((data_14 | 4) + (data_14 - 5)) - (data_14 ^ 1))) >>> 6);
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((((data_15 ^ 3) ^ (data_15 & 4)) <<< (((data_15 | 4) + (data_15 - 5)) - (data_15 ^ 1))) >>> 6);
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((((data_16 ^ 3) ^ (data_16 & 4)) <<< (((data_16 | 4) + (data_16 - 5)) - (data_16 ^ 1))) >>> 6);
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((data_17 & 10) + ((data_17 <<< 3) & ((data_17 <<< 2) <<< 3))) - 1);
    wire [WIDTH-1:0] data_19;
    assign data_19 = (((((data_18 & 4) & (data_18 - 10)) ^ 2) <<< (data_18 ^ 8)) | ((data_18 + 4) | ((data_18 - 8) >>> 5)));
    wire [WIDTH-1:0] data_20;
    assign data_20 = (((((data_19 & 4) & (data_19 - 10)) ^ 2) <<< (data_19 ^ 8)) | ((data_19 + 4) | ((data_19 - 8) >>> 5)));
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((((data_20 & 4) & (data_20 - 10)) ^ 2) <<< (data_20 ^ 8)) | ((data_20 + 4) | ((data_20 - 8) >>> 5)));
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((((data_21 - 4) ^ (data_21 <<< 10)) | 9) >>> 6);
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((((data_22 - 9) >>> (data_22 ^ 2)) ^ ((data_22 + 9) - 1)) - 4);
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((((data_23 + 9) & (data_23 + 10)) + 2) + (((data_23 & 4) | (data_23 >>> 3)) & (data_23 <<< 4)));
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((((data_24 <<< 5) ^ (data_24 - 4)) - (data_24 <<< 8)) <<< 10);
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((((data_25 <<< 2) + (data_25 >>> 7)) <<< 9) - (((data_25 ^ 6) & 2) & ((data_25 | 1) >>> (data_25 ^ 8))));
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((((data_26 <<< 2) + (data_26 >>> 7)) <<< 9) - (((data_26 ^ 6) & 2) & ((data_26 | 1) >>> (data_26 ^ 8))));
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((data_27 >>> 8) ^ 3);
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((data_28 ^ 4) - 7);
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((data_29 ^ 4) - 7);
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((data_30 ^ 4) - 7);
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((data_31 ^ 4) - 7);
    wire [WIDTH-1:0] data_33;
    assign data_33 = (((((data_32 >>> 1) <<< 9) <<< 4) & 1) ^ 1);
    wire [WIDTH-1:0] data_34;
    assign data_34 = (((((data_33 >>> 1) <<< 9) <<< 4) & 1) ^ 1);
    wire [WIDTH-1:0] data_35;
    assign data_35 = (((((data_34 >>> 1) <<< 9) <<< 4) & 1) ^ 1);
    wire [WIDTH-1:0] data_36;
    assign data_36 = (((data_35 >>> 8) ^ (data_35 + 2)) <<< 5);
    wire [WIDTH-1:0] data_37;
    assign data_37 = (((data_36 + 1) & (data_36 + 3)) - ((data_36 <<< 9) & ((data_36 >>> 2) ^ (data_36 - 1))));
    wire [WIDTH-1:0] data_38;
    assign data_38 = (((data_37 + 1) & (data_37 + 3)) - ((data_37 <<< 9) & ((data_37 >>> 2) ^ (data_37 - 1))));
    wire [WIDTH-1:0] data_39;
    assign data_39 = (((((data_38 ^ 4) & 4) + ((data_38 ^ 8) + 2)) | 3) >>> ((data_38 >>> 8) | 1));
    wire [WIDTH-1:0] data_40;
    assign data_40 = ((((data_39 - 4) + 6) | 7) - 9);
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((((data_40 - 4) + 6) | 7) - 9);
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((((data_41 >>> 6) & (data_41 >>> 8)) | (data_41 + 9)) | (data_41 >>> 5));
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((((data_42 >>> 6) & (data_42 >>> 8)) | (data_42 + 9)) | (data_42 >>> 5));
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((((data_43 + 9) ^ 2) & ((data_43 | 4) & (data_43 + 5))) & ((data_43 >>> 4) >>> 9));
    wire [WIDTH-1:0] data_45;
    assign data_45 = (((data_44 <<< 6) - (data_44 - 8)) >>> 9);
    wire [WIDTH-1:0] data_46;
    assign data_46 = (((data_45 <<< 6) - (data_45 - 8)) >>> 9);
    wire [WIDTH-1:0] data_47;
    assign data_47 = (((data_46 <<< 6) - (data_46 - 8)) >>> 9);
    wire [WIDTH-1:0] data_48;
    assign data_48 = (((data_47 + 9) - 8) >>> 7);
    wire [WIDTH-1:0] data_49;
    assign data_49 = (((((data_48 ^ 4) | (data_48 & 10)) - ((data_48 - 6) >>> (data_48 | 2))) <<< ((data_48 & 2) + (data_48 | 4))) + (data_48 ^ 7));
    wire [WIDTH-1:0] data_50;
    assign data_50 = (((data_49 ^ 2) <<< 3) - 10);
    wire [WIDTH-1:0] data_51;
    assign data_51 = ((((data_50 | 7) | 8) ^ (data_50 & 3)) <<< 2);
    wire [WIDTH-1:0] data_52;
    assign data_52 = ((((data_51 - 7) | (data_51 | 5)) & (data_51 + 4)) <<< (((data_51 & 5) | (data_51 <<< 2)) - ((data_51 + 7) <<< ((data_51 >>> 6) >>> (data_51 - 3)))));
    wire [WIDTH-1:0] data_53;
    assign data_53 = (((data_52 - 3) & 8) <<< 6);
    wire [WIDTH-1:0] data_54;
    assign data_54 = (((data_53 + 5) <<< 5) >>> 10);
    wire [WIDTH-1:0] data_55;
    assign data_55 = ((data_54 + 8) ^ (data_54 + 8));
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((data_55 + 8) ^ (data_55 + 8));
    wire [WIDTH-1:0] data_57;
    assign data_57 = ((data_56 + 8) ^ (data_56 + 8));
    wire [WIDTH-1:0] data_58;
    assign data_58 = ((data_57 + 8) ^ (data_57 + 8));
    wire [WIDTH-1:0] data_59;
    assign data_59 = ((data_58 <<< 9) <<< 3);
    wire [WIDTH-1:0] data_60;
    assign data_60 = ((((data_59 - 6) | (data_59 - 10)) & 9) >>> ((data_59 + 4) ^ ((data_59 <<< 8) | 4)));
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((((data_60 - 6) | (data_60 - 10)) & 9) >>> ((data_60 + 4) ^ ((data_60 <<< 8) | 4)));
    wire [WIDTH-1:0] data_62;
    assign data_62 = ((((data_61 - 6) | (data_61 - 10)) & 9) >>> ((data_61 + 4) ^ ((data_61 <<< 8) | 4)));
    wire [WIDTH-1:0] data_63;
    assign data_63 = (((data_62 - 1) & 5) + 9);
    wire [WIDTH-1:0] data_64;
    assign data_64 = (((data_63 - 1) & 5) + 9);
    wire [WIDTH-1:0] data_65;
    assign data_65 = ((data_64 <<< 7) ^ 1);
    wire [WIDTH-1:0] data_66;
    assign data_66 = (((data_65 + 6) <<< (data_65 - 3)) & ((((data_65 - 2) >>> 3) >>> ((data_65 >>> 10) - (data_65 >>> 7))) <<< ((data_65 >>> 10) ^ (data_65 >>> 2))));
    wire [WIDTH-1:0] data_67;
    assign data_67 = ((data_66 >>> 9) <<< 7);
    wire [WIDTH-1:0] data_68;
    assign data_68 = ((data_67 >>> 9) <<< 7);
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((data_68 <<< 7) | ((data_68 & 10) - 6));
    wire [WIDTH-1:0] data_70;
    assign data_70 = (((data_69 & 1) <<< 6) <<< (data_69 + 8));
    wire [WIDTH-1:0] data_71;
    assign data_71 = (((data_70 + 7) | ((data_70 <<< 9) | 3)) >>> (data_70 ^ 4));
    wire [WIDTH-1:0] data_72;
    assign data_72 = ((((data_71 >>> 8) >>> ((data_71 | 10) <<< (data_71 >>> 8))) | 2) - 8);
    wire [WIDTH-1:0] data_73;
    assign data_73 = ((data_72 + 10) - (((data_72 ^ 10) >>> ((data_72 & 2) >>> (data_72 & 9))) & 3));
    wire [WIDTH-1:0] data_74;
    assign data_74 = (((data_73 <<< 9) >>> ((data_73 ^ 6) ^ 7)) ^ (data_73 + 3));
    wire [WIDTH-1:0] data_75;
    assign data_75 = (((((data_74 <<< 1) - (data_74 + 1)) >>> (data_74 - 6)) - (data_74 & 10)) <<< (data_74 - 4));
    wire [WIDTH-1:0] data_76;
    assign data_76 = ((((data_75 - 8) + 7) & 7) <<< 9);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_76, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_4-2,"`define WIDTH 128
`define DEPTH 82

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 9) ^ 7) ^ 9);
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 2) + ((data[i] >>> 5) >>> (data[i] <<< 9))) | ((data[i] <<< 1) + 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) & 1) + (in_data + 4));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 8) <<< ((in_data <<< 9) + 9)) & ((((in_data + 6) & 9) - 3) | 5));
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 7) >>> ((((data[i] ^ 5) & (data[i] ^ 4)) & (data[i] >>> 4)) & ((data[i] & 7) <<< (data[i] | 4))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 7) <<< (((in_data + 8) - (in_data | 9)) ^ ((in_data ^ 9) >>> (in_data ^ 4))));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 6) | 7) - ((((data[i] >>> 8) & (data[i] | 4)) ^ (data[i] | 1)) ^ 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 2) & (data[i] <<< 9)) - 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 10) + 6) >>> (((in_data & 10) | ((in_data | 8) + 5)) ^ 10));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 2) <<< 6) - 5);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) >>> 4) | 10);
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 6) | (data[i] & 6)) + (((data[i] | 10) >>> (data[i] - 10)) + (data[i] | 4)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 3) >>> 3);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) <<< (in_data | 7)) ^ ((in_data ^ 6) + (((in_data <<< 2) >>> 10) ^ 7)));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) <<< (in_data + 1)) - 8);
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 5) + 2);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 5) | ((in_data - 2) >>> 4)) + ((in_data - 5) - (in_data | 1)));
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 10) ^ (in_data - 7)) + (((in_data >>> 8) >>> ((in_data ^ 7) & (in_data | 7))) ^ ((in_data + 9) ^ 3)));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 7) | (in_data ^ 5)) <<< 7);
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 5) | (in_data <<< 4));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) + 7) >>> 2);
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 9) >>> 2) <<< ((in_data + 1) + 1));
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 7) + (in_data - 10)) ^ (in_data ^ 5)) ^ ((in_data ^ 1) & 8));
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 8) >>> ((data[i] ^ 10) <<< (data[i] | 2))) <<< 1) | 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 4) + 2) & 1);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 3) >>> 2);
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 2) | (data[i] - 3)) & ((data[i] & 1) | (((data[i] | 2) - 7) + (data[i] - 7))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 3) | 7);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 9) - ((data[i] >>> 8) | 6)) & 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 1) & (((in_data ^ 1) - 3) + 10));
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 3) ^ 10) + 8) >>> ((in_data <<< 5) + 9));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 1) >>> 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data >>> 1) + 2) <<< 7) <<< 8) | ((in_data >>> 3) - 1));
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 6) >>> 2) + 8) + 2) & 3);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 6) <<< 3) <<< (in_data - 1)) | 1);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 3) | (in_data & 10)) >>> 10) | 10) >>> (((in_data | 9) & ((in_data >>> 2) & (in_data & 6))) >>> (in_data <<< 8)));
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 5) & ((in_data + 3) <<< 10)) - 8);
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 10) >>> 7) ^ 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 9) + ((in_data <<< 6) & (in_data - 8))) <<< ((in_data >>> 2) + ((in_data - 10) | (in_data <<< 9)))) & ((in_data ^ 1) >>> ((in_data + 9) <<< 6)));
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 10) <<< (in_data >>> 9)) ^ 10);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 6) >>> 10) | 9) + ((in_data ^ 1) ^ ((in_data | 9) + (in_data - 10))));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 9) - 4) <<< (((in_data ^ 5) >>> 9) + 1)) + 5);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) | 5) - 9);
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 7) - (in_data <<< 6));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) | 3) | (((in_data >>> 3) <<< ((in_data & 6) <<< (in_data + 3))) | ((in_data <<< 4) + (in_data | 8))));
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 1) - 5) - (in_data <<< 6)) ^ (in_data - 3));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 7) & ((data[i] | 1) & (data[i] | 7))) ^ (((data[i] & 4) ^ 5) ^ ((data[i] | 5) <<< 1)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 4) & 4) + 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 5) ^ ((in_data ^ 1) <<< 9)) <<< ((in_data | 9) & (in_data + 3)));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 7) | 5);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[77]),
        .in_vld(ready[77]),
        .out_data(data[81]), 
        .out_vld(ready[81])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[81]),
        .in_vld(ready[81]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 82

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data + 8) >>> 4) | 10);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 + 6) | 7) - ((((data_0 >>> 8) & (data_0 | 4)) ^ (data_0 | 1)) ^ 1));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 + 6) | 7) - ((((data_1 >>> 8) & (data_1 | 4)) ^ (data_1 | 1)) ^ 1));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 + 6) | 7) - ((((data_2 >>> 8) & (data_2 | 4)) ^ (data_2 | 1)) ^ 1));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 & 7) & ((data_3 | 1) & (data_3 | 7))) ^ (((data_3 & 4) ^ 5) ^ ((data_3 | 5) <<< 1)));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 & 7) & ((data_4 | 1) & (data_4 | 7))) ^ (((data_4 & 4) ^ 5) ^ ((data_4 | 5) <<< 1)));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 & 7) & ((data_5 | 1) & (data_5 | 7))) ^ (((data_5 & 4) ^ 5) ^ ((data_5 | 5) <<< 1)));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 & 7) & ((data_6 | 1) & (data_6 | 7))) ^ (((data_6 & 4) ^ 5) ^ ((data_6 | 5) <<< 1)));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 <<< 1) >>> 8);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 <<< 1) >>> 8);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 <<< 1) >>> 8);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((((data_10 + 3) | (data_10 & 10)) >>> 10) | 10) >>> (((data_10 | 9) & ((data_10 >>> 2) & (data_10 & 6))) >>> (data_10 <<< 8)));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 >>> 7) | 5);
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((data_12 >>> 7) | 5);
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 >>> 7) | 5);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 >>> 7) | 5);
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((data_15 ^ 2) | 3) | (((data_15 >>> 3) <<< ((data_15 & 6) <<< (data_15 + 3))) | ((data_15 <<< 4) + (data_15 | 8))));
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((data_16 | 8) <<< ((data_16 <<< 9) + 9)) & ((((data_16 + 6) & 9) - 3) | 5));
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((((data_17 ^ 9) + ((data_17 <<< 6) & (data_17 - 8))) <<< ((data_17 >>> 2) + ((data_17 - 10) | (data_17 <<< 9)))) & ((data_17 ^ 1) >>> ((data_17 + 9) <<< 6)));
    wire [WIDTH-1:0] data_19;
    assign data_19 = (((data_18 & 7) | (data_18 ^ 5)) <<< 7);
    wire [WIDTH-1:0] data_20;
    assign data_20 = (((data_19 ^ 6) <<< (data_19 + 1)) - 8);
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((data_20 <<< 7) >>> ((((data_20 ^ 5) & (data_20 ^ 4)) & (data_20 >>> 4)) & ((data_20 & 7) <<< (data_20 | 4))));
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((data_21 <<< 7) >>> ((((data_21 ^ 5) & (data_21 ^ 4)) & (data_21 >>> 4)) & ((data_21 & 7) <<< (data_21 | 4))));
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 <<< 7) >>> ((((data_22 ^ 5) & (data_22 ^ 4)) & (data_22 >>> 4)) & ((data_22 & 7) <<< (data_22 | 4))));
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 <<< 7) >>> ((((data_23 ^ 5) & (data_23 ^ 4)) & (data_23 >>> 4)) & ((data_23 & 7) <<< (data_23 | 4))));
    wire [WIDTH-1:0] data_25;
    assign data_25 = (((data_24 ^ 9) ^ 7) ^ 9);
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((((data_25 & 9) - 4) <<< (((data_25 ^ 5) >>> 9) + 1)) + 5);
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((data_26 >>> 7) - (data_26 <<< 6));
    wire [WIDTH-1:0] data_28;
    assign data_28 = (((data_27 ^ 4) + 2) & 1);
    wire [WIDTH-1:0] data_29;
    assign data_29 = (((data_28 | 10) <<< (data_28 >>> 9)) ^ 10);
    wire [WIDTH-1:0] data_30;
    assign data_30 = (((data_29 + 5) ^ ((data_29 ^ 1) <<< 9)) <<< ((data_29 | 9) & (data_29 + 3)));
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((data_30 <<< 1) & (((data_30 ^ 1) - 3) + 10));
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((((data_31 >>> 3) ^ 10) + 8) >>> ((data_31 <<< 5) + 9));
    wire [WIDTH-1:0] data_33;
    assign data_33 = ((((data_32 <<< 6) >>> 10) | 9) + ((data_32 ^ 1) ^ ((data_32 | 9) + (data_32 - 10))));
    wire [WIDTH-1:0] data_34;
    assign data_34 = (((data_33 >>> 2) | (data_33 - 3)) & ((data_33 & 1) | (((data_33 | 2) - 7) + (data_33 - 7))));
    wire [WIDTH-1:0] data_35;
    assign data_35 = (((data_34 >>> 2) | (data_34 - 3)) & ((data_34 & 1) | (((data_34 | 2) - 7) + (data_34 - 7))));
    wire [WIDTH-1:0] data_36;
    assign data_36 = (((data_35 >>> 2) | (data_35 - 3)) & ((data_35 & 1) | (((data_35 | 2) - 7) + (data_35 - 7))));
    wire [WIDTH-1:0] data_37;
    assign data_37 = (((data_36 >>> 2) | (data_36 - 3)) & ((data_36 & 1) | (((data_36 | 2) - 7) + (data_36 - 7))));
    wire [WIDTH-1:0] data_38;
    assign data_38 = (((data_37 - 10) + 6) >>> (((data_37 & 10) | ((data_37 | 8) + 5)) ^ 10));
    wire [WIDTH-1:0] data_39;
    assign data_39 = (((data_38 & 4) & 4) + 10);
    wire [WIDTH-1:0] data_40;
    assign data_40 = (((data_39 & 4) & 4) + 10);
    wire [WIDTH-1:0] data_41;
    assign data_41 = (((data_40 & 4) & 4) + 10);
    wire [WIDTH-1:0] data_42;
    assign data_42 = (((data_41 & 4) & 4) + 10);
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 <<< 5) | (data_42 <<< 4));
    wire [WIDTH-1:0] data_44;
    assign data_44 = (((((data_43 >>> 1) + 2) <<< 7) <<< 8) | ((data_43 >>> 3) - 1));
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((((data_44 + 7) + (data_44 - 10)) ^ (data_44 ^ 5)) ^ ((data_44 ^ 1) & 8));
    wire [WIDTH-1:0] data_46;
    assign data_46 = ((data_45 ^ 7) <<< (((data_45 + 8) - (data_45 | 9)) ^ ((data_45 ^ 9) >>> (data_45 ^ 4))));
    wire [WIDTH-1:0] data_47;
    assign data_47 = ((data_46 >>> 3) >>> 2);
    wire [WIDTH-1:0] data_48;
    assign data_48 = (((data_47 ^ 2) + ((data_47 >>> 5) >>> (data_47 <<< 9))) | ((data_47 <<< 1) + 8));
    wire [WIDTH-1:0] data_49;
    assign data_49 = (((data_48 ^ 2) + ((data_48 >>> 5) >>> (data_48 <<< 9))) | ((data_48 <<< 1) + 8));
    wire [WIDTH-1:0] data_50;
    assign data_50 = (((data_49 ^ 2) + ((data_49 >>> 5) >>> (data_49 <<< 9))) | ((data_49 <<< 1) + 8));
    wire [WIDTH-1:0] data_51;
    assign data_51 = (((data_50 ^ 10) >>> 7) ^ 7);
    wire [WIDTH-1:0] data_52;
    assign data_52 = (((data_51 ^ 10) >>> 7) ^ 7);
    wire [WIDTH-1:0] data_53;
    assign data_53 = (((data_52 ^ 10) >>> 7) ^ 7);
    wire [WIDTH-1:0] data_54;
    assign data_54 = ((data_53 | 3) >>> 3);
    wire [WIDTH-1:0] data_55;
    assign data_55 = (((data_54 & 9) >>> 2) <<< ((data_54 + 1) + 1));
    wire [WIDTH-1:0] data_56;
    assign data_56 = (((data_55 + 2) <<< 6) - 5);
    wire [WIDTH-1:0] data_57;
    assign data_57 = (((((data_56 + 6) >>> 2) + 8) + 2) & 3);
    wire [WIDTH-1:0] data_58;
    assign data_58 = (((data_57 ^ 2) + 7) >>> 2);
    wire [WIDTH-1:0] data_59;
    assign data_59 = ((data_58 - 5) + 2);
    wire [WIDTH-1:0] data_60;
    assign data_60 = (((data_59 | 6) <<< (data_59 | 7)) ^ ((data_59 ^ 6) + (((data_59 <<< 2) >>> 10) ^ 7)));
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((((data_60 <<< 6) <<< 3) <<< (data_60 - 1)) | 1);
    wire [WIDTH-1:0] data_62;
    assign data_62 = (((data_61 ^ 2) & 1) + (data_61 + 4));
    wire [WIDTH-1:0] data_63;
    assign data_63 = ((((data_62 - 1) - 5) - (data_62 <<< 6)) ^ (data_62 - 3));
    wire [WIDTH-1:0] data_64;
    assign data_64 = (((data_63 <<< 2) & (data_63 <<< 9)) - 3);
    wire [WIDTH-1:0] data_65;
    assign data_65 = (((data_64 <<< 2) & (data_64 <<< 9)) - 3);
    wire [WIDTH-1:0] data_66;
    assign data_66 = (((data_65 <<< 2) & (data_65 <<< 9)) - 3);
    wire [WIDTH-1:0] data_67;
    assign data_67 = (((data_66 <<< 2) & (data_66 <<< 9)) - 3);
    wire [WIDTH-1:0] data_68;
    assign data_68 = (((data_67 & 10) ^ (data_67 - 7)) + (((data_67 >>> 8) >>> ((data_67 ^ 7) & (data_67 | 7))) ^ ((data_67 + 9) ^ 3)));
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((((data_68 + 8) >>> ((data_68 ^ 10) <<< (data_68 | 2))) <<< 1) | 5);
    wire [WIDTH-1:0] data_70;
    assign data_70 = ((((data_69 + 8) >>> ((data_69 ^ 10) <<< (data_69 | 2))) <<< 1) | 5);
    wire [WIDTH-1:0] data_71;
    assign data_71 = (((data_70 | 7) | 5) - 9);
    wire [WIDTH-1:0] data_72;
    assign data_72 = (((data_71 + 9) - ((data_71 >>> 8) | 6)) & 3);
    wire [WIDTH-1:0] data_73;
    assign data_73 = (((data_72 + 9) - ((data_72 >>> 8) | 6)) & 3);
    wire [WIDTH-1:0] data_74;
    assign data_74 = (((data_73 + 9) - ((data_73 >>> 8) | 6)) & 3);
    wire [WIDTH-1:0] data_75;
    assign data_75 = (((data_74 >>> 5) & ((data_74 + 3) <<< 10)) - 8);
    wire [WIDTH-1:0] data_76;
    assign data_76 = (((data_75 <<< 5) | ((data_75 - 2) >>> 4)) + ((data_75 - 5) - (data_75 | 1)));
    wire [WIDTH-1:0] data_77;
    assign data_77 = (((data_76 + 6) | (data_76 & 6)) + (((data_76 | 10) >>> (data_76 - 10)) + (data_76 | 4)));
    wire [WIDTH-1:0] data_78;
    assign data_78 = (((data_77 + 6) | (data_77 & 6)) + (((data_77 | 10) >>> (data_77 - 10)) + (data_77 | 4)));
    wire [WIDTH-1:0] data_79;
    assign data_79 = (((data_78 + 6) | (data_78 & 6)) + (((data_78 | 10) >>> (data_78 - 10)) + (data_78 | 4)));
    wire [WIDTH-1:0] data_80;
    assign data_80 = (((data_79 + 6) | (data_79 & 6)) + (((data_79 | 10) >>> (data_79 - 10)) + (data_79 | 4)));
    wire [WIDTH-1:0] data_81;
    assign data_81 = ((data_80 >>> 3) | 7);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_81, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_4-3,"`define WIDTH 128
`define DEPTH 78

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 3) - 2) >>> (in_data ^ 8));
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) | 1) + 7);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 6) + 1) ^ ((in_data - 10) <<< (in_data ^ 4))) ^ ((in_data <<< 1) & (((in_data ^ 2) + 4) - (in_data + 4))));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 1) >>> ((in_data + 4) >>> (in_data + 5))) >>> 1);
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 3) | 10) | (in_data - 5));
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 3) | ((in_data + 6) ^ 8)) - 5);
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 6) - (in_data - 6)) >>> ((in_data >>> 10) & (in_data >>> 7)));
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 4) & 9) >>> (in_data - 5)) >>> 8);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 9) - (((in_data | 8) >>> 6) - 1));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 3) ^ (in_data ^ 3)) >>> 8) >>> ((in_data & 1) + 9)) >>> ((in_data | 5) <<< ((in_data & 1) + 2)));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 5) - (in_data & 2)) >>> (in_data ^ 2)) & (in_data ^ 4)) + (((in_data ^ 3) | (in_data <<< 2)) - 5));
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 6) >>> 2);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 7) <<< 9) + 4) >>> (in_data ^ 9)) & ((in_data & 5) - ((in_data <<< 2) - (in_data & 8))));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 2) & (data[i] >>> 8)) | 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 7) & ((in_data | 1) - 9)) <<< 9);
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) - 3);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 3) <<< 3) - ((data[i] & 4) + 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 8) + 6);
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] + 9) & 3) >>> (data[i] + 6)) + (data[i] | 8)) >>> 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 3) <<< 4) & 8) & (((data[i] >>> 9) >>> (data[i] - 2)) | ((data[i] ^ 2) + 9)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 3) ^ 6) <<< ((data[i] >>> 8) ^ 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 7) & 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 8) ^ (in_data >>> 10)) | (in_data - 3)) >>> 9) | 5);
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 1) & 9) ^ 3) >>> (((in_data & 4) | (in_data <<< 3)) ^ 8));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 3) ^ 10) <<< 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 7) <<< ((data[i] & 6) - 1)) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) | (in_data & 1)) - (in_data | 6));
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 4) - 8) ^ 7) & (in_data | 8)) - 4);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 7) <<< 5) - 4);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 10) + (in_data >>> 6)) + ((in_data + 7) & (in_data - 2))) >>> 5);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 6) | 8) <<< (in_data ^ 8)) ^ (in_data & 2));
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 7) + ((data[i] <<< 2) ^ (data[i] <<< 3))) & ((data[i] <<< 7) >>> (data[i] & 4)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 2) <<< ((in_data ^ 4) + (in_data - 1))) >>> (in_data <<< 7)) ^ 3);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 6) >>> 6);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 2) + ((data[i] >>> 10) <<< (data[i] ^ 6)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 3) | (in_data | 1)) - ((in_data - 3) & 10));
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 5) ^ (((in_data & 8) ^ 7) | (in_data + 7))) - (((in_data ^ 10) >>> (in_data & 10)) | 10));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 10) - (in_data & 10)) | ((in_data & 6) - 7));
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 7) <<< (in_data + 6)) <<< ((in_data <<< 1) | 6)) ^ 1);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 6) - 5);
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 10) ^ 8) | (((data[i] & 9) + 4) >>> 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 5) & 2) | ((data[i] - 8) <<< 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 5) <<< ((data[i] & 2) ^ (data[i] ^ 7))) | 3) + (((data[i] + 3) >>> (data[i] ^ 1)) <<< (data[i] <<< 6)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 6) & 4) ^ 3) | 5);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 2) <<< (in_data - 5));
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 5) - ((in_data | 5) & (in_data + 3))) >>> (in_data >>> 2)) + 3);
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] <<< 2) & 7) ^ 4) | 6) >>> (data[i] & 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) - (((in_data - 6) - 1) | 10)) + 9);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 9) + (((in_data <<< 5) - (in_data ^ 4)) <<< 9)) <<< ((in_data ^ 6) - 3));
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 5) | 9);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[78]), 
        .out_vld(ready[78])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 78

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data & 6) & 4) ^ 3) | 5);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 + 3) ^ 10) <<< 7);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 + 3) ^ 10) <<< 7);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 + 3) ^ 10) <<< 7);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 + 3) ^ 10) <<< 7);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 <<< 2) + ((data_4 >>> 10) <<< (data_4 ^ 6)));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 <<< 2) + ((data_5 >>> 10) <<< (data_5 ^ 6)));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 <<< 2) + ((data_6 >>> 10) <<< (data_6 ^ 6)));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((((data_7 & 10) + (data_7 >>> 6)) + ((data_7 + 7) & (data_7 - 2))) >>> 5);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 & 2) <<< (data_8 - 5));
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((((data_9 - 8) ^ (data_9 >>> 10)) | (data_9 - 3)) >>> 9) | 5);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((((data_10 & 3) ^ (data_10 ^ 3)) >>> 8) >>> ((data_10 & 1) + 9)) >>> ((data_10 | 5) <<< ((data_10 & 1) + 2)));
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 | 3) <<< 3) - ((data_11 & 4) + 8));
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 | 3) <<< 3) - ((data_12 & 4) + 8));
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 | 3) <<< 3) - ((data_13 & 4) + 8));
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((data_14 - 9) + (((data_14 <<< 5) - (data_14 ^ 4)) <<< 9)) <<< ((data_14 ^ 6) - 3));
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 >>> 6) >>> 6);
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((((data_16 ^ 3) <<< 4) & 8) & (((data_16 >>> 9) >>> (data_16 - 2)) | ((data_16 ^ 2) + 9)));
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((((data_17 ^ 3) <<< 4) & 8) & (((data_17 >>> 9) >>> (data_17 - 2)) | ((data_17 ^ 2) + 9)));
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((((data_18 ^ 3) <<< 4) & 8) & (((data_18 >>> 9) >>> (data_18 - 2)) | ((data_18 ^ 2) + 9)));
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((((data_19 ^ 3) <<< 4) & 8) & (((data_19 >>> 9) >>> (data_19 - 2)) | ((data_19 ^ 2) + 9)));
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((data_20 - 7) + ((data_20 <<< 2) ^ (data_20 <<< 3))) & ((data_20 <<< 7) >>> (data_20 & 4)));
    wire [WIDTH-1:0] data_22;
    assign data_22 = (((data_21 - 7) + ((data_21 <<< 2) ^ (data_21 <<< 3))) & ((data_21 <<< 7) >>> (data_21 & 4)));
    wire [WIDTH-1:0] data_23;
    assign data_23 = (((data_22 - 7) + ((data_22 <<< 2) ^ (data_22 <<< 3))) & ((data_22 <<< 7) >>> (data_22 & 4)));
    wire [WIDTH-1:0] data_24;
    assign data_24 = (((data_23 >>> 4) | 1) + 7);
    wire [WIDTH-1:0] data_25;
    assign data_25 = (((data_24 + 10) - (data_24 & 10)) | ((data_24 & 6) - 7));
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((data_25 ^ 6) >>> 2);
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((((data_26 <<< 5) <<< ((data_26 & 2) ^ (data_26 ^ 7))) | 3) + (((data_26 + 3) >>> (data_26 ^ 1)) <<< (data_26 <<< 6)));
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((((data_27 <<< 5) <<< ((data_27 & 2) ^ (data_27 ^ 7))) | 3) + (((data_27 + 3) >>> (data_27 ^ 1)) <<< (data_27 <<< 6)));
    wire [WIDTH-1:0] data_29;
    assign data_29 = (((((data_28 + 9) & 3) >>> (data_28 + 6)) + (data_28 | 8)) >>> 6);
    wire [WIDTH-1:0] data_30;
    assign data_30 = (((((data_29 + 9) & 3) >>> (data_29 + 6)) + (data_29 | 8)) >>> 6);
    wire [WIDTH-1:0] data_31;
    assign data_31 = (((((data_30 + 9) & 3) >>> (data_30 + 6)) + (data_30 | 8)) >>> 6);
    wire [WIDTH-1:0] data_32;
    assign data_32 = (((((data_31 + 9) & 3) >>> (data_31 + 6)) + (data_31 | 8)) >>> 6);
    wire [WIDTH-1:0] data_33;
    assign data_33 = (((data_32 - 7) <<< ((data_32 & 6) - 1)) >>> 3);
    wire [WIDTH-1:0] data_34;
    assign data_34 = (((data_33 - 7) <<< ((data_33 & 6) - 1)) >>> 3);
    wire [WIDTH-1:0] data_35;
    assign data_35 = (((data_34 & 3) | 10) | (data_34 - 5));
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((((data_35 & 2) <<< ((data_35 ^ 4) + (data_35 - 1))) >>> (data_35 <<< 7)) ^ 3);
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((data_36 <<< 6) - 5);
    wire [WIDTH-1:0] data_38;
    assign data_38 = ((data_37 >>> 7) & 7);
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((data_38 >>> 7) & 7);
    wire [WIDTH-1:0] data_40;
    assign data_40 = ((data_39 >>> 7) & 7);
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((data_40 >>> 7) & 7);
    wire [WIDTH-1:0] data_42;
    assign data_42 = (((data_41 - 5) ^ (((data_41 & 8) ^ 7) | (data_41 + 7))) - (((data_41 ^ 10) >>> (data_41 & 10)) | 10));
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 - 8) + 6);
    wire [WIDTH-1:0] data_44;
    assign data_44 = (((data_43 ^ 2) | (data_43 & 1)) - (data_43 | 6));
    wire [WIDTH-1:0] data_45;
    assign data_45 = (((data_44 - 10) ^ 8) | (((data_44 & 9) + 4) >>> 8));
    wire [WIDTH-1:0] data_46;
    assign data_46 = (((data_45 - 10) ^ 8) | (((data_45 & 9) + 4) >>> 8));
    wire [WIDTH-1:0] data_47;
    assign data_47 = (((data_46 - 3) ^ 6) <<< ((data_46 >>> 8) ^ 2));
    wire [WIDTH-1:0] data_48;
    assign data_48 = (((data_47 - 3) ^ 6) <<< ((data_47 >>> 8) ^ 2));
    wire [WIDTH-1:0] data_49;
    assign data_49 = (((data_48 & 5) & 2) | ((data_48 - 8) <<< 1));
    wire [WIDTH-1:0] data_50;
    assign data_50 = (((data_49 & 5) & 2) | ((data_49 - 8) <<< 1));
    wire [WIDTH-1:0] data_51;
    assign data_51 = (((data_50 ^ 3) | ((data_50 + 6) ^ 8)) - 5);
    wire [WIDTH-1:0] data_52;
    assign data_52 = (((((data_51 + 5) - (data_51 & 2)) >>> (data_51 ^ 2)) & (data_51 ^ 4)) + (((data_51 ^ 3) | (data_51 <<< 2)) - 5));
    wire [WIDTH-1:0] data_53;
    assign data_53 = ((data_52 - 5) | 9);
    wire [WIDTH-1:0] data_54;
    assign data_54 = (((((data_53 - 4) - 8) ^ 7) & (data_53 | 8)) - 4);
    wire [WIDTH-1:0] data_55;
    assign data_55 = (((data_54 - 3) | (data_54 | 1)) - ((data_54 - 3) & 10));
    wire [WIDTH-1:0] data_56;
    assign data_56 = (((data_55 + 1) >>> ((data_55 + 4) >>> (data_55 + 5))) >>> 1);
    wire [WIDTH-1:0] data_57;
    assign data_57 = (((data_56 & 6) - (data_56 - 6)) >>> ((data_56 >>> 10) & (data_56 >>> 7)));
    wire [WIDTH-1:0] data_58;
    assign data_58 = ((data_57 <<< 7) - 3);
    wire [WIDTH-1:0] data_59;
    assign data_59 = (((data_58 + 2) & (data_58 >>> 8)) | 10);
    wire [WIDTH-1:0] data_60;
    assign data_60 = (((data_59 + 2) & (data_59 >>> 8)) | 10);
    wire [WIDTH-1:0] data_61;
    assign data_61 = (((data_60 + 2) & (data_60 >>> 8)) | 10);
    wire [WIDTH-1:0] data_62;
    assign data_62 = (((data_61 <<< 7) <<< 5) - 4);
    wire [WIDTH-1:0] data_63;
    assign data_63 = ((((data_62 >>> 6) | 8) <<< (data_62 ^ 8)) ^ (data_62 & 2));
    wire [WIDTH-1:0] data_64;
    assign data_64 = (((data_63 & 7) & ((data_63 | 1) - 9)) <<< 9);
    wire [WIDTH-1:0] data_65;
    assign data_65 = ((((data_64 ^ 6) + 1) ^ ((data_64 - 10) <<< (data_64 ^ 4))) ^ ((data_64 <<< 1) & (((data_64 ^ 2) + 4) - (data_64 + 4))));
    wire [WIDTH-1:0] data_66;
    assign data_66 = (((data_65 + 3) - 2) >>> (data_65 ^ 8));
    wire [WIDTH-1:0] data_67;
    assign data_67 = ((((data_66 - 4) & 9) >>> (data_66 - 5)) >>> 8);
    wire [WIDTH-1:0] data_68;
    assign data_68 = ((((data_67 | 7) <<< (data_67 + 6)) <<< ((data_67 <<< 1) | 6)) ^ 1);
    wire [WIDTH-1:0] data_69;
    assign data_69 = (((((data_68 - 7) <<< 9) + 4) >>> (data_68 ^ 9)) & ((data_68 & 5) - ((data_68 <<< 2) - (data_68 & 8))));
    wire [WIDTH-1:0] data_70;
    assign data_70 = (((data_69 >>> 4) - (((data_69 - 6) - 1) | 10)) + 9);
    wire [WIDTH-1:0] data_71;
    assign data_71 = ((data_70 - 9) - (((data_70 | 8) >>> 6) - 1));
    wire [WIDTH-1:0] data_72;
    assign data_72 = ((((data_71 + 5) - ((data_71 | 5) & (data_71 + 3))) >>> (data_71 >>> 2)) + 3);
    wire [WIDTH-1:0] data_73;
    assign data_73 = ((((data_72 & 1) & 9) ^ 3) >>> (((data_72 & 4) | (data_72 <<< 3)) ^ 8));
    wire [WIDTH-1:0] data_74;
    assign data_74 = (((((data_73 <<< 2) & 7) ^ 4) | 6) >>> (data_73 & 8));
    wire [WIDTH-1:0] data_75;
    assign data_75 = (((((data_74 <<< 2) & 7) ^ 4) | 6) >>> (data_74 & 8));
    wire [WIDTH-1:0] data_76;
    assign data_76 = (((((data_75 <<< 2) & 7) ^ 4) | 6) >>> (data_75 & 8));
    wire [WIDTH-1:0] data_77;
    assign data_77 = (((((data_76 <<< 2) & 7) ^ 4) | 6) >>> (data_76 & 8));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_77, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_4-4,"`define WIDTH 128
`define DEPTH 82

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 4) ^ 4) <<< 4) | ((data[i] >>> 6) ^ 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 10) + (in_data - 5)) - 7);
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 7) - (in_data ^ 8)) <<< ((in_data & 7) - 3)) ^ 5);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 7) & 1) | 4) - (((in_data ^ 4) & 7) & 6));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 3) | 5);
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 10) ^ 5) >>> 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 4) - ((in_data - 2) >>> (in_data + 9)));
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 9) >>> (data[i] & 3)) & 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 6) | 6);
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 5) - 2);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 3) & (data[i] + 9)) - ((data[i] - 3) + 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 5) ^ (in_data + 9)) | (in_data - 3)) - 3);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 8) >>> 10) | 5);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 5) | (data[i] ^ 3)) - (data[i] & 1)) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 9) ^ (in_data & 9)) & ((in_data - 10) >>> (in_data ^ 3)));
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 4) ^ (((data[i] - 5) >>> 4) >>> 10)) + ((data[i] >>> 3) >>> (data[i] <<< 10)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) & 4) | 3);
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 6) ^ (data[i] & 2)) ^ (data[i] + 9)) + 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 2) & 10) | ((in_data <<< 4) & ((in_data >>> 2) ^ (in_data - 6))));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 7) <<< (in_data ^ 10)) & ((((in_data >>> 9) + 1) >>> (in_data & 10)) | 2));
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 4) <<< ((in_data - 6) + 8));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 9) - (in_data ^ 3)) | (in_data | 5)) & 5) - 8);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 9) | 9);
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 1) - 4) + (in_data ^ 2)) ^ (in_data >>> 4)) & 4);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 4) >>> ((data[i] & 5) ^ 6)) <<< (data[i] & 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 9) >>> ((in_data - 10) + (in_data <<< 10))) & 1);
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 3) | 5) - (((in_data - 9) <<< 1) - ((in_data & 1) - 4))) <<< 6);
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 2) ^ (((data[i] ^ 4) - (data[i] <<< 2)) & ((data[i] - 3) <<< (data[i] ^ 1)))) - (((data[i] <<< 5) & 4) ^ (data[i] + 9)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 4) - (in_data + 4)) | 10) | ((in_data >>> 1) ^ (in_data & 9))) + (in_data >>> 3));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 7) - ((in_data ^ 4) + 6));
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 1) | 4) & (data[i] >>> 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 3) - ((in_data & 6) & (in_data & 2))) - 3) | 9);
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 4) ^ ((data[i] - 2) ^ 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 10) | (in_data & 3)) <<< 6);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 8) | ((in_data + 9) ^ (in_data ^ 9))) | 3);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) & 4) ^ 8);
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 1) + 5) >>> (in_data - 2)) | 4) <<< 1);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 6) >>> 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 3) ^ 2);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 5) + (in_data + 6)) <<< 5) <<< ((in_data + 5) | ((in_data - 8) ^ 7)));
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 8) & (((in_data <<< 4) & 2) >>> (in_data | 10)));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 5) | 7) - 6) - 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 9) <<< (in_data - 7)) >>> ((in_data >>> 1) | (in_data - 2))) ^ 8) & 10);
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) + ((in_data - 1) ^ 2)) + (in_data ^ 8));
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) - ((in_data ^ 1) - (in_data ^ 10))) <<< 9);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 1) <<< ((data[i] & 7) + 8)) - 10) >>> (data[i] <<< 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 8) | 4) <<< 4) + 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) + (in_data | 2)) & (in_data <<< 1));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 5) ^ ((data[i] ^ 7) ^ (data[i] ^ 3)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 8) <<< (in_data >>> 10)) ^ ((in_data + 9) & 10)) & 7);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[77]),
        .in_vld(ready[77]),
        .out_data(data[78]), 
        .out_vld(ready[78])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[78]),
        .in_vld(ready[78]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 82

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data + 1) <<< ((in_data & 7) + 8)) - 10) >>> (in_data <<< 5));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 + 1) <<< ((data_0 & 7) + 8)) - 10) >>> (data_0 <<< 5));
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((((data_1 + 9) - (data_1 ^ 3)) | (data_1 | 5)) & 5) - 8);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 | 8) >>> 10) | 5);
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((data_3 | 5) ^ ((data_3 ^ 7) ^ (data_3 ^ 3)));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((data_4 | 5) ^ ((data_4 ^ 7) ^ (data_4 ^ 3)));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 | 5) ^ ((data_5 ^ 7) ^ (data_5 ^ 3)));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 + 4) >>> ((data_6 & 5) ^ 6)) <<< (data_6 & 9));
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 + 4) >>> ((data_7 & 5) ^ 6)) <<< (data_7 & 9));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 + 4) >>> ((data_8 & 5) ^ 6)) <<< (data_8 & 9));
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 + 4) >>> ((data_9 & 5) ^ 6)) <<< (data_9 & 9));
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((((data_10 <<< 4) - (data_10 + 4)) | 10) | ((data_10 >>> 1) ^ (data_10 & 9))) + (data_10 >>> 3));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 + 3) | 5);
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 <<< 8) | ((data_12 + 9) ^ (data_12 ^ 9))) | 3);
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((((data_13 | 5) | (data_13 ^ 3)) - (data_13 & 1)) >>> 3);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((((data_14 | 5) | (data_14 ^ 3)) - (data_14 & 1)) >>> 3);
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((((data_15 | 5) | (data_15 ^ 3)) - (data_15 & 1)) >>> 3);
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((((data_16 | 5) | (data_16 ^ 3)) - (data_16 & 1)) >>> 3);
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((((data_17 | 5) | 7) - 6) - 8);
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((((data_18 | 5) | 7) - 6) - 8);
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((((data_19 | 5) | 7) - 6) - 8);
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((data_20 >>> 7) - ((data_20 ^ 4) + 6));
    wire [WIDTH-1:0] data_22;
    assign data_22 = (((data_21 >>> 2) & 10) | ((data_21 <<< 4) & ((data_21 >>> 2) ^ (data_21 - 6))));
    wire [WIDTH-1:0] data_23;
    assign data_23 = (((((data_22 - 1) - 4) + (data_22 ^ 2)) ^ (data_22 >>> 4)) & 4);
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((((data_23 | 5) ^ (data_23 + 9)) | (data_23 - 3)) - 3);
    wire [WIDTH-1:0] data_25;
    assign data_25 = (((data_24 - 4) ^ (((data_24 - 5) >>> 4) >>> 10)) + ((data_24 >>> 3) >>> (data_24 <<< 10)));
    wire [WIDTH-1:0] data_26;
    assign data_26 = (((data_25 - 4) ^ (((data_25 - 5) >>> 4) >>> 10)) + ((data_25 >>> 3) >>> (data_25 <<< 10)));
    wire [WIDTH-1:0] data_27;
    assign data_27 = (((data_26 - 4) ^ (((data_26 - 5) >>> 4) >>> 10)) + ((data_26 >>> 3) >>> (data_26 <<< 10)));
    wire [WIDTH-1:0] data_28;
    assign data_28 = (((data_27 + 9) ^ (data_27 & 9)) & ((data_27 - 10) >>> (data_27 ^ 3)));
    wire [WIDTH-1:0] data_29;
    assign data_29 = (((((data_28 & 1) + 5) >>> (data_28 - 2)) | 4) <<< 1);
    wire [WIDTH-1:0] data_30;
    assign data_30 = (((data_29 | 2) & 4) | 3);
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((data_30 ^ 5) - 2);
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((((data_31 & 3) | 5) - (((data_31 - 9) <<< 1) - ((data_31 & 1) - 4))) <<< 6);
    wire [WIDTH-1:0] data_33;
    assign data_33 = (((data_32 >>> 9) >>> (data_32 & 3)) & 10);
    wire [WIDTH-1:0] data_34;
    assign data_34 = (((data_33 >>> 9) >>> (data_33 & 3)) & 10);
    wire [WIDTH-1:0] data_35;
    assign data_35 = (((data_34 >>> 9) >>> (data_34 & 3)) & 10);
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((data_35 + 4) - ((data_35 - 2) >>> (data_35 + 9)));
    wire [WIDTH-1:0] data_37;
    assign data_37 = (((((data_36 <<< 9) <<< (data_36 - 7)) >>> ((data_36 >>> 1) | (data_36 - 2))) ^ 8) & 10);
    wire [WIDTH-1:0] data_38;
    assign data_38 = ((data_37 + 4) ^ ((data_37 - 2) ^ 8));
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((data_38 + 4) ^ ((data_38 - 2) ^ 8));
    wire [WIDTH-1:0] data_40;
    assign data_40 = (((data_39 & 2) ^ (((data_39 ^ 4) - (data_39 <<< 2)) & ((data_39 - 3) <<< (data_39 ^ 1)))) - (((data_39 <<< 5) & 4) ^ (data_39 + 9)));
    wire [WIDTH-1:0] data_41;
    assign data_41 = (((data_40 & 2) ^ (((data_40 ^ 4) - (data_40 <<< 2)) & ((data_40 - 3) <<< (data_40 ^ 1)))) - (((data_40 <<< 5) & 4) ^ (data_40 + 9)));
    wire [WIDTH-1:0] data_42;
    assign data_42 = (((data_41 & 2) ^ (((data_41 ^ 4) - (data_41 <<< 2)) & ((data_41 - 3) <<< (data_41 ^ 1)))) - (((data_41 <<< 5) & 4) ^ (data_41 + 9)));
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((((data_42 ^ 6) ^ (data_42 & 2)) ^ (data_42 + 9)) + 5);
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((((data_43 ^ 6) ^ (data_43 & 2)) ^ (data_43 + 9)) + 5);
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((((data_44 & 4) ^ 4) <<< 4) | ((data_44 >>> 6) ^ 1));
    wire [WIDTH-1:0] data_46;
    assign data_46 = ((((data_45 & 4) ^ 4) <<< 4) | ((data_45 >>> 6) ^ 1));
    wire [WIDTH-1:0] data_47;
    assign data_47 = ((((data_46 & 4) ^ 4) <<< 4) | ((data_46 >>> 6) ^ 1));
    wire [WIDTH-1:0] data_48;
    assign data_48 = ((((data_47 + 7) & 1) | 4) - (((data_47 ^ 4) & 7) & 6));
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((((data_48 | 5) + (data_48 + 6)) <<< 5) <<< ((data_48 + 5) | ((data_48 - 8) ^ 7)));
    wire [WIDTH-1:0] data_50;
    assign data_50 = ((data_49 >>> 6) | 6);
    wire [WIDTH-1:0] data_51;
    assign data_51 = ((((data_50 - 7) - (data_50 ^ 8)) <<< ((data_50 & 7) - 3)) ^ 5);
    wire [WIDTH-1:0] data_52;
    assign data_52 = (((data_51 ^ 2) & 4) ^ 8);
    wire [WIDTH-1:0] data_53;
    assign data_53 = (((data_52 | 10) | (data_52 & 3)) <<< 6);
    wire [WIDTH-1:0] data_54;
    assign data_54 = (((data_53 ^ 10) ^ 5) >>> 10);
    wire [WIDTH-1:0] data_55;
    assign data_55 = (((data_54 ^ 10) ^ 5) >>> 10);
    wire [WIDTH-1:0] data_56;
    assign data_56 = (((data_55 ^ 10) ^ 5) >>> 10);
    wire [WIDTH-1:0] data_57;
    assign data_57 = (((data_56 ^ 10) ^ 5) >>> 10);
    wire [WIDTH-1:0] data_58;
    assign data_58 = ((((data_57 ^ 3) - ((data_57 & 6) & (data_57 & 2))) - 3) | 9);
    wire [WIDTH-1:0] data_59;
    assign data_59 = (((data_58 >>> 9) >>> ((data_58 - 10) + (data_58 <<< 10))) & 1);
    wire [WIDTH-1:0] data_60;
    assign data_60 = (((data_59 <<< 10) + (data_59 - 5)) - 7);
    wire [WIDTH-1:0] data_61;
    assign data_61 = (((data_60 ^ 6) - ((data_60 ^ 1) - (data_60 ^ 10))) <<< 9);
    wire [WIDTH-1:0] data_62;
    assign data_62 = ((data_61 <<< 4) <<< ((data_61 - 6) + 8));
    wire [WIDTH-1:0] data_63;
    assign data_63 = (((data_62 <<< 3) + ((data_62 - 1) ^ 2)) + (data_62 ^ 8));
    wire [WIDTH-1:0] data_64;
    assign data_64 = ((((data_63 - 8) | 4) <<< 4) + 3);
    wire [WIDTH-1:0] data_65;
    assign data_65 = ((((data_64 - 8) | 4) <<< 4) + 3);
    wire [WIDTH-1:0] data_66;
    assign data_66 = ((((data_65 - 8) | 4) <<< 4) + 3);
    wire [WIDTH-1:0] data_67;
    assign data_67 = ((((data_66 - 8) | 4) <<< 4) + 3);
    wire [WIDTH-1:0] data_68;
    assign data_68 = ((data_67 - 3) ^ 2);
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((data_68 <<< 8) & (((data_68 <<< 4) & 2) >>> (data_68 | 10)));
    wire [WIDTH-1:0] data_70;
    assign data_70 = ((((data_69 + 8) <<< (data_69 >>> 10)) ^ ((data_69 + 9) & 10)) & 7);
    wire [WIDTH-1:0] data_71;
    assign data_71 = ((data_70 + 6) >>> 6);
    wire [WIDTH-1:0] data_72;
    assign data_72 = ((data_71 + 6) >>> 6);
    wire [WIDTH-1:0] data_73;
    assign data_73 = (((data_72 + 3) & (data_72 + 9)) - ((data_72 - 3) + 6));
    wire [WIDTH-1:0] data_74;
    assign data_74 = (((data_73 + 3) & (data_73 + 9)) - ((data_73 - 3) + 6));
    wire [WIDTH-1:0] data_75;
    assign data_75 = (((data_74 | 2) + (data_74 | 2)) & (data_74 <<< 1));
    wire [WIDTH-1:0] data_76;
    assign data_76 = ((data_75 - 9) | 9);
    wire [WIDTH-1:0] data_77;
    assign data_77 = (((data_76 - 7) <<< (data_76 ^ 10)) & ((((data_76 >>> 9) + 1) >>> (data_76 & 10)) | 2));
    wire [WIDTH-1:0] data_78;
    assign data_78 = (((data_77 | 1) | 4) & (data_77 >>> 7));
    wire [WIDTH-1:0] data_79;
    assign data_79 = (((data_78 | 1) | 4) & (data_78 >>> 7));
    wire [WIDTH-1:0] data_80;
    assign data_80 = (((data_79 | 1) | 4) & (data_79 >>> 7));
    wire [WIDTH-1:0] data_81;
    assign data_81 = (((data_80 | 1) | 4) & (data_80 >>> 7));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_81, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_4-5,"`define WIDTH 128
`define DEPTH 89

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 8) <<< ((in_data <<< 3) | (in_data + 6))) <<< 7) & (((in_data - 2) + (in_data ^ 4)) - 4));
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 4) ^ 1) | 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 7) + 10) ^ 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 8) >>> 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 3) | 5) | 1) >>> (in_data ^ 7));
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 4) <<< (((in_data - 4) & 3) & (in_data | 4))) <<< 8);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data >>> 5) - 10) + 2) - ((in_data ^ 3) & (in_data & 4))) - (in_data >>> 3));
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 6) >>> ((in_data + 5) & 6));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) + ((in_data + 6) - ((in_data ^ 1) - (in_data | 8))));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 2) | 10) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 9) | (data[i] + 9)) ^ 6) - 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 6) & (in_data <<< 3)) - (((in_data & 5) + ((in_data - 1) - 3)) >>> 2));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 4) - 6) + 3);
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 9) >>> 4) & (((data[i] >>> 3) >>> 10) + 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) + (in_data ^ 2)) - 7);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 6) >>> (data[i] | 8)) & (data[i] >>> 5)) ^ ((data[i] ^ 2) ^ ((data[i] | 3) | ((data[i] >>> 1) + 4))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 4) >>> 7) + (in_data & 9)) & 5) + 9);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 7) | 9) ^ 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 5) + 10) & 4);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 1) >>> 10) >>> 5);
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 8) ^ (((in_data & 1) + 8) >>> (in_data >>> 10)));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 8) + 6);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) - ((in_data <<< 10) ^ 9)) + 5);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) + (in_data - 8)) <<< (((in_data | 9) ^ 7) | 1));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 4) >>> (((in_data ^ 6) | 2) >>> 2));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 10) - (in_data >>> 1)) <<< (in_data ^ 2)) + (((in_data <<< 7) - (in_data - 1)) - (in_data >>> 6))) & ((((in_data - 4) ^ 9) | (in_data ^ 10)) & ((in_data + 10) & ((in_data & 4) >>> 5))));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 3) | ((data[i] | 6) & ((data[i] - 3) + 8))) >>> ((data[i] ^ 4) + 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data >>> 7) & (in_data ^ 2)) | (in_data & 6)) <<< (in_data - 9)) >>> 10);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) | ((in_data <<< 10) + (in_data & 9))) + 5);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 6) ^ 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 10) <<< 3) + (((data[i] + 3) ^ 8) & (data[i] <<< 2)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 4) & ((in_data ^ 1) | 7)) + 9);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 4) - 6) <<< 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 4) | 1) & ((data[i] >>> 2) ^ 8)) - (data[i] ^ 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 3) >>> 10) & 3) + ((((data[i] | 5) & 1) | ((data[i] <<< 9) + 2)) + 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 6) | (data[i] - 9)) | (((data[i] & 8) <<< 7) & 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 1) & 7);
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 2) <<< 4);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 6) >>> 3) | 10) + 6);
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 4) + 4) | (in_data <<< 4)) - (in_data & 4));
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 9) <<< (((in_data - 7) - (in_data | 4)) + (in_data - 1)));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 7) | 8) & 3) & 10);
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 5) - ((in_data - 7) - 2)) >>> (in_data <<< 3));
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 8) - 7) ^ 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 6) | (in_data >>> 1)) - 9);
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 1) <<< 8) & 4);
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 3) & 7) | 8) - ((in_data >>> 1) | ((in_data & 1) + 10)));
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 8) <<< ((data[i] >>> 4) | 6)) & (data[i] <<< 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 9) & 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] <<< 7) & (data[i] + 10)) >>> (data[i] & 7)) & 2) - ((data[i] ^ 2) <<< 10));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[78]), 
        .out_vld(ready[78])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[78]),
        .in_vld(ready[78]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[79]),
        .in_vld(ready[79]),
        .out_data(data[80]), 
        .out_vld(ready[80])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[80]),
        .in_vld(ready[80]),
        .out_data(data[81]), 
        .out_vld(ready[81])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[81]),
        .in_vld(ready[81]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[82]),
        .in_vld(ready[82]),
        .out_data(data[83]), 
        .out_vld(ready[83])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[83]),
        .in_vld(ready[83]),
        .out_data(data[84]), 
        .out_vld(ready[84])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[84]),
        .in_vld(ready[84]),
        .out_data(data[85]), 
        .out_vld(ready[85])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[85]),
        .in_vld(ready[85]),
        .out_data(data[86]), 
        .out_vld(ready[86])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[86]),
        .in_vld(ready[86]),
        .out_data(data[87]), 
        .out_vld(ready[87])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[87]),
        .in_vld(ready[87]),
        .out_data(data[88]), 
        .out_vld(ready[88])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[88]),
        .in_vld(ready[88]),
        .out_data(data[89]), 
        .out_vld(ready[89])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 89

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data & 3) | 5) | 1) >>> (in_data ^ 7));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 + 4) & ((data_0 ^ 1) | 7)) + 9);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 >>> 6) & (data_1 <<< 3)) - (((data_1 & 5) + ((data_1 - 1) - 3)) >>> 2));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 <<< 6) >>> (data_2 | 8)) & (data_2 >>> 5)) ^ ((data_2 ^ 2) ^ ((data_2 | 3) | ((data_2 >>> 1) + 4))));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 <<< 6) >>> (data_3 | 8)) & (data_3 >>> 5)) ^ ((data_3 ^ 2) ^ ((data_3 | 3) | ((data_3 >>> 1) + 4))));
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 <<< 6) >>> (data_4 | 8)) & (data_4 >>> 5)) ^ ((data_4 ^ 2) ^ ((data_4 | 3) | ((data_4 >>> 1) + 4))));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((((data_5 <<< 6) >>> (data_5 | 8)) & (data_5 >>> 5)) ^ ((data_5 ^ 2) ^ ((data_5 | 3) | ((data_5 >>> 1) + 4))));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 | 6) ^ 10);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 | 6) ^ 10);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 + 3) | ((data_8 | 6) & ((data_8 - 3) + 8))) >>> ((data_8 ^ 4) + 10));
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 + 3) | ((data_9 | 6) & ((data_9 - 3) + 8))) >>> ((data_9 ^ 4) + 10));
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((data_10 + 3) | ((data_10 | 6) & ((data_10 - 3) + 8))) >>> ((data_10 ^ 4) + 10));
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((((data_11 <<< 10) - (data_11 >>> 1)) <<< (data_11 ^ 2)) + (((data_11 <<< 7) - (data_11 - 1)) - (data_11 >>> 6))) & ((((data_11 - 4) ^ 9) | (data_11 ^ 10)) & ((data_11 + 10) & ((data_11 & 4) >>> 5))));
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 <<< 1) >>> 10) >>> 5);
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 >>> 4) | ((data_13 <<< 10) + (data_13 & 9))) + 5);
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((((data_14 >>> 7) & (data_14 ^ 2)) | (data_14 & 6)) <<< (data_14 - 9)) >>> 10);
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((((data_15 ^ 4) | 1) & ((data_15 >>> 2) ^ 8)) - (data_15 ^ 9));
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((((data_16 ^ 4) | 1) & ((data_16 >>> 2) ^ 8)) - (data_16 ^ 9));
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((((data_17 ^ 4) | 1) & ((data_17 >>> 2) ^ 8)) - (data_17 ^ 9));
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((((data_18 ^ 4) | 1) & ((data_18 >>> 2) ^ 8)) - (data_18 ^ 9));
    wire [WIDTH-1:0] data_20;
    assign data_20 = (((data_19 ^ 8) - 7) ^ 8);
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((data_20 ^ 8) - 7) ^ 8);
    wire [WIDTH-1:0] data_22;
    assign data_22 = (((data_21 ^ 4) <<< (((data_21 - 4) & 3) & (data_21 | 4))) <<< 8);
    wire [WIDTH-1:0] data_23;
    assign data_23 = (((data_22 + 8) + (data_22 ^ 2)) - 7);
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 >>> 8) ^ (((data_23 & 1) + 8) >>> (data_23 >>> 10)));
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((((data_24 ^ 3) >>> 10) & 3) + ((((data_24 | 5) & 1) | ((data_24 <<< 9) + 2)) + 1));
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((((data_25 ^ 3) >>> 10) & 3) + ((((data_25 | 5) & 1) | ((data_25 <<< 9) + 2)) + 1));
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((((data_26 ^ 3) >>> 10) & 3) + ((((data_26 | 5) & 1) | ((data_26 <<< 9) + 2)) + 1));
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((((data_27 + 3) & 7) | 8) - ((data_27 >>> 1) | ((data_27 & 1) + 10)));
    wire [WIDTH-1:0] data_29;
    assign data_29 = (((data_28 & 4) ^ 1) | 2);
    wire [WIDTH-1:0] data_30;
    assign data_30 = (((data_29 & 4) ^ 1) | 2);
    wire [WIDTH-1:0] data_31;
    assign data_31 = (((data_30 & 4) ^ 1) | 2);
    wire [WIDTH-1:0] data_32;
    assign data_32 = (((data_31 <<< 2) | 10) | 7);
    wire [WIDTH-1:0] data_33;
    assign data_33 = (((data_32 <<< 2) | 10) | 7);
    wire [WIDTH-1:0] data_34;
    assign data_34 = ((data_33 | 6) >>> ((data_33 + 5) & 6));
    wire [WIDTH-1:0] data_35;
    assign data_35 = ((((data_34 ^ 8) <<< ((data_34 <<< 3) | (data_34 + 6))) <<< 7) & (((data_34 - 2) + (data_34 ^ 4)) - 4));
    wire [WIDTH-1:0] data_36;
    assign data_36 = (((data_35 ^ 10) <<< 3) + (((data_35 + 3) ^ 8) & (data_35 <<< 2)));
    wire [WIDTH-1:0] data_37;
    assign data_37 = (((data_36 ^ 10) <<< 3) + (((data_36 + 3) ^ 8) & (data_36 <<< 2)));
    wire [WIDTH-1:0] data_38;
    assign data_38 = (((data_37 ^ 10) <<< 3) + (((data_37 + 3) ^ 8) & (data_37 <<< 2)));
    wire [WIDTH-1:0] data_39;
    assign data_39 = (((data_38 ^ 10) <<< 3) + (((data_38 + 3) ^ 8) & (data_38 <<< 2)));
    wire [WIDTH-1:0] data_40;
    assign data_40 = ((((data_39 >>> 9) | (data_39 + 9)) ^ 6) - 3);
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((((data_40 >>> 9) | (data_40 + 9)) ^ 6) - 3);
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((data_41 - 9) & 8);
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 - 9) & 8);
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((data_43 - 9) & 8);
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((data_44 - 9) & 8);
    wire [WIDTH-1:0] data_46;
    assign data_46 = (((data_45 ^ 5) - ((data_45 - 7) - 2)) >>> (data_45 <<< 3));
    wire [WIDTH-1:0] data_47;
    assign data_47 = (((data_46 >>> 8) <<< ((data_46 >>> 4) | 6)) & (data_46 <<< 10));
    wire [WIDTH-1:0] data_48;
    assign data_48 = (((data_47 >>> 8) <<< ((data_47 >>> 4) | 6)) & (data_47 <<< 10));
    wire [WIDTH-1:0] data_49;
    assign data_49 = (((data_48 >>> 8) <<< ((data_48 >>> 4) | 6)) & (data_48 <<< 10));
    wire [WIDTH-1:0] data_50;
    assign data_50 = (((((data_49 <<< 7) & (data_49 + 10)) >>> (data_49 & 7)) & 2) - ((data_49 ^ 2) <<< 10));
    wire [WIDTH-1:0] data_51;
    assign data_51 = (((((data_50 <<< 7) & (data_50 + 10)) >>> (data_50 & 7)) & 2) - ((data_50 ^ 2) <<< 10));
    wire [WIDTH-1:0] data_52;
    assign data_52 = (((((data_51 <<< 7) & (data_51 + 10)) >>> (data_51 & 7)) & 2) - ((data_51 ^ 2) <<< 10));
    wire [WIDTH-1:0] data_53;
    assign data_53 = ((((data_52 ^ 6) >>> 3) | 10) + 6);
    wire [WIDTH-1:0] data_54;
    assign data_54 = ((data_53 + 8) >>> 9);
    wire [WIDTH-1:0] data_55;
    assign data_55 = ((data_54 + 8) >>> 9);
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((data_55 + 8) >>> 9);
    wire [WIDTH-1:0] data_57;
    assign data_57 = ((data_56 + 8) >>> 9);
    wire [WIDTH-1:0] data_58;
    assign data_58 = ((data_57 >>> 8) + 6);
    wire [WIDTH-1:0] data_59;
    assign data_59 = (((data_58 <<< 6) | (data_58 - 9)) | (((data_58 & 8) <<< 7) & 7));
    wire [WIDTH-1:0] data_60;
    assign data_60 = (((data_59 <<< 6) | (data_59 - 9)) | (((data_59 & 8) <<< 7) & 7));
    wire [WIDTH-1:0] data_61;
    assign data_61 = (((data_60 >>> 4) - 6) <<< 8);
    wire [WIDTH-1:0] data_62;
    assign data_62 = (((data_61 >>> 4) - 6) <<< 8);
    wire [WIDTH-1:0] data_63;
    assign data_63 = (((data_62 >>> 4) - 6) <<< 8);
    wire [WIDTH-1:0] data_64;
    assign data_64 = (((data_63 >>> 4) - 6) <<< 8);
    wire [WIDTH-1:0] data_65;
    assign data_65 = (((data_64 >>> 5) + 10) & 4);
    wire [WIDTH-1:0] data_66;
    assign data_66 = (((data_65 ^ 9) >>> 4) & (((data_65 >>> 3) >>> 10) + 8));
    wire [WIDTH-1:0] data_67;
    assign data_67 = (((data_66 ^ 9) >>> 4) & (((data_66 >>> 3) >>> 10) + 8));
    wire [WIDTH-1:0] data_68;
    assign data_68 = (((data_67 ^ 9) >>> 4) & (((data_67 >>> 3) >>> 10) + 8));
    wire [WIDTH-1:0] data_69;
    assign data_69 = (((data_68 ^ 9) >>> 4) & (((data_68 >>> 3) >>> 10) + 8));
    wire [WIDTH-1:0] data_70;
    assign data_70 = (((data_69 - 7) + 10) ^ 10);
    wire [WIDTH-1:0] data_71;
    assign data_71 = (((data_70 - 7) + 10) ^ 10);
    wire [WIDTH-1:0] data_72;
    assign data_72 = (((data_71 - 7) + 10) ^ 10);
    wire [WIDTH-1:0] data_73;
    assign data_73 = (((data_72 <<< 4) - 6) + 3);
    wire [WIDTH-1:0] data_74;
    assign data_74 = ((data_73 <<< 4) >>> (((data_73 ^ 6) | 2) >>> 2));
    wire [WIDTH-1:0] data_75;
    assign data_75 = ((data_74 >>> 9) <<< (((data_74 - 7) - (data_74 | 4)) + (data_74 - 1)));
    wire [WIDTH-1:0] data_76;
    assign data_76 = (((data_75 >>> 7) | 9) ^ 1);
    wire [WIDTH-1:0] data_77;
    assign data_77 = (((data_76 >>> 7) | 9) ^ 1);
    wire [WIDTH-1:0] data_78;
    assign data_78 = (((((data_77 ^ 4) >>> 7) + (data_77 & 9)) & 5) + 9);
    wire [WIDTH-1:0] data_79;
    assign data_79 = (((data_78 + 8) + (data_78 - 8)) <<< (((data_78 | 9) ^ 7) | 1));
    wire [WIDTH-1:0] data_80;
    assign data_80 = ((data_79 >>> 1) & 7);
    wire [WIDTH-1:0] data_81;
    assign data_81 = ((data_80 ^ 2) <<< 4);
    wire [WIDTH-1:0] data_82;
    assign data_82 = ((((data_81 ^ 4) + 4) | (data_81 <<< 4)) - (data_81 & 4));
    wire [WIDTH-1:0] data_83;
    assign data_83 = ((((data_82 ^ 7) | 8) & 3) & 10);
    wire [WIDTH-1:0] data_84;
    assign data_84 = (((((data_83 >>> 5) - 10) + 2) - ((data_83 ^ 3) & (data_83 & 4))) - (data_83 >>> 3));
    wire [WIDTH-1:0] data_85;
    assign data_85 = (((data_84 + 7) - ((data_84 <<< 10) ^ 9)) + 5);
    wire [WIDTH-1:0] data_86;
    assign data_86 = (((data_85 >>> 6) | (data_85 >>> 1)) - 9);
    wire [WIDTH-1:0] data_87;
    assign data_87 = ((data_86 & 3) + ((data_86 + 6) - ((data_86 ^ 1) - (data_86 | 8))));
    wire [WIDTH-1:0] data_88;
    assign data_88 = (((data_87 + 1) <<< 8) & 4);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_88, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_5-0,"`define WIDTH 128
`define DEPTH 71

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 4) | 4) <<< 1);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 3) ^ 9) >>> ((in_data >>> 1) | 5)) ^ 4);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) & ((in_data - 8) + (in_data + 1))) - 7);
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data | 2) - ((in_data & 5) | 6)) ^ (in_data >>> 4)) & 5) + 9);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 6) >>> (((in_data & 9) >>> 7) >>> 7)) ^ 6) >>> 9);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 1) | (((in_data >>> 5) >>> (in_data <<< 5)) <<< 10)) ^ 5) | 3);
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 4) + (in_data + 7)) ^ ((in_data | 3) & 5)) - (((in_data & 8) >>> 3) - 7));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 5) >>> 2) - (in_data & 3)) - 7);
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 2) <<< ((data[i] >>> 6) & 5)) + 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 6) & 5) - ((data[i] & 2) | ((data[i] + 1) + (data[i] & 6))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 9) + 4);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 5) & (in_data & 8)) <<< 7) <<< 5) + 4);
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 2) ^ 7) >>> ((in_data | 10) <<< 5)) | (((in_data & 7) - (in_data >>> 1)) + (in_data & 4)));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 5) + 2) | 6);
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 3) - (in_data | 1)) | 5) <<< ((((in_data ^ 9) | 6) & (in_data + 10)) + 5));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 9) - 5) >>> ((in_data <<< 6) + 9));
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 5) ^ ((data[i] | 2) | 3)) & 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 7) + (data[i] - 7)) & ((((data[i] & 2) + (data[i] <<< 8)) + (data[i] ^ 7)) >>> 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 2) ^ 10) ^ ((in_data | 4) & 2)) & 6);
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 3) + ((in_data & 7) <<< 2)) - 2) - 5);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 5) | (((((data[i] <<< 2) & (data[i] - 7)) >>> 7) <<< ((data[i] ^ 4) | (data[i] ^ 4))) & 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 10) | ((in_data ^ 3) & 10));
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 8) <<< (in_data >>> 7)) | 1);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 2) >>> ((in_data <<< 1) | 7)) | (((in_data >>> 5) ^ (((in_data | 7) ^ 7) - 9)) | ((in_data | 10) + (in_data ^ 3))));
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 9) - (data[i] >>> 1)) >>> 9) | (data[i] <<< 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 7) + ((in_data >>> 2) <<< (in_data & 7))) >>> (in_data - 4)) <<< ((in_data >>> 2) ^ (((in_data - 6) <<< 7) <<< ((in_data & 3) | 7)))) | (((in_data | 1) | (in_data ^ 3)) + 3));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 1) & 3) ^ 1);
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) >>> (in_data & 8)) | (((in_data + 8) - 3) - (((in_data | 10) + (in_data | 6)) | 9)));
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) <<< ((in_data - 5) - ((in_data - 3) & 5))) - 9);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 5) + ((data[i] | 9) <<< ((data[i] >>> 7) + (data[i] <<< 9))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 3) >>> (((in_data <<< 8) ^ 2) - (((in_data <<< 6) & 6) ^ 6)));
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] | 10) + (data[i] >>> 9)) | ((data[i] + 2) <<< (data[i] >>> 7))) + ((data[i] | 3) ^ 3)) >>> (data[i] <<< 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 10) & (data[i] <<< 6)) & 2) ^ (((data[i] <<< 10) + 1) + ((data[i] - 3) & 7)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 10) >>> (in_data & 8)) >>> 2);
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 5) - ((((in_data + 6) <<< 7) + (in_data ^ 5)) - ((in_data | 2) >>> 8))) <<< 9);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 7) | 5);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 7) >>> (in_data - 4)) >>> 1) & (in_data + 10));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 1) & ((in_data - 10) + (in_data | 1))) <<< 4) - 2) & 1);
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 4) <<< (((((data[i] <<< 10) | (data[i] & 10)) <<< (data[i] + 8)) | (data[i] <<< 3)) + (data[i] >>> 6)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) <<< ((in_data | 10) >>> (in_data >>> 3))) >>> 6);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 10) - 3);
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 3) + 2) ^ ((in_data <<< 5) <<< 8)) & ((in_data | 1) | (in_data + 1))) <<< 8);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 5) + (in_data >>> 6)) & 5) <<< 5);
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 1) + (in_data & 1)) + (in_data >>> 2)) + (in_data - 8)) <<< 9);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 8) + 7) <<< 8) & 7);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 4) <<< ((in_data - 2) - (((in_data & 9) <<< 9) ^ (in_data + 7)))) ^ (((in_data & 6) - 9) <<< 7));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 4) + (in_data - 7)) ^ (((in_data & 7) + (in_data & 2)) | (in_data - 5))) & (((in_data <<< 7) >>> 7) >>> 4));
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 7) >>> 1) <<< 5) - 7);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 2) | ((in_data | 3) & ((in_data <<< 2) | (in_data <<< 5)))) | 10) | ((in_data + 8) ^ 5));
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 4) & (((((in_data - 2) ^ 1) + 4) & 2) - (in_data | 1)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 71

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data & 10) & (in_data <<< 6)) & 2) ^ (((in_data <<< 10) + 1) + ((in_data - 3) & 7)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 & 10) & (data_0 <<< 6)) & 2) ^ (((data_0 <<< 10) + 1) + ((data_0 - 3) & 7)));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 & 10) & (data_1 <<< 6)) & 2) ^ (((data_1 <<< 10) + 1) + ((data_1 - 3) & 7)));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 <<< 5) + (data_2 >>> 6)) & 5) <<< 5);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((((data_3 - 1) & ((data_3 - 10) + (data_3 | 1))) <<< 4) - 2) & 1);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 ^ 3) ^ 9) >>> ((data_4 >>> 1) | 5)) ^ 4);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((((data_5 & 4) + (data_5 - 7)) ^ (((data_5 & 7) + (data_5 & 2)) | (data_5 - 5))) & (((data_5 <<< 7) >>> 7) >>> 4));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((((data_6 >>> 6) >>> (((data_6 & 9) >>> 7) >>> 7)) ^ 6) >>> 9);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 | 7) | 5);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((((data_8 & 5) & (data_8 & 8)) <<< 7) <<< 5) + 4);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((((data_9 - 1) | (((data_9 >>> 5) >>> (data_9 <<< 5)) <<< 10)) ^ 5) | 3);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((((data_10 - 7) + ((data_10 >>> 2) <<< (data_10 & 7))) >>> (data_10 - 4)) <<< ((data_10 >>> 2) ^ (((data_10 - 6) <<< 7) <<< ((data_10 & 3) | 7)))) | (((data_10 | 1) | (data_10 ^ 3)) + 3));
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 | 2) <<< ((data_11 >>> 6) & 5)) + 5);
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 | 2) <<< ((data_12 >>> 6) & 5)) + 5);
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 - 2) >>> ((data_13 <<< 1) | 7)) | (((data_13 >>> 5) ^ (((data_13 | 7) ^ 7) - 9)) | ((data_13 | 10) + (data_13 ^ 3))));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((((data_14 >>> 3) - (data_14 | 1)) | 5) <<< ((((data_14 ^ 9) | 6) & (data_14 + 10)) + 5));
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((data_15 >>> 1) & 3) ^ 1);
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((((data_16 <<< 9) - (data_16 >>> 1)) >>> 9) | (data_16 <<< 9));
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((((data_17 <<< 9) - (data_17 >>> 1)) >>> 9) | (data_17 <<< 9));
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((((data_18 <<< 9) - (data_18 >>> 1)) >>> 9) | (data_18 <<< 9));
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((((data_19 <<< 9) - (data_19 >>> 1)) >>> 9) | (data_19 <<< 9));
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((((data_20 + 2) ^ 7) >>> ((data_20 | 10) <<< 5)) | (((data_20 & 7) - (data_20 >>> 1)) + (data_20 & 4)));
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((data_21 | 4) <<< (((((data_21 <<< 10) | (data_21 & 10)) <<< (data_21 + 8)) | (data_21 <<< 3)) + (data_21 >>> 6)));
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 | 4) <<< (((((data_22 <<< 10) | (data_22 & 10)) <<< (data_22 + 8)) | (data_22 <<< 3)) + (data_22 >>> 6)));
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 | 4) <<< (((((data_23 <<< 10) | (data_23 & 10)) <<< (data_23 + 8)) | (data_23 <<< 3)) + (data_23 >>> 6)));
    wire [WIDTH-1:0] data_25;
    assign data_25 = (((data_24 + 4) <<< ((data_24 - 2) - (((data_24 & 9) <<< 9) ^ (data_24 + 7)))) ^ (((data_24 & 6) - 9) <<< 7));
    wire [WIDTH-1:0] data_26;
    assign data_26 = (((data_25 + 9) - 5) >>> ((data_25 <<< 6) + 9));
    wire [WIDTH-1:0] data_27;
    assign data_27 = (((data_26 >>> 10) >>> (data_26 & 8)) >>> 2);
    wire [WIDTH-1:0] data_28;
    assign data_28 = (((data_27 ^ 6) & 5) - ((data_27 & 2) | ((data_27 + 1) + (data_27 & 6))));
    wire [WIDTH-1:0] data_29;
    assign data_29 = (((data_28 ^ 6) & 5) - ((data_28 & 2) | ((data_28 + 1) + (data_28 & 6))));
    wire [WIDTH-1:0] data_30;
    assign data_30 = (((data_29 ^ 6) & 5) - ((data_29 & 2) | ((data_29 + 1) + (data_29 & 6))));
    wire [WIDTH-1:0] data_31;
    assign data_31 = (((data_30 ^ 6) & 5) - ((data_30 & 2) | ((data_30 + 1) + (data_30 & 6))));
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((((data_31 <<< 3) + ((data_31 & 7) <<< 2)) - 2) - 5);
    wire [WIDTH-1:0] data_33;
    assign data_33 = (((data_32 - 8) <<< (data_32 >>> 7)) | 1);
    wire [WIDTH-1:0] data_34;
    assign data_34 = (((data_33 | 6) <<< ((data_33 | 10) >>> (data_33 >>> 3))) >>> 6);
    wire [WIDTH-1:0] data_35;
    assign data_35 = (((data_34 | 4) | 4) <<< 1);
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((data_35 & 4) & (((((data_35 - 2) ^ 1) + 4) & 2) - (data_35 | 1)));
    wire [WIDTH-1:0] data_37;
    assign data_37 = (((data_36 <<< 9) & ((data_36 - 8) + (data_36 + 1))) - 7);
    wire [WIDTH-1:0] data_38;
    assign data_38 = ((((data_37 | 7) >>> (data_37 - 4)) >>> 1) & (data_37 + 10));
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((data_38 ^ 10) | ((data_38 ^ 3) & 10));
    wire [WIDTH-1:0] data_40;
    assign data_40 = (((data_39 | 6) >>> (data_39 & 8)) | (((data_39 + 8) - 3) - (((data_39 | 10) + (data_39 | 6)) | 9)));
    wire [WIDTH-1:0] data_41;
    assign data_41 = (((data_40 >>> 5) - ((((data_40 + 6) <<< 7) + (data_40 ^ 5)) - ((data_40 | 2) >>> 8))) <<< 9);
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((data_41 | 5) + ((data_41 | 9) <<< ((data_41 >>> 7) + (data_41 <<< 9))));
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 | 5) + ((data_42 | 9) <<< ((data_42 >>> 7) + (data_42 <<< 9))));
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((data_43 | 5) + ((data_43 | 9) <<< ((data_43 >>> 7) + (data_43 <<< 9))));
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((data_44 | 5) + ((data_44 | 9) <<< ((data_44 >>> 7) + (data_44 <<< 9))));
    wire [WIDTH-1:0] data_46;
    assign data_46 = (((data_45 + 7) + (data_45 - 7)) & ((((data_45 & 2) + (data_45 <<< 8)) + (data_45 ^ 7)) >>> 8));
    wire [WIDTH-1:0] data_47;
    assign data_47 = (((data_46 + 7) + (data_46 - 7)) & ((((data_46 & 2) + (data_46 <<< 8)) + (data_46 ^ 7)) >>> 8));
    wire [WIDTH-1:0] data_48;
    assign data_48 = (((data_47 + 7) + (data_47 - 7)) & ((((data_47 & 2) + (data_47 <<< 8)) + (data_47 ^ 7)) >>> 8));
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((((data_48 & 4) + (data_48 + 7)) ^ ((data_48 | 3) & 5)) - (((data_48 & 8) >>> 3) - 7));
    wire [WIDTH-1:0] data_50;
    assign data_50 = (((((data_49 & 3) + 2) ^ ((data_49 <<< 5) <<< 8)) & ((data_49 | 1) | (data_49 + 1))) <<< 8);
    wire [WIDTH-1:0] data_51;
    assign data_51 = (((data_50 ^ 5) + 2) | 6);
    wire [WIDTH-1:0] data_52;
    assign data_52 = ((((data_51 <<< 5) >>> 2) - (data_51 & 3)) - 7);
    wire [WIDTH-1:0] data_53;
    assign data_53 = (((data_52 ^ 6) <<< ((data_52 - 5) - ((data_52 - 3) & 5))) - 9);
    wire [WIDTH-1:0] data_54;
    assign data_54 = (((((data_53 | 10) + (data_53 >>> 9)) | ((data_53 + 2) <<< (data_53 >>> 7))) + ((data_53 | 3) ^ 3)) >>> (data_53 <<< 6));
    wire [WIDTH-1:0] data_55;
    assign data_55 = (((((data_54 | 10) + (data_54 >>> 9)) | ((data_54 + 2) <<< (data_54 >>> 7))) + ((data_54 | 3) ^ 3)) >>> (data_54 <<< 6));
    wire [WIDTH-1:0] data_56;
    assign data_56 = (((((data_55 | 10) + (data_55 >>> 9)) | ((data_55 + 2) <<< (data_55 >>> 7))) + ((data_55 | 3) ^ 3)) >>> (data_55 <<< 6));
    wire [WIDTH-1:0] data_57;
    assign data_57 = (((((data_56 | 10) + (data_56 >>> 9)) | ((data_56 + 2) <<< (data_56 >>> 7))) + ((data_56 | 3) ^ 3)) >>> (data_56 <<< 6));
    wire [WIDTH-1:0] data_58;
    assign data_58 = (((data_57 ^ 5) ^ ((data_57 | 2) | 3)) & 2);
    wire [WIDTH-1:0] data_59;
    assign data_59 = (((data_58 ^ 5) ^ ((data_58 | 2) | 3)) & 2);
    wire [WIDTH-1:0] data_60;
    assign data_60 = ((((data_59 | 2) | ((data_59 | 3) & ((data_59 <<< 2) | (data_59 <<< 5)))) | 10) | ((data_59 + 8) ^ 5));
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((data_60 <<< 3) >>> (((data_60 <<< 8) ^ 2) - (((data_60 <<< 6) & 6) ^ 6)));
    wire [WIDTH-1:0] data_62;
    assign data_62 = (((((data_61 | 2) - ((data_61 & 5) | 6)) ^ (data_61 >>> 4)) & 5) + 9);
    wire [WIDTH-1:0] data_63;
    assign data_63 = (((((data_62 <<< 1) + (data_62 & 1)) + (data_62 >>> 2)) + (data_62 - 8)) <<< 9);
    wire [WIDTH-1:0] data_64;
    assign data_64 = ((data_63 | 5) | (((((data_63 <<< 2) & (data_63 - 7)) >>> 7) <<< ((data_63 ^ 4) | (data_63 ^ 4))) & 6));
    wire [WIDTH-1:0] data_65;
    assign data_65 = ((data_64 | 5) | (((((data_64 <<< 2) & (data_64 - 7)) >>> 7) <<< ((data_64 ^ 4) | (data_64 ^ 4))) & 6));
    wire [WIDTH-1:0] data_66;
    assign data_66 = ((data_65 ^ 9) + 4);
    wire [WIDTH-1:0] data_67;
    assign data_67 = ((((data_66 ^ 8) + 7) <<< 8) & 7);
    wire [WIDTH-1:0] data_68;
    assign data_68 = ((data_67 <<< 10) - 3);
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((((data_68 ^ 2) ^ 10) ^ ((data_68 | 4) & 2)) & 6);
    wire [WIDTH-1:0] data_70;
    assign data_70 = ((((data_69 >>> 7) >>> 1) <<< 5) - 7);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_70, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_5-1,"`define WIDTH 128
`define DEPTH 84

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 10) >>> 4) - 10) >>> ((in_data ^ 9) <<< 3)) ^ 8);
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 10) + 6) <<< (((in_data | 4) - (in_data - 3)) - 2));
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 8) ^ ((in_data | 5) ^ (in_data >>> 6))) - 3) <<< (((in_data + 1) >>> (in_data ^ 1)) & (((in_data >>> 9) >>> (in_data - 9)) - (in_data <<< 4)))) & (in_data <<< 9));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 2) & 8) >>> 6) & (in_data ^ 7)) <<< ((in_data + 8) ^ 9));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 1) + 10) ^ ((in_data <<< 6) & (in_data <<< 4))) + 9);
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 3) ^ 7) + 3) - 1);
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 4) >>> (in_data <<< 8)) | 9) & ((in_data ^ 2) - 2)) ^ 6);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 4) ^ 8) + (((in_data & 6) >>> (in_data >>> 3)) >>> 5)) | 8) <<< ((in_data & 3) - (in_data & 4)));
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 10) | ((in_data ^ 1) + (((in_data <<< 1) & 7) <<< 4)));
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 5) - (in_data & 4)) | (in_data | 3)) | 8) ^ 10);
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 7) + 6) + ((data[i] | 5) & (data[i] & 1))) ^ (data[i] + 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) >>> ((in_data & 9) >>> (in_data <<< 10)));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 4) <<< ((data[i] - 1) >>> 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 8) <<< 3) <<< (((in_data ^ 7) & 9) - 5));
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 10) - ((in_data & 5) + 3)) + (in_data - 1));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 1) | 5) + (data[i] ^ 8)) - 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 4) - 4);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 7) | ((data[i] & 5) <<< (((data[i] >>> 8) | 8) >>> 6))) + 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 10) ^ 8) + 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) - 5) | ((((in_data ^ 5) & (in_data >>> 2)) <<< 8) >>> ((in_data - 4) | (in_data & 5))));
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 2) ^ 2) | 10) >>> 6);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 6) <<< ((in_data - 1) - (in_data | 1))) | ((in_data | 1) >>> 8)) >>> 3);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] <<< 9) <<< (data[i] & 9)) ^ 2) + (data[i] | 9)) ^ ((((data[i] <<< 1) >>> (data[i] & 10)) ^ ((data[i] <<< 6) & (data[i] | 2))) <<< (data[i] - 6)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] & 10) <<< 9) ^ ((data[i] ^ 7) ^ (data[i] + 2))) >>> 10) <<< 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 5) + 9) & 7) | ((((data[i] <<< 1) | ((data[i] | 5) - 8)) | 8) <<< 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((((data[i] <<< 9) <<< 10) <<< 6) >>> ((data[i] <<< 4) <<< (data[i] + 9))) | 2) & ((data[i] & 1) | 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 3) | 8) - 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 5) | 2) & (((in_data & 9) >>> (in_data - 9)) ^ 1));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 1) >>> 10) <<< 9);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 4) - 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 4) ^ ((in_data + 3) | (in_data | 5))) ^ 4) >>> ((in_data | 6) ^ ((in_data - 4) <<< ((in_data >>> 3) >>> (in_data + 7)))));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 1) >>> ((in_data - 4) ^ 9)) <<< 4);
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] - 4) & 8) ^ 7) - 5) - 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 9) >>> 7) ^ (in_data | 9));
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) <<< 2);
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 7) >>> (data[i] ^ 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 2) ^ 10);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 2) ^ ((in_data <<< 3) - ((in_data | 1) | (in_data <<< 3))));
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 3) ^ (data[i] >>> 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 3) & (data[i] + 10)) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 2) + ((in_data >>> 4) >>> 5)) >>> ((in_data <<< 4) + ((in_data <<< 2) & 4))) + (((in_data & 2) >>> 6) >>> ((in_data <<< 3) + ((in_data ^ 5) ^ (in_data <<< 6)))));
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 4) - 3) - (((in_data - 1) | ((in_data <<< 3) + (in_data ^ 9))) + 10));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 8) <<< 7);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 9) | (((data[i] | 9) - ((data[i] <<< 7) & (data[i] >>> 6))) | ((data[i] & 1) ^ ((data[i] & 1) & 8))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 6) & (data[i] >>> 6)) >>> (data[i] - 9)) <<< ((((data[i] & 10) | (data[i] - 7)) <<< ((data[i] <<< 3) <<< 4)) - ((data[i] | 10) - 2)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 9) <<< (((in_data - 6) ^ (in_data | 4)) | 4)) | 8) | 4);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 7) + 5) - (in_data | 1)) + (((in_data | 5) + (in_data ^ 6)) <<< (in_data | 8))) ^ ((((in_data & 8) - 1) + (in_data >>> 7)) & (in_data >>> 7)));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 9) <<< (in_data | 3)) >>> 8);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 7) - ((in_data <<< 1) | 2)) & 2);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 4) + 5);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[78]), 
        .out_vld(ready[78])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[78]),
        .in_vld(ready[78]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[82]),
        .in_vld(ready[82]),
        .out_data(data[83]), 
        .out_vld(ready[83])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[83]),
        .in_vld(ready[83]),
        .out_data(data[84]), 
        .out_vld(ready[84])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 84

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data + 1) + 10) ^ ((in_data <<< 6) & (in_data <<< 4))) + 9);
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((((data_0 <<< 6) <<< ((data_0 - 1) - (data_0 | 1))) | ((data_0 | 1) >>> 8)) >>> 3);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((((data_1 + 4) ^ 8) + (((data_1 & 6) >>> (data_1 >>> 3)) >>> 5)) | 8) <<< ((data_1 & 3) - (data_1 & 4)));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 <<< 10) ^ 8) + 4);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 <<< 10) ^ 8) + 4);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((data_4 | 4) ^ ((data_4 + 3) | (data_4 | 5))) ^ 4) >>> ((data_4 | 6) ^ ((data_4 - 4) <<< ((data_4 >>> 3) >>> (data_4 + 7)))));
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((data_5 >>> 4) + 5);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((data_6 >>> 4) + 5);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 >>> 4) + 5);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 - 1) >>> ((data_8 - 4) ^ 9)) <<< 4);
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((data_9 <<< 2) ^ 10);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((((data_10 - 2) & 8) >>> 6) & (data_10 ^ 7)) <<< ((data_10 + 8) ^ 9));
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 & 3) | 8) - 3);
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 & 3) | 8) - 3);
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((data_13 + 4) <<< ((data_13 - 1) >>> 6));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 + 4) <<< ((data_14 - 1) >>> 6));
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 + 4) <<< ((data_15 - 1) >>> 6));
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((((data_16 + 7) + 5) - (data_16 | 1)) + (((data_16 | 5) + (data_16 ^ 6)) <<< (data_16 | 8))) ^ ((((data_16 & 8) - 1) + (data_16 >>> 7)) & (data_16 >>> 7)));
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((data_17 & 3) <<< 2);
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((data_18 & 3) >>> ((data_18 & 9) >>> (data_18 <<< 10)));
    wire [WIDTH-1:0] data_20;
    assign data_20 = (((data_19 - 4) - 3) - (((data_19 - 1) | ((data_19 <<< 3) + (data_19 ^ 9))) + 10));
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((((data_20 ^ 7) + 6) + ((data_20 | 5) & (data_20 & 1))) ^ (data_20 + 1));
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((((data_21 ^ 7) + 6) + ((data_21 | 5) & (data_21 & 1))) ^ (data_21 + 1));
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((((data_22 | 3) ^ 7) + 3) - 1);
    wire [WIDTH-1:0] data_24;
    assign data_24 = ((data_23 >>> 2) ^ ((data_23 <<< 3) - ((data_23 | 1) | (data_23 <<< 3))));
    wire [WIDTH-1:0] data_25;
    assign data_25 = (((data_24 - 1) >>> 10) <<< 9);
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((((data_25 ^ 5) + 9) & 7) | ((((data_25 <<< 1) | ((data_25 | 5) - 8)) | 8) <<< 9));
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((((data_26 ^ 5) + 9) & 7) | ((((data_26 <<< 1) | ((data_26 | 5) - 8)) | 8) <<< 9));
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((data_27 | 4) - 1);
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((data_28 | 4) - 1);
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((data_29 | 4) - 1);
    wire [WIDTH-1:0] data_31;
    assign data_31 = (((((data_30 ^ 4) >>> (data_30 <<< 8)) | 9) & ((data_30 ^ 2) - 2)) ^ 6);
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((data_31 & 3) ^ (data_31 >>> 2));
    wire [WIDTH-1:0] data_33;
    assign data_33 = ((data_32 & 3) ^ (data_32 >>> 2));
    wire [WIDTH-1:0] data_34;
    assign data_34 = ((data_33 <<< 7) >>> (data_33 ^ 6));
    wire [WIDTH-1:0] data_35;
    assign data_35 = ((data_34 <<< 7) >>> (data_34 ^ 6));
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((((data_35 >>> 6) & (data_35 >>> 6)) >>> (data_35 - 9)) <<< ((((data_35 & 10) | (data_35 - 7)) <<< ((data_35 <<< 3) <<< 4)) - ((data_35 | 10) - 2)));
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((((data_36 >>> 6) & (data_36 >>> 6)) >>> (data_36 - 9)) <<< ((((data_36 & 10) | (data_36 - 7)) <<< ((data_36 <<< 3) <<< 4)) - ((data_36 | 10) - 2)));
    wire [WIDTH-1:0] data_38;
    assign data_38 = ((((data_37 >>> 6) & (data_37 >>> 6)) >>> (data_37 - 9)) <<< ((((data_37 & 10) | (data_37 - 7)) <<< ((data_37 <<< 3) <<< 4)) - ((data_37 | 10) - 2)));
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((((data_38 & 2) ^ 2) | 10) >>> 6);
    wire [WIDTH-1:0] data_40;
    assign data_40 = ((((data_39 >>> 2) + ((data_39 >>> 4) >>> 5)) >>> ((data_39 <<< 4) + ((data_39 <<< 2) & 4))) + (((data_39 & 2) >>> 6) >>> ((data_39 <<< 3) + ((data_39 ^ 5) ^ (data_39 <<< 6)))));
    wire [WIDTH-1:0] data_41;
    assign data_41 = (((data_40 & 7) - ((data_40 <<< 1) | 2)) & 2);
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((((data_41 >>> 9) <<< (((data_41 - 6) ^ (data_41 | 4)) | 4)) | 8) | 4);
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((data_42 & 4) - 4);
    wire [WIDTH-1:0] data_44;
    assign data_44 = (((data_43 - 5) | 2) & (((data_43 & 9) >>> (data_43 - 9)) ^ 1));
    wire [WIDTH-1:0] data_45;
    assign data_45 = (((((data_44 ^ 5) - (data_44 & 4)) | (data_44 | 3)) | 8) ^ 10);
    wire [WIDTH-1:0] data_46;
    assign data_46 = (((data_45 >>> 10) + 6) <<< (((data_45 | 4) - (data_45 - 3)) - 2));
    wire [WIDTH-1:0] data_47;
    assign data_47 = ((((data_46 | 1) | 5) + (data_46 ^ 8)) - 7);
    wire [WIDTH-1:0] data_48;
    assign data_48 = ((((data_47 | 1) | 5) + (data_47 ^ 8)) - 7);
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((((data_48 | 1) | 5) + (data_48 ^ 8)) - 7);
    wire [WIDTH-1:0] data_50;
    assign data_50 = ((((data_49 | 1) | 5) + (data_49 ^ 8)) - 7);
    wire [WIDTH-1:0] data_51;
    assign data_51 = (((data_50 >>> 4) - 5) | ((((data_50 ^ 5) & (data_50 >>> 2)) <<< 8) >>> ((data_50 - 4) | (data_50 & 5))));
    wire [WIDTH-1:0] data_52;
    assign data_52 = (((data_51 ^ 9) <<< (data_51 | 3)) >>> 8);
    wire [WIDTH-1:0] data_53;
    assign data_53 = ((data_52 + 8) <<< 7);
    wire [WIDTH-1:0] data_54;
    assign data_54 = (((((data_53 & 10) >>> 4) - 10) >>> ((data_53 ^ 9) <<< 3)) ^ 8);
    wire [WIDTH-1:0] data_55;
    assign data_55 = (((((data_54 & 10) <<< 9) ^ ((data_54 ^ 7) ^ (data_54 + 2))) >>> 10) <<< 9);
    wire [WIDTH-1:0] data_56;
    assign data_56 = (((((data_55 & 10) <<< 9) ^ ((data_55 ^ 7) ^ (data_55 + 2))) >>> 10) <<< 9);
    wire [WIDTH-1:0] data_57;
    assign data_57 = (((((data_56 & 10) <<< 9) ^ ((data_56 ^ 7) ^ (data_56 + 2))) >>> 10) <<< 9);
    wire [WIDTH-1:0] data_58;
    assign data_58 = (((((data_57 & 10) <<< 9) ^ ((data_57 ^ 7) ^ (data_57 + 2))) >>> 10) <<< 9);
    wire [WIDTH-1:0] data_59;
    assign data_59 = (((data_58 >>> 10) - ((data_58 & 5) + 3)) + (data_58 - 1));
    wire [WIDTH-1:0] data_60;
    assign data_60 = (((data_59 >>> 3) & (data_59 + 10)) >>> 3);
    wire [WIDTH-1:0] data_61;
    assign data_61 = (((data_60 >>> 3) & (data_60 + 10)) >>> 3);
    wire [WIDTH-1:0] data_62;
    assign data_62 = (((data_61 >>> 3) & (data_61 + 10)) >>> 3);
    wire [WIDTH-1:0] data_63;
    assign data_63 = (((data_62 ^ 9) >>> 7) ^ (data_62 | 9));
    wire [WIDTH-1:0] data_64;
    assign data_64 = (((((data_63 - 4) & 8) ^ 7) - 5) - 3);
    wire [WIDTH-1:0] data_65;
    assign data_65 = (((((data_64 - 4) & 8) ^ 7) - 5) - 3);
    wire [WIDTH-1:0] data_66;
    assign data_66 = (((((data_65 - 4) & 8) ^ 7) - 5) - 3);
    wire [WIDTH-1:0] data_67;
    assign data_67 = ((data_66 ^ 10) | ((data_66 ^ 1) + (((data_66 <<< 1) & 7) <<< 4)));
    wire [WIDTH-1:0] data_68;
    assign data_68 = ((((((data_67 <<< 9) <<< 10) <<< 6) >>> ((data_67 <<< 4) <<< (data_67 + 9))) | 2) & ((data_67 & 1) | 6));
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((((((data_68 <<< 9) <<< 10) <<< 6) >>> ((data_68 <<< 4) <<< (data_68 + 9))) | 2) & ((data_68 & 1) | 6));
    wire [WIDTH-1:0] data_70;
    assign data_70 = ((((((data_69 <<< 9) <<< 10) <<< 6) >>> ((data_69 <<< 4) <<< (data_69 + 9))) | 2) & ((data_69 & 1) | 6));
    wire [WIDTH-1:0] data_71;
    assign data_71 = ((((((data_70 <<< 9) <<< 10) <<< 6) >>> ((data_70 <<< 4) <<< (data_70 + 9))) | 2) & ((data_70 & 1) | 6));
    wire [WIDTH-1:0] data_72;
    assign data_72 = (((((data_71 <<< 9) <<< (data_71 & 9)) ^ 2) + (data_71 | 9)) ^ ((((data_71 <<< 1) >>> (data_71 & 10)) ^ ((data_71 <<< 6) & (data_71 | 2))) <<< (data_71 - 6)));
    wire [WIDTH-1:0] data_73;
    assign data_73 = (((((data_72 <<< 9) <<< (data_72 & 9)) ^ 2) + (data_72 | 9)) ^ ((((data_72 <<< 1) >>> (data_72 & 10)) ^ ((data_72 <<< 6) & (data_72 | 2))) <<< (data_72 - 6)));
    wire [WIDTH-1:0] data_74;
    assign data_74 = (((((data_73 <<< 9) <<< (data_73 & 9)) ^ 2) + (data_73 | 9)) ^ ((((data_73 <<< 1) >>> (data_73 & 10)) ^ ((data_73 <<< 6) & (data_73 | 2))) <<< (data_73 - 6)));
    wire [WIDTH-1:0] data_75;
    assign data_75 = (((((data_74 <<< 9) <<< (data_74 & 9)) ^ 2) + (data_74 | 9)) ^ ((((data_74 <<< 1) >>> (data_74 & 10)) ^ ((data_74 <<< 6) & (data_74 | 2))) <<< (data_74 - 6)));
    wire [WIDTH-1:0] data_76;
    assign data_76 = ((data_75 >>> 9) | (((data_75 | 9) - ((data_75 <<< 7) & (data_75 >>> 6))) | ((data_75 & 1) ^ ((data_75 & 1) & 8))));
    wire [WIDTH-1:0] data_77;
    assign data_77 = ((data_76 >>> 9) | (((data_76 | 9) - ((data_76 <<< 7) & (data_76 >>> 6))) | ((data_76 & 1) ^ ((data_76 & 1) & 8))));
    wire [WIDTH-1:0] data_78;
    assign data_78 = (((data_77 ^ 7) | ((data_77 & 5) <<< (((data_77 >>> 8) | 8) >>> 6))) + 1);
    wire [WIDTH-1:0] data_79;
    assign data_79 = (((data_78 ^ 7) | ((data_78 & 5) <<< (((data_78 >>> 8) | 8) >>> 6))) + 1);
    wire [WIDTH-1:0] data_80;
    assign data_80 = (((data_79 ^ 7) | ((data_79 & 5) <<< (((data_79 >>> 8) | 8) >>> 6))) + 1);
    wire [WIDTH-1:0] data_81;
    assign data_81 = (((data_80 ^ 7) | ((data_80 & 5) <<< (((data_80 >>> 8) | 8) >>> 6))) + 1);
    wire [WIDTH-1:0] data_82;
    assign data_82 = (((data_81 ^ 8) <<< 3) <<< (((data_81 ^ 7) & 9) - 5));
    wire [WIDTH-1:0] data_83;
    assign data_83 = (((((data_82 ^ 8) ^ ((data_82 | 5) ^ (data_82 >>> 6))) - 3) <<< (((data_82 + 1) >>> (data_82 ^ 1)) & (((data_82 >>> 9) >>> (data_82 - 9)) - (data_82 <<< 4)))) & (data_82 <<< 9));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_83, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_5-2,"`define WIDTH 128
`define DEPTH 85

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((((in_data - 3) - (in_data ^ 10)) <<< 9) + (in_data | 8)) - (in_data <<< 10)) ^ (((in_data | 8) + ((in_data + 1) + 4)) <<< ((in_data >>> 8) + 8)));
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 2) + (in_data <<< 2)) >>> (in_data + 6)) & 8);
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] - 4) - 1) | ((data[i] >>> 1) | ((data[i] + 3) - 9))) & 8) + 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 2) >>> 3) + ((data[i] | 10) & 4)) - (data[i] <<< 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 2) & 7);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 2) + 8) | ((data[i] <<< 6) - 6)) - 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 6) | ((in_data - 3) <<< (in_data >>> 8))) - ((in_data >>> 1) + 10)) & 8) | ((in_data + 1) >>> (((in_data - 3) ^ (in_data | 7)) - 6)));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 5) | ((data[i] - 8) <<< 6)) >>> ((((data[i] + 2) >>> (data[i] <<< 4)) <<< (((data[i] - 9) + 3) | ((data[i] + 9) <<< (data[i] + 9)))) <<< 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 5) + (in_data <<< 7)) >>> 3) | ((in_data <<< 5) >>> 9)) ^ 5);
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 10) >>> ((in_data >>> 8) + (in_data <<< 2)));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 8) | (in_data ^ 7)) & 6) ^ ((in_data - 9) >>> (((in_data ^ 6) >>> (in_data - 4)) | 9)));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 4) + (data[i] ^ 3)) <<< (data[i] ^ 1)) - 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) & 2) - (((in_data & 3) >>> 3) & ((in_data ^ 3) ^ (in_data + 6))));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 6) + ((in_data - 9) | (in_data + 5)));
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 5) <<< 1);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 7) >>> 2);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 1) >>> (data[i] ^ 6)) ^ ((((data[i] ^ 4) >>> ((data[i] & 2) <<< 6)) + (data[i] | 6)) & 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((((in_data ^ 6) + 6) ^ 2) ^ 9) <<< (((in_data <<< 10) | (in_data + 8)) ^ 3)) - 10);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 2) ^ 5) ^ (in_data | 6)) + 6) & 8);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 1) - 6) & (((in_data <<< 3) & (in_data | 8)) & (in_data >>> 4))) & (((in_data & 2) & 10) | 9));
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 5) | 5) ^ ((in_data - 10) | ((in_data - 10) & 5)));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 4) <<< (in_data >>> 9)) ^ (in_data - 6)) + ((in_data - 4) | (in_data + 10))) - (((in_data ^ 8) | (((in_data >>> 3) - (in_data + 2)) - (in_data - 2))) <<< 1));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 1) | 5) & ((in_data - 7) ^ (in_data <<< 7))) + ((in_data + 9) ^ (in_data & 2)));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 4) + 9) >>> (data[i] | 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 8) <<< 10);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 8) | (in_data + 7)) - 7) ^ 5);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 7) + 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 9) + 7);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] + 10) >>> 6) | (data[i] | 6)) <<< ((data[i] - 4) & ((data[i] ^ 4) & 8))) - 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 8) & 9);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 6) - 9) <<< (in_data >>> 1)) | 8) >>> 2);
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 5) + 7) >>> 2);
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 9) + (in_data | 8)) ^ 10);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 10) - (data[i] | 1)) | (((data[i] >>> 5) | (data[i] | 6)) - 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 2) | 7) - 7);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 5) + (((data[i] & 5) <<< (((data[i] - 8) >>> 10) >>> (data[i] <<< 6))) >>> ((data[i] <<< 8) >>> ((data[i] | 1) + ((data[i] >>> 5) | (data[i] | 1))))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) + 3) >>> 2);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 10) ^ 6) >>> (data[i] - 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 2) | ((in_data - 1) <<< (in_data & 2)));
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) >>> 9) - 2);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 3) ^ 8) | 5) | ((((in_data | 7) | (in_data >>> 10)) + ((in_data & 6) + 5)) <<< 1));
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 9) | (data[i] - 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 4) | 9);
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 4) + (data[i] - 2)) <<< ((data[i] + 3) ^ ((data[i] ^ 9) ^ 3))) - ((((data[i] - 9) <<< 4) | (data[i] + 7)) ^ ((data[i] & 10) - (data[i] & 3))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 6) + 5) <<< 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 2) & ((data[i] & 10) ^ (data[i] + 8))) - 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 9) <<< (((in_data >>> 2) + 1) - 9));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) & 1) - 1);
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 6) & ((data[i] - 8) - (data[i] + 4))) & 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 9) <<< 5);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[77]),
        .in_vld(ready[77]),
        .out_data(data[78]), 
        .out_vld(ready[78])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[78]),
        .in_vld(ready[78]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[79]),
        .in_vld(ready[79]),
        .out_data(data[80]), 
        .out_vld(ready[80])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[80]),
        .in_vld(ready[80]),
        .out_data(data[84]), 
        .out_vld(ready[84])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[84]),
        .in_vld(ready[84]),
        .out_data(data[85]), 
        .out_vld(ready[85])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 85

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((((in_data + 10) >>> 6) | (in_data | 6)) <<< ((in_data - 4) & ((in_data ^ 4) & 8))) - 9);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((((data_0 + 10) >>> 6) | (data_0 | 6)) <<< ((data_0 - 4) & ((data_0 ^ 4) & 8))) - 9);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 + 10) - (data_1 | 1)) | (((data_1 >>> 5) | (data_1 | 6)) - 8));
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 + 10) - (data_2 | 1)) | (((data_2 >>> 5) | (data_2 | 6)) - 8));
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 + 10) ^ 6) >>> (data_3 - 3));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 + 10) ^ 6) >>> (data_4 - 3));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 + 10) ^ 6) >>> (data_5 - 3));
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((((data_6 >>> 1) - 6) & (((data_6 <<< 3) & (data_6 | 8)) & (data_6 >>> 4))) & (((data_6 & 2) & 10) | 9));
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((((((data_7 ^ 6) + 6) ^ 2) ^ 9) <<< (((data_7 <<< 10) | (data_7 + 8)) ^ 3)) - 10);
    wire [WIDTH-1:0] data_9;
    assign data_9 = ((data_8 + 6) + ((data_8 - 9) | (data_8 + 5)));
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((((data_9 <<< 4) <<< (data_9 >>> 9)) ^ (data_9 - 6)) + ((data_9 - 4) | (data_9 + 10))) - (((data_9 ^ 8) | (((data_9 >>> 3) - (data_9 + 2)) - (data_9 - 2))) <<< 1));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((data_10 + 5) + (((data_10 & 5) <<< (((data_10 - 8) >>> 10) >>> (data_10 <<< 6))) >>> ((data_10 <<< 8) >>> ((data_10 | 1) + ((data_10 >>> 5) | (data_10 | 1))))));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((data_11 + 5) + (((data_11 & 5) <<< (((data_11 - 8) >>> 10) >>> (data_11 <<< 6))) >>> ((data_11 <<< 8) >>> ((data_11 | 1) + ((data_11 >>> 5) | (data_11 | 1))))));
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 >>> 4) & 1) - 1);
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((((data_13 + 6) - 9) <<< (data_13 >>> 1)) | 8) >>> 2);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((((data_14 >>> 8) | (data_14 ^ 7)) & 6) ^ ((data_14 - 9) >>> (((data_14 ^ 6) >>> (data_14 - 4)) | 9)));
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((data_15 <<< 9) <<< 5);
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((((data_16 - 4) - 1) | ((data_16 >>> 1) | ((data_16 + 3) - 9))) & 8) + 7);
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((((data_17 - 4) - 1) | ((data_17 >>> 1) | ((data_17 + 3) - 9))) & 8) + 7);
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((((((data_18 - 3) - (data_18 ^ 10)) <<< 9) + (data_18 | 8)) - (data_18 <<< 10)) ^ (((data_18 | 8) + ((data_18 + 1) + 4)) <<< ((data_18 >>> 8) + 8)));
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((((data_19 + 2) >>> 3) + ((data_19 | 10) & 4)) - (data_19 <<< 4));
    wire [WIDTH-1:0] data_21;
    assign data_21 = ((((data_20 + 2) >>> 3) + ((data_20 | 10) & 4)) - (data_20 <<< 4));
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((((data_21 + 2) >>> 3) + ((data_21 | 10) & 4)) - (data_21 <<< 4));
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((((data_22 + 2) >>> 3) + ((data_22 | 10) & 4)) - (data_22 <<< 4));
    wire [WIDTH-1:0] data_24;
    assign data_24 = (((data_23 ^ 2) + 3) >>> 2);
    wire [WIDTH-1:0] data_25;
    assign data_25 = (((data_24 | 2) & ((data_24 & 10) ^ (data_24 + 8))) - 10);
    wire [WIDTH-1:0] data_26;
    assign data_26 = (((data_25 | 2) & ((data_25 & 10) ^ (data_25 + 8))) - 10);
    wire [WIDTH-1:0] data_27;
    assign data_27 = (((data_26 | 2) & ((data_26 & 10) ^ (data_26 + 8))) - 10);
    wire [WIDTH-1:0] data_28;
    assign data_28 = (((data_27 | 2) & ((data_27 & 10) ^ (data_27 + 8))) - 10);
    wire [WIDTH-1:0] data_29;
    assign data_29 = ((data_28 & 7) >>> 2);
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((((data_29 & 1) | 5) & ((data_29 - 7) ^ (data_29 <<< 7))) + ((data_29 + 9) ^ (data_29 & 2)));
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((((data_30 + 4) + (data_30 - 2)) <<< ((data_30 + 3) ^ ((data_30 ^ 9) ^ 3))) - ((((data_30 - 9) <<< 4) | (data_30 + 7)) ^ ((data_30 & 10) - (data_30 & 3))));
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((((data_31 + 4) + (data_31 - 2)) <<< ((data_31 + 3) ^ ((data_31 ^ 9) ^ 3))) - ((((data_31 - 9) <<< 4) | (data_31 + 7)) ^ ((data_31 & 10) - (data_31 & 3))));
    wire [WIDTH-1:0] data_33;
    assign data_33 = ((((data_32 + 4) + (data_32 - 2)) <<< ((data_32 + 3) ^ ((data_32 ^ 9) ^ 3))) - ((((data_32 - 9) <<< 4) | (data_32 + 7)) ^ ((data_32 & 10) - (data_32 & 3))));
    wire [WIDTH-1:0] data_34;
    assign data_34 = ((data_33 >>> 2) & 7);
    wire [WIDTH-1:0] data_35;
    assign data_35 = ((data_34 - 4) | 9);
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((data_35 + 9) + 7);
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((((data_36 - 2) + (data_36 <<< 2)) >>> (data_36 + 6)) & 8);
    wire [WIDTH-1:0] data_38;
    assign data_38 = (((data_37 | 5) | ((data_37 - 8) <<< 6)) >>> ((((data_37 + 2) >>> (data_37 <<< 4)) <<< (((data_37 - 9) + 3) | ((data_37 + 9) <<< (data_37 + 9)))) <<< 2));
    wire [WIDTH-1:0] data_39;
    assign data_39 = (((data_38 | 5) | ((data_38 - 8) <<< 6)) >>> ((((data_38 + 2) >>> (data_38 <<< 4)) <<< (((data_38 - 9) + 3) | ((data_38 + 9) <<< (data_38 + 9)))) <<< 2));
    wire [WIDTH-1:0] data_40;
    assign data_40 = (((data_39 | 5) | ((data_39 - 8) <<< 6)) >>> ((((data_39 + 2) >>> (data_39 <<< 4)) <<< (((data_39 - 9) + 3) | ((data_39 + 9) <<< (data_39 + 9)))) <<< 2));
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((data_40 & 9) <<< (((data_40 >>> 2) + 1) - 9));
    wire [WIDTH-1:0] data_42;
    assign data_42 = (((data_41 + 1) >>> (data_41 ^ 6)) ^ ((((data_41 ^ 4) >>> ((data_41 & 2) <<< 6)) + (data_41 | 6)) & 4));
    wire [WIDTH-1:0] data_43;
    assign data_43 = (((data_42 + 1) >>> (data_42 ^ 6)) ^ ((((data_42 ^ 4) >>> ((data_42 & 2) <<< 6)) + (data_42 | 6)) & 4));
    wire [WIDTH-1:0] data_44;
    assign data_44 = (((data_43 + 1) >>> (data_43 ^ 6)) ^ ((((data_43 ^ 4) >>> ((data_43 & 2) <<< 6)) + (data_43 | 6)) & 4));
    wire [WIDTH-1:0] data_45;
    assign data_45 = (((data_44 + 1) >>> (data_44 ^ 6)) ^ ((((data_44 ^ 4) >>> ((data_44 & 2) <<< 6)) + (data_44 | 6)) & 4));
    wire [WIDTH-1:0] data_46;
    assign data_46 = ((data_45 >>> 7) + 1);
    wire [WIDTH-1:0] data_47;
    assign data_47 = ((data_46 >>> 7) + 1);
    wire [WIDTH-1:0] data_48;
    assign data_48 = (((((data_47 & 5) + (data_47 <<< 7)) >>> 3) | ((data_47 <<< 5) >>> 9)) ^ 5);
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((((data_48 | 4) + (data_48 ^ 3)) <<< (data_48 ^ 1)) - 10);
    wire [WIDTH-1:0] data_50;
    assign data_50 = ((((data_49 | 4) + (data_49 ^ 3)) <<< (data_49 ^ 1)) - 10);
    wire [WIDTH-1:0] data_51;
    assign data_51 = ((((data_50 | 4) + (data_50 ^ 3)) <<< (data_50 ^ 1)) - 10);
    wire [WIDTH-1:0] data_52;
    assign data_52 = (((data_51 & 6) + 5) <<< 4);
    wire [WIDTH-1:0] data_53;
    assign data_53 = (((data_52 & 6) + 5) <<< 4);
    wire [WIDTH-1:0] data_54;
    assign data_54 = (((data_53 & 6) + 5) <<< 4);
    wire [WIDTH-1:0] data_55;
    assign data_55 = ((data_54 ^ 8) & 9);
    wire [WIDTH-1:0] data_56;
    assign data_56 = (((data_55 ^ 6) >>> 9) - 2);
    wire [WIDTH-1:0] data_57;
    assign data_57 = (((((data_56 + 6) | ((data_56 - 3) <<< (data_56 >>> 8))) - ((data_56 >>> 1) + 10)) & 8) | ((data_56 + 1) >>> (((data_56 - 3) ^ (data_56 | 7)) - 6)));
    wire [WIDTH-1:0] data_58;
    assign data_58 = (((data_57 & 5) + 7) >>> 2);
    wire [WIDTH-1:0] data_59;
    assign data_59 = (((data_58 ^ 2) & 2) - (((data_58 & 3) >>> 3) & ((data_58 ^ 3) ^ (data_58 + 6))));
    wire [WIDTH-1:0] data_60;
    assign data_60 = (((data_59 - 2) | 7) - 7);
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((((data_60 | 2) + 8) | ((data_60 <<< 6) - 6)) - 9);
    wire [WIDTH-1:0] data_62;
    assign data_62 = ((((data_61 | 2) + 8) | ((data_61 <<< 6) - 6)) - 9);
    wire [WIDTH-1:0] data_63;
    assign data_63 = ((((data_62 | 2) + 8) | ((data_62 <<< 6) - 6)) - 9);
    wire [WIDTH-1:0] data_64;
    assign data_64 = ((((data_63 | 2) + 8) | ((data_63 <<< 6) - 6)) - 9);
    wire [WIDTH-1:0] data_65;
    assign data_65 = ((data_64 <<< 9) | (data_64 - 5));
    wire [WIDTH-1:0] data_66;
    assign data_66 = ((data_65 <<< 9) | (data_65 - 5));
    wire [WIDTH-1:0] data_67;
    assign data_67 = ((data_66 <<< 9) | (data_66 - 5));
    wire [WIDTH-1:0] data_68;
    assign data_68 = ((data_67 <<< 9) | (data_67 - 5));
    wire [WIDTH-1:0] data_69;
    assign data_69 = (((data_68 <<< 6) & ((data_68 - 8) - (data_68 + 4))) & 6);
    wire [WIDTH-1:0] data_70;
    assign data_70 = (((data_69 <<< 6) & ((data_69 - 8) - (data_69 + 4))) & 6);
    wire [WIDTH-1:0] data_71;
    assign data_71 = (((data_70 <<< 6) & ((data_70 - 8) - (data_70 + 4))) & 6);
    wire [WIDTH-1:0] data_72;
    assign data_72 = (((((data_71 + 2) ^ 5) ^ (data_71 | 6)) + 6) & 8);
    wire [WIDTH-1:0] data_73;
    assign data_73 = (((data_72 >>> 5) | 5) ^ ((data_72 - 10) | ((data_72 - 10) & 5)));
    wire [WIDTH-1:0] data_74;
    assign data_74 = ((data_73 - 5) <<< 1);
    wire [WIDTH-1:0] data_75;
    assign data_75 = (((data_74 + 9) + (data_74 | 8)) ^ 10);
    wire [WIDTH-1:0] data_76;
    assign data_76 = ((data_75 <<< 8) <<< 10);
    wire [WIDTH-1:0] data_77;
    assign data_77 = ((data_76 | 2) | ((data_76 - 1) <<< (data_76 & 2)));
    wire [WIDTH-1:0] data_78;
    assign data_78 = ((((data_77 & 3) ^ 8) | 5) | ((((data_77 | 7) | (data_77 >>> 10)) + ((data_77 & 6) + 5)) <<< 1));
    wire [WIDTH-1:0] data_79;
    assign data_79 = ((((data_78 >>> 8) | (data_78 + 7)) - 7) ^ 5);
    wire [WIDTH-1:0] data_80;
    assign data_80 = (((data_79 >>> 4) + 9) >>> (data_79 | 7));
    wire [WIDTH-1:0] data_81;
    assign data_81 = (((data_80 >>> 4) + 9) >>> (data_80 | 7));
    wire [WIDTH-1:0] data_82;
    assign data_82 = (((data_81 >>> 4) + 9) >>> (data_81 | 7));
    wire [WIDTH-1:0] data_83;
    assign data_83 = (((data_82 >>> 4) + 9) >>> (data_82 | 7));
    wire [WIDTH-1:0] data_84;
    assign data_84 = ((data_83 | 10) >>> ((data_83 >>> 8) + (data_83 <<< 2)));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_84, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_5-3,"`define WIDTH 128
`define DEPTH 80

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 2) - 9) | 3) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 1) ^ 9);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 10) & 8) <<< 8) + 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 7) - 1) ^ (((in_data >>> 6) >>> ((in_data + 4) | 2)) >>> 5));
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 8) | 5) & 1) >>> (in_data + 10)) & ((in_data + 5) <<< ((in_data | 5) & 2)));
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 4) & 9) + ((in_data >>> 5) & 7)) ^ 8) | 7);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 6) ^ (((in_data <<< 9) - 3) - (in_data <<< 10))) >>> (((in_data + 7) + 4) & ((in_data <<< 4) + 1))) - 6);
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 1) <<< 10) - 9);
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 5) & 9) + 6) & 10) & (in_data <<< 4));
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 8) & 1) | (((data[i] ^ 10) <<< 4) & ((data[i] <<< 6) <<< (data[i] - 4)))) ^ (((data[i] | 2) - 2) >>> 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 4) ^ (in_data >>> 8));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((((in_data | 5) + (in_data - 10)) & 6) - (in_data | 2)) & 9) ^ 3);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 10) | (in_data - 9)) - ((in_data <<< 4) ^ (((in_data ^ 7) ^ 6) | 7)));
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 6) - 4) - 1);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 6) ^ 1);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 10) & 10) & 1);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 3) ^ ((data[i] >>> 3) ^ (data[i] - 7))) + 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 9) >>> ((in_data + 6) <<< 1)) - 7) - ((in_data - 7) ^ ((in_data - 2) + 2)));
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 1) <<< 6) + 5) & 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 1) <<< 2) <<< 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 3) + (in_data + 1)) & (in_data & 10)) - ((((in_data | 7) | ((in_data & 8) <<< 1)) | 1) - ((in_data - 9) - (((in_data >>> 8) >>> 4) | (in_data - 8)))));
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 1) ^ 4) + ((data[i] + 7) + (((data[i] - 7) | 1) - 8))) - ((data[i] >>> 8) | 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 6) | ((in_data | 5) <<< ((((in_data ^ 6) <<< 6) - 5) ^ 2)));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 5) + ((data[i] | 7) & 4)) + (data[i] ^ 4)) ^ 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 9) - 9);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 5) >>> 7);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 4) >>> 5) >>> ((in_data | 9) <<< (in_data - 9))) - 7) + 7);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 3) | 2) >>> 7) >>> 7);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 5) - (in_data & 10));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((((data[i] | 4) | 8) & 4) - (data[i] - 9)) ^ 6) & 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 8) & (in_data & 9)) >>> (in_data - 1)) + (in_data - 2)) - ((in_data ^ 8) - (in_data - 5)));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 9) <<< 10);
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 8) <<< 6) | 8) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 10) & 4) + (((data[i] <<< 3) >>> 7) | 2)) | 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 2) ^ (((data[i] - 6) | (data[i] + 6)) | (data[i] >>> 8))) & 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 8) - 3) <<< ((((in_data <<< 10) >>> (in_data >>> 8)) >>> (in_data <<< 7)) & ((in_data | 2) & 8))) + (in_data <<< 7));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 6) <<< 10) & ((in_data & 8) & 10));
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data >>> 4) >>> (in_data ^ 9)) & 1) <<< (in_data >>> 4)) & 8);
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data | 5) <<< (in_data & 8)) - (in_data | 2)) ^ 7) + 5);
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 2) | ((in_data ^ 8) | 2)) <<< (((in_data + 6) - 3) | ((in_data - 6) ^ ((in_data | 9) + 10)))) & (((in_data >>> 9) ^ 9) | (in_data | 4)));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data >>> 7) - (in_data ^ 2)) >>> (in_data + 3)) >>> (((in_data >>> 9) | 1) - ((in_data - 8) & 3))) & 1);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 8) ^ 6);
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 5) ^ 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 10) >>> ((in_data - 2) - (in_data ^ 5))) - ((in_data >>> 10) ^ 2)) - 3);
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 6) - (in_data - 4)) ^ 7);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 6) >>> 4) - 1) - (in_data <<< 10));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 5) & 2) <<< (((in_data | 6) <<< ((in_data | 4) & (in_data >>> 6))) <<< (in_data ^ 6))) & (((in_data + 9) & 7) - 1));
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 3) >>> ((in_data | 3) <<< (in_data | 7))) & 6) & 4);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 7) | ((data[i] | 2) ^ ((data[i] ^ 3) & (((data[i] >>> 3) - 8) & 5))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 8) | ((data[i] >>> 10) + 4)) >>> 8);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[79]),
        .in_vld(ready[79]),
        .out_data(data[80]), 
        .out_vld(ready[80])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 80

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((in_data + 4) ^ (in_data >>> 8));
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 ^ 3) ^ ((data_0 >>> 3) ^ (data_0 - 7))) + 7);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 ^ 3) ^ ((data_1 >>> 3) ^ (data_1 - 7))) + 7);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((((data_2 + 8) & (data_2 & 9)) >>> (data_2 - 1)) + (data_2 - 2)) - ((data_2 ^ 8) - (data_2 - 5)));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((((data_3 | 4) | 8) & 4) - (data_3 - 9)) ^ 6) & 5);
    wire [WIDTH-1:0] data_5;
    assign data_5 = ((((((data_4 | 4) | 8) & 4) - (data_4 - 9)) ^ 6) & 5);
    wire [WIDTH-1:0] data_6;
    assign data_6 = ((((((data_5 | 4) | 8) & 4) - (data_5 - 9)) ^ 6) & 5);
    wire [WIDTH-1:0] data_7;
    assign data_7 = ((((((data_6 | 5) + (data_6 - 10)) & 6) - (data_6 | 2)) & 9) ^ 3);
    wire [WIDTH-1:0] data_8;
    assign data_8 = ((data_7 >>> 9) - 9);
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((((data_8 >>> 7) - (data_8 ^ 2)) >>> (data_8 + 3)) >>> (((data_8 >>> 9) | 1) - ((data_8 - 8) & 3))) & 1);
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((data_9 ^ 10) & 10) & 1);
    wire [WIDTH-1:0] data_11;
    assign data_11 = (((((data_10 & 4) >>> 5) >>> ((data_10 | 9) <<< (data_10 - 9))) - 7) + 7);
    wire [WIDTH-1:0] data_12;
    assign data_12 = (((data_11 & 2) ^ (((data_11 - 6) | (data_11 + 6)) | (data_11 >>> 8))) & 3);
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 & 2) ^ (((data_12 - 6) | (data_12 + 6)) | (data_12 >>> 8))) & 3);
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((((data_13 + 9) >>> ((data_13 + 6) <<< 1)) - 7) - ((data_13 - 7) ^ ((data_13 - 2) + 2)));
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((((data_14 & 6) >>> 4) - 1) - (data_14 <<< 10));
    wire [WIDTH-1:0] data_16;
    assign data_16 = ((((data_15 <<< 2) | ((data_15 ^ 8) | 2)) <<< (((data_15 + 6) - 3) | ((data_15 - 6) ^ ((data_15 | 9) + 10)))) & (((data_15 >>> 9) ^ 9) | (data_15 | 4)));
    wire [WIDTH-1:0] data_17;
    assign data_17 = ((((data_16 | 2) - 9) | 3) | 7);
    wire [WIDTH-1:0] data_18;
    assign data_18 = ((((data_17 | 2) - 9) | 3) | 7);
    wire [WIDTH-1:0] data_19;
    assign data_19 = ((((data_18 | 2) - 9) | 3) | 7);
    wire [WIDTH-1:0] data_20;
    assign data_20 = (((data_19 <<< 6) - 4) - 1);
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((((data_20 - 4) & 9) + ((data_20 >>> 5) & 7)) ^ 8) | 7);
    wire [WIDTH-1:0] data_22;
    assign data_22 = ((((data_21 & 3) >>> ((data_21 | 3) <<< (data_21 | 7))) & 6) & 4);
    wire [WIDTH-1:0] data_23;
    assign data_23 = ((data_22 + 1) ^ 9);
    wire [WIDTH-1:0] data_24;
    assign data_24 = (((((data_23 | 5) <<< (data_23 & 8)) - (data_23 | 2)) ^ 7) + 5);
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((((data_24 + 3) + (data_24 + 1)) & (data_24 & 10)) - ((((data_24 | 7) | ((data_24 & 8) <<< 1)) | 1) - ((data_24 - 9) - (((data_24 >>> 8) >>> 4) | (data_24 - 8)))));
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((((data_25 <<< 6) ^ (((data_25 <<< 9) - 3) - (data_25 <<< 10))) >>> (((data_25 + 7) + 4) & ((data_25 <<< 4) + 1))) - 6);
    wire [WIDTH-1:0] data_27;
    assign data_27 = (((data_26 + 6) - (data_26 - 4)) ^ 7);
    wire [WIDTH-1:0] data_28;
    assign data_28 = (((data_27 ^ 1) <<< 10) - 9);
    wire [WIDTH-1:0] data_29;
    assign data_29 = (((((data_28 ^ 8) | 5) & 1) >>> (data_28 + 10)) & ((data_28 + 5) <<< ((data_28 | 5) & 2)));
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((((data_29 >>> 5) + ((data_29 | 7) & 4)) + (data_29 ^ 4)) ^ 9);
    wire [WIDTH-1:0] data_31;
    assign data_31 = ((((data_30 >>> 5) + ((data_30 | 7) & 4)) + (data_30 ^ 4)) ^ 9);
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((((data_31 >>> 5) + ((data_31 | 7) & 4)) + (data_31 ^ 4)) ^ 9);
    wire [WIDTH-1:0] data_33;
    assign data_33 = (((data_32 & 8) | ((data_32 >>> 10) + 4)) >>> 8);
    wire [WIDTH-1:0] data_34;
    assign data_34 = (((data_33 & 8) | ((data_33 >>> 10) + 4)) >>> 8);
    wire [WIDTH-1:0] data_35;
    assign data_35 = (((data_34 & 8) | ((data_34 >>> 10) + 4)) >>> 8);
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((data_35 <<< 8) ^ 6);
    wire [WIDTH-1:0] data_37;
    assign data_37 = (((data_36 | 1) <<< 2) <<< 10);
    wire [WIDTH-1:0] data_38;
    assign data_38 = (((data_37 | 1) <<< 2) <<< 10);
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((data_38 - 5) - (data_38 & 10));
    wire [WIDTH-1:0] data_40;
    assign data_40 = ((data_39 + 9) <<< 10);
    wire [WIDTH-1:0] data_41;
    assign data_41 = ((((data_40 + 1) <<< 6) + 5) & 3);
    wire [WIDTH-1:0] data_42;
    assign data_42 = ((((data_41 + 1) <<< 6) + 5) & 3);
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((((data_42 + 1) <<< 6) + 5) & 3);
    wire [WIDTH-1:0] data_44;
    assign data_44 = ((data_43 - 7) | ((data_43 | 2) ^ ((data_43 ^ 3) & (((data_43 >>> 3) - 8) & 5))));
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((data_44 - 7) | ((data_44 | 2) ^ ((data_44 ^ 3) & (((data_44 >>> 3) - 8) & 5))));
    wire [WIDTH-1:0] data_46;
    assign data_46 = (((((data_45 & 5) & 9) + 6) & 10) & (data_45 <<< 4));
    wire [WIDTH-1:0] data_47;
    assign data_47 = ((((data_46 ^ 5) & 2) <<< (((data_46 | 6) <<< ((data_46 | 4) & (data_46 >>> 6))) <<< (data_46 ^ 6))) & (((data_46 + 9) & 7) - 1));
    wire [WIDTH-1:0] data_48;
    assign data_48 = ((((data_47 | 8) - 3) <<< ((((data_47 <<< 10) >>> (data_47 >>> 8)) >>> (data_47 <<< 7)) & ((data_47 | 2) & 8))) + (data_47 <<< 7));
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((((data_48 <<< 10) & 4) + (((data_48 <<< 3) >>> 7) | 2)) | 2);
    wire [WIDTH-1:0] data_50;
    assign data_50 = ((((data_49 <<< 10) & 4) + (((data_49 <<< 3) >>> 7) | 2)) | 2);
    wire [WIDTH-1:0] data_51;
    assign data_51 = ((((data_50 <<< 10) & 4) + (((data_50 <<< 3) >>> 7) | 2)) | 2);
    wire [WIDTH-1:0] data_52;
    assign data_52 = ((((data_51 <<< 10) & 4) + (((data_51 <<< 3) >>> 7) | 2)) | 2);
    wire [WIDTH-1:0] data_53;
    assign data_53 = ((((data_52 <<< 8) <<< 6) | 8) >>> 3);
    wire [WIDTH-1:0] data_54;
    assign data_54 = ((((data_53 <<< 8) <<< 6) | 8) >>> 3);
    wire [WIDTH-1:0] data_55;
    assign data_55 = ((((data_54 <<< 8) <<< 6) | 8) >>> 3);
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((((data_55 <<< 8) <<< 6) | 8) >>> 3);
    wire [WIDTH-1:0] data_57;
    assign data_57 = ((((data_56 | 10) & 8) <<< 8) + 2);
    wire [WIDTH-1:0] data_58;
    assign data_58 = ((((data_57 | 10) & 8) <<< 8) + 2);
    wire [WIDTH-1:0] data_59;
    assign data_59 = ((((data_58 | 10) & 8) <<< 8) + 2);
    wire [WIDTH-1:0] data_60;
    assign data_60 = ((((data_59 | 10) & 8) <<< 8) + 2);
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((((data_60 | 3) | 2) >>> 7) >>> 7);
    wire [WIDTH-1:0] data_62;
    assign data_62 = (((((data_61 >>> 4) >>> (data_61 ^ 9)) & 1) <<< (data_61 >>> 4)) & 8);
    wire [WIDTH-1:0] data_63;
    assign data_63 = ((data_62 <<< 5) >>> 7);
    wire [WIDTH-1:0] data_64;
    assign data_64 = (((data_63 >>> 7) - 1) ^ (((data_63 >>> 6) >>> ((data_63 + 4) | 2)) >>> 5));
    wire [WIDTH-1:0] data_65;
    assign data_65 = ((data_64 - 6) | ((data_64 | 5) <<< ((((data_64 ^ 6) <<< 6) - 5) ^ 2)));
    wire [WIDTH-1:0] data_66;
    assign data_66 = ((((data_65 ^ 8) & 1) | (((data_65 ^ 10) <<< 4) & ((data_65 <<< 6) <<< (data_65 - 4)))) ^ (((data_65 | 2) - 2) >>> 4));
    wire [WIDTH-1:0] data_67;
    assign data_67 = ((((data_66 ^ 8) & 1) | (((data_66 ^ 10) <<< 4) & ((data_66 <<< 6) <<< (data_66 - 4)))) ^ (((data_66 | 2) - 2) >>> 4));
    wire [WIDTH-1:0] data_68;
    assign data_68 = ((((data_67 ^ 8) & 1) | (((data_67 ^ 10) <<< 4) & ((data_67 <<< 6) <<< (data_67 - 4)))) ^ (((data_67 | 2) - 2) >>> 4));
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((((data_68 ^ 8) & 1) | (((data_68 ^ 10) <<< 4) & ((data_68 <<< 6) <<< (data_68 - 4)))) ^ (((data_68 | 2) - 2) >>> 4));
    wire [WIDTH-1:0] data_70;
    assign data_70 = (((data_69 <<< 6) <<< 10) & ((data_69 & 8) & 10));
    wire [WIDTH-1:0] data_71;
    assign data_71 = (((data_70 ^ 10) | (data_70 - 9)) - ((data_70 <<< 4) ^ (((data_70 ^ 7) ^ 6) | 7)));
    wire [WIDTH-1:0] data_72;
    assign data_72 = ((((data_71 + 1) ^ 4) + ((data_71 + 7) + (((data_71 - 7) | 1) - 8))) - ((data_71 >>> 8) | 4));
    wire [WIDTH-1:0] data_73;
    assign data_73 = ((((data_72 + 1) ^ 4) + ((data_72 + 7) + (((data_72 - 7) | 1) - 8))) - ((data_72 >>> 8) | 4));
    wire [WIDTH-1:0] data_74;
    assign data_74 = ((((data_73 + 1) ^ 4) + ((data_73 + 7) + (((data_73 - 7) | 1) - 8))) - ((data_73 >>> 8) | 4));
    wire [WIDTH-1:0] data_75;
    assign data_75 = ((data_74 - 6) ^ 1);
    wire [WIDTH-1:0] data_76;
    assign data_76 = ((data_75 | 5) ^ 7);
    wire [WIDTH-1:0] data_77;
    assign data_77 = ((data_76 | 5) ^ 7);
    wire [WIDTH-1:0] data_78;
    assign data_78 = ((data_77 | 5) ^ 7);
    wire [WIDTH-1:0] data_79;
    assign data_79 = ((((data_78 | 10) >>> ((data_78 - 2) - (data_78 ^ 5))) - ((data_78 >>> 10) ^ 2)) - 3);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_79, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_5-4,"`define WIDTH 128
`define DEPTH 77

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data | 1) + ((in_data >>> 9) & 8)) ^ 4) & (((in_data + 7) <<< (in_data | 10)) - 9)) >>> ((((in_data ^ 2) | ((in_data & 2) <<< (in_data >>> 1))) & 4) + 5));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 6) >>> 7) ^ 10) <<< (((in_data <<< 2) - (in_data & 9)) <<< (((in_data | 10) & 5) <<< 1)));
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 6) <<< ((in_data <<< 2) >>> (in_data & 7))) >>> (((in_data + 3) - (in_data | 7)) - (((in_data | 6) + 10) <<< (in_data <<< 10))));
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 7) <<< (in_data + 1)) ^ (in_data <<< 9));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 6) <<< (in_data & 9)) | ((((in_data + 9) & 2) <<< 1) | ((((in_data - 3) & (in_data & 10)) ^ (in_data <<< 5)) <<< 3)));
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 5) - (in_data | 1)) - 6) & 8);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 7) & 8) & (((in_data >>> 3) ^ 10) & 1)) + ((((in_data | 8) - ((in_data + 9) | 6)) + (in_data <<< 9)) | (in_data <<< 7)));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 7) - ((data[i] & 6) <<< ((data[i] >>> 6) >>> 8))) - (data[i] | 1)) & ((data[i] ^ 1) >>> (((data[i] <<< 3) <<< 5) & ((data[i] + 4) + 8))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 6) <<< 1);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] >>> 3) ^ ((data[i] - 8) - 10)) & ((data[i] - 5) ^ (data[i] + 7))) & ((data[i] + 8) ^ 4)) <<< (data[i] - 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((((in_data <<< 1) - 8) + (in_data - 9)) <<< (in_data + 6)) >>> 5) | 6);
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 1) >>> ((in_data <<< 9) <<< ((in_data ^ 10) | (in_data <<< 10)))) - (in_data + 4)) | (((in_data ^ 1) <<< ((in_data & 8) + (in_data & 6))) ^ ((in_data | 6) <<< 8)));
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) <<< 7) <<< ((((in_data ^ 5) - 3) + (in_data | 9)) & ((in_data + 8) ^ 2)));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 1) + 6) & 8) >>> 2);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 8) & ((in_data | 1) & 9));
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 2) ^ (in_data ^ 10)) - 8) | 6);
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 8) - 7) >>> (data[i] - 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 2) | (data[i] >>> 8)) >>> ((data[i] ^ 10) <<< 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 2) - 6) ^ ((((data[i] & 3) - 5) ^ 4) ^ (data[i] - 7)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 9) | (data[i] >>> 10)) ^ 10) | (((data[i] ^ 2) >>> 1) & (data[i] + 9)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 5) >>> ((in_data <<< 3) ^ (in_data | 9)));
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 5) ^ 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 6) & ((in_data >>> 6) >>> (in_data | 5)));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 1) >>> ((in_data ^ 1) + 7)) ^ 3) | 6);
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] - 9) ^ 8) <<< (data[i] ^ 3)) & ((data[i] - 3) + (data[i] - 6))) | (((data[i] & 7) - 9) + ((data[i] - 10) | 8)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 9) - 2) + 9) <<< (in_data | 9));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 9) ^ 5) ^ (data[i] >>> 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 3) ^ (((data[i] & 4) >>> ((data[i] & 2) <<< (data[i] <<< 7))) & 2)) - ((((data[i] & 7) ^ 8) + (data[i] + 2)) + 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] <<< 7) >>> 7) <<< 9) <<< (data[i] ^ 4)) >>> (data[i] + 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 5) + 1) & ((data[i] >>> 3) + 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 9) & (((data[i] - 9) <<< (data[i] - 9)) >>> 4)) + 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 8) & (in_data & 9)) ^ 6) & 2);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 9) | (in_data ^ 9)) - 7) + 6) >>> ((in_data | 10) - 9));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) ^ 2) >>> ((in_data - 9) - ((in_data ^ 2) >>> 8)));
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data >>> 5) ^ (in_data <<< 8)) + ((in_data ^ 7) | 4)) <<< 6) <<< (((in_data & 6) | (in_data >>> 7)) & (in_data ^ 4)));
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 6) - (in_data ^ 8)) & ((in_data ^ 8) & 4)) <<< (((in_data + 5) ^ 3) ^ 3)) >>> 1);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 7) | (in_data | 3)) - (((in_data ^ 6) | (in_data ^ 9)) <<< (in_data - 10))) & ((((in_data ^ 2) ^ (in_data + 5)) | (in_data <<< 7)) | ((in_data & 1) >>> (in_data & 4))));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 9) ^ (in_data | 8)) & (in_data - 3)) ^ 10);
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 4) - 9) | 7);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 7) ^ 6) ^ 1) & 5);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 3) & (in_data ^ 6)) <<< (in_data | 7)) <<< 9);
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 1) <<< 3) - ((in_data <<< 8) ^ ((in_data >>> 5) ^ (in_data | 10))));
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 2) | 9) + ((data[i] | 9) + 6)) ^ 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) & ((in_data - 9) >>> (in_data | 1))) >>> ((in_data - 6) | ((in_data <<< 1) >>> 3)));
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 3) | 9) ^ (((in_data ^ 5) | 9) ^ 4));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 4) ^ 7) <<< (((in_data <<< 6) <<< 10) | ((in_data | 8) & (in_data ^ 7)))) >>> ((in_data >>> 3) - 6)) - ((((in_data <<< 1) ^ (in_data ^ 7)) ^ ((in_data >>> 9) | 9)) + 9));
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 6) <<< 6) <<< 7) | ((((in_data >>> 9) >>> 3) ^ 7) & 4));
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 2) & 9) | 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 8) & ((in_data + 5) <<< 9)) - ((((in_data ^ 6) & (in_data ^ 5)) + (((in_data + 8) | (in_data & 7)) | 1)) - (in_data <<< 5)));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 8) >>> ((in_data & 6) ^ 7));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 77

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = ((((in_data & 7) & 8) & (((in_data >>> 3) ^ 10) & 1)) + ((((in_data | 8) - ((in_data + 9) | 6)) + (in_data <<< 9)) | (in_data <<< 7)));
    wire [WIDTH-1:0] data_1;
    assign data_1 = ((data_0 >>> 8) >>> ((data_0 & 6) ^ 7));
    wire [WIDTH-1:0] data_2;
    assign data_2 = ((((data_1 + 7) - ((data_1 & 6) <<< ((data_1 >>> 6) >>> 8))) - (data_1 | 1)) & ((data_1 ^ 1) >>> (((data_1 <<< 3) <<< 5) & ((data_1 + 4) + 8))));
    wire [WIDTH-1:0] data_3;
    assign data_3 = ((((data_2 + 7) - ((data_2 & 6) <<< ((data_2 >>> 6) >>> 8))) - (data_2 | 1)) & ((data_2 ^ 1) >>> (((data_2 <<< 3) <<< 5) & ((data_2 + 4) + 8))));
    wire [WIDTH-1:0] data_4;
    assign data_4 = ((((data_3 + 7) - ((data_3 & 6) <<< ((data_3 >>> 6) >>> 8))) - (data_3 | 1)) & ((data_3 ^ 1) >>> (((data_3 <<< 3) <<< 5) & ((data_3 + 4) + 8))));
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((data_4 <<< 9) ^ 5) ^ (data_4 >>> 3));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((data_5 <<< 9) ^ 5) ^ (data_5 >>> 3));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((data_6 <<< 9) ^ 5) ^ (data_6 >>> 3));
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((data_7 ^ 7) ^ 2) >>> ((data_7 - 9) - ((data_7 ^ 2) >>> 8)));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((((data_8 >>> 3) ^ ((data_8 - 8) - 10)) & ((data_8 - 5) ^ (data_8 + 7))) & ((data_8 + 8) ^ 4)) <<< (data_8 - 1));
    wire [WIDTH-1:0] data_10;
    assign data_10 = (((((data_9 >>> 3) ^ ((data_9 - 8) - 10)) & ((data_9 - 5) ^ (data_9 + 7))) & ((data_9 + 8) ^ 4)) <<< (data_9 - 1));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((((data_10 - 9) | (data_10 >>> 10)) ^ 10) | (((data_10 ^ 2) >>> 1) & (data_10 + 9)));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((((data_11 - 9) | (data_11 >>> 10)) ^ 10) | (((data_11 ^ 2) >>> 1) & (data_11 + 9)));
    wire [WIDTH-1:0] data_13;
    assign data_13 = (((data_12 | 5) + 1) & ((data_12 >>> 3) + 3));
    wire [WIDTH-1:0] data_14;
    assign data_14 = (((data_13 | 5) + 1) & ((data_13 >>> 3) + 3));
    wire [WIDTH-1:0] data_15;
    assign data_15 = (((((data_14 <<< 9) | (data_14 ^ 9)) - 7) + 6) >>> ((data_14 | 10) - 9));
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((((data_15 <<< 7) >>> 7) <<< 9) <<< (data_15 ^ 4)) >>> (data_15 + 8));
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((((data_16 <<< 7) >>> 7) <<< 9) <<< (data_16 ^ 4)) >>> (data_16 + 8));
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((((data_17 <<< 7) >>> 7) <<< 9) <<< (data_17 ^ 4)) >>> (data_17 + 8));
    wire [WIDTH-1:0] data_19;
    assign data_19 = (((data_18 ^ 7) & ((data_18 - 9) >>> (data_18 | 1))) >>> ((data_18 - 6) | ((data_18 <<< 1) >>> 3)));
    wire [WIDTH-1:0] data_20;
    assign data_20 = ((((data_19 + 3) & (data_19 ^ 6)) <<< (data_19 | 7)) <<< 9);
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((data_20 | 2) & 9) | 6);
    wire [WIDTH-1:0] data_22;
    assign data_22 = (((data_21 | 2) & 9) | 6);
    wire [WIDTH-1:0] data_23;
    assign data_23 = (((data_22 | 2) & 9) | 6);
    wire [WIDTH-1:0] data_24;
    assign data_24 = (((data_23 | 2) & 9) | 6);
    wire [WIDTH-1:0] data_25;
    assign data_25 = ((((data_24 <<< 6) >>> 7) ^ 10) <<< (((data_24 <<< 2) - (data_24 & 9)) <<< (((data_24 | 10) & 5) <<< 1)));
    wire [WIDTH-1:0] data_26;
    assign data_26 = ((data_25 ^ 5) ^ 9);
    wire [WIDTH-1:0] data_27;
    assign data_27 = ((data_26 ^ 5) ^ 9);
    wire [WIDTH-1:0] data_28;
    assign data_28 = ((data_27 ^ 5) ^ 9);
    wire [WIDTH-1:0] data_29;
    assign data_29 = (((data_28 & 8) & ((data_28 + 5) <<< 9)) - ((((data_28 ^ 6) & (data_28 ^ 5)) + (((data_28 + 8) | (data_28 & 7)) | 1)) - (data_28 <<< 5)));
    wire [WIDTH-1:0] data_30;
    assign data_30 = (((data_29 - 8) - 7) >>> (data_29 - 2));
    wire [WIDTH-1:0] data_31;
    assign data_31 = (((data_30 - 8) - 7) >>> (data_30 - 2));
    wire [WIDTH-1:0] data_32;
    assign data_32 = (((data_31 - 8) - 7) >>> (data_31 - 2));
    wire [WIDTH-1:0] data_33;
    assign data_33 = (((data_32 - 8) - 7) >>> (data_32 - 2));
    wire [WIDTH-1:0] data_34;
    assign data_34 = ((((data_33 <<< 7) ^ 6) ^ 1) & 5);
    wire [WIDTH-1:0] data_35;
    assign data_35 = ((((data_34 & 1) + 6) & 8) >>> 2);
    wire [WIDTH-1:0] data_36;
    assign data_36 = (((data_35 >>> 2) | (data_35 >>> 8)) >>> ((data_35 ^ 10) <<< 5));
    wire [WIDTH-1:0] data_37;
    assign data_37 = (((data_36 >>> 2) | (data_36 >>> 8)) >>> ((data_36 ^ 10) <<< 5));
    wire [WIDTH-1:0] data_38;
    assign data_38 = (((data_37 - 7) <<< (data_37 + 1)) ^ (data_37 <<< 9));
    wire [WIDTH-1:0] data_39;
    assign data_39 = (((data_38 - 6) <<< (data_38 & 9)) | ((((data_38 + 9) & 2) <<< 1) | ((((data_38 - 3) & (data_38 & 10)) ^ (data_38 <<< 5)) <<< 3)));
    wire [WIDTH-1:0] data_40;
    assign data_40 = (((data_39 >>> 9) & (((data_39 - 9) <<< (data_39 - 9)) >>> 4)) + 1);
    wire [WIDTH-1:0] data_41;
    assign data_41 = (((data_40 >>> 9) & (((data_40 - 9) <<< (data_40 - 9)) >>> 4)) + 1);
    wire [WIDTH-1:0] data_42;
    assign data_42 = (((data_41 >>> 9) & (((data_41 - 9) <<< (data_41 - 9)) >>> 4)) + 1);
    wire [WIDTH-1:0] data_43;
    assign data_43 = ((((data_42 & 2) ^ (data_42 ^ 10)) - 8) | 6);
    wire [WIDTH-1:0] data_44;
    assign data_44 = (((((data_43 ^ 4) ^ 7) <<< (((data_43 <<< 6) <<< 10) | ((data_43 | 8) & (data_43 ^ 7)))) >>> ((data_43 >>> 3) - 6)) - ((((data_43 <<< 1) ^ (data_43 ^ 7)) ^ ((data_43 >>> 9) | 9)) + 9));
    wire [WIDTH-1:0] data_45;
    assign data_45 = (((data_44 ^ 2) - 6) ^ ((((data_44 & 3) - 5) ^ 4) ^ (data_44 - 7)));
    wire [WIDTH-1:0] data_46;
    assign data_46 = (((data_45 ^ 2) - 6) ^ ((((data_45 & 3) - 5) ^ 4) ^ (data_45 - 7)));
    wire [WIDTH-1:0] data_47;
    assign data_47 = ((((data_46 >>> 6) <<< 6) <<< 7) | ((((data_46 >>> 9) >>> 3) ^ 7) & 4));
    wire [WIDTH-1:0] data_48;
    assign data_48 = (((data_47 <<< 3) <<< 7) <<< ((((data_47 ^ 5) - 3) + (data_47 | 9)) & ((data_47 + 8) ^ 2)));
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((data_48 ^ 5) >>> ((data_48 <<< 3) ^ (data_48 | 9)));
    wire [WIDTH-1:0] data_50;
    assign data_50 = ((((data_49 >>> 1) >>> ((data_49 <<< 9) <<< ((data_49 ^ 10) | (data_49 <<< 10)))) - (data_49 + 4)) | (((data_49 ^ 1) <<< ((data_49 & 8) + (data_49 & 6))) ^ ((data_49 | 6) <<< 8)));
    wire [WIDTH-1:0] data_51;
    assign data_51 = (((((data_50 - 9) ^ 8) <<< (data_50 ^ 3)) & ((data_50 - 3) + (data_50 - 6))) | (((data_50 & 7) - 9) + ((data_50 - 10) | 8)));
    wire [WIDTH-1:0] data_52;
    assign data_52 = (((((data_51 - 9) ^ 8) <<< (data_51 ^ 3)) & ((data_51 - 3) + (data_51 - 6))) | (((data_51 & 7) - 9) + ((data_51 - 10) | 8)));
    wire [WIDTH-1:0] data_53;
    assign data_53 = (((((data_52 - 9) ^ 8) <<< (data_52 ^ 3)) & ((data_52 - 3) + (data_52 - 6))) | (((data_52 & 7) - 9) + ((data_52 - 10) | 8)));
    wire [WIDTH-1:0] data_54;
    assign data_54 = (((data_53 <<< 6) <<< ((data_53 <<< 2) >>> (data_53 & 7))) >>> (((data_53 + 3) - (data_53 | 7)) - (((data_53 | 6) + 10) <<< (data_53 <<< 10))));
    wire [WIDTH-1:0] data_55;
    assign data_55 = ((((((data_54 <<< 1) - 8) + (data_54 - 9)) <<< (data_54 + 6)) >>> 5) | 6);
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((((data_55 & 9) ^ (data_55 | 8)) & (data_55 - 3)) ^ 10);
    wire [WIDTH-1:0] data_57;
    assign data_57 = (((((data_56 ^ 6) - (data_56 ^ 8)) & ((data_56 ^ 8) & 4)) <<< (((data_56 + 5) ^ 3) ^ 3)) >>> 1);
    wire [WIDTH-1:0] data_58;
    assign data_58 = (((data_57 ^ 4) - 9) | 7);
    wire [WIDTH-1:0] data_59;
    assign data_59 = ((((data_58 - 8) & (data_58 & 9)) ^ 6) & 2);
    wire [WIDTH-1:0] data_60;
    assign data_60 = ((((data_59 - 2) | 9) + ((data_59 | 9) + 6)) ^ 5);
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((((data_60 - 2) | 9) + ((data_60 | 9) + 6)) ^ 5);
    wire [WIDTH-1:0] data_62;
    assign data_62 = ((((data_61 - 2) | 9) + ((data_61 | 9) + 6)) ^ 5);
    wire [WIDTH-1:0] data_63;
    assign data_63 = ((((data_62 - 2) | 9) + ((data_62 | 9) + 6)) ^ 5);
    wire [WIDTH-1:0] data_64;
    assign data_64 = ((((data_63 + 7) | (data_63 | 3)) - (((data_63 ^ 6) | (data_63 ^ 9)) <<< (data_63 - 10))) & ((((data_63 ^ 2) ^ (data_63 + 5)) | (data_63 <<< 7)) | ((data_63 & 1) >>> (data_63 & 4))));
    wire [WIDTH-1:0] data_65;
    assign data_65 = ((data_64 <<< 6) & ((data_64 >>> 6) >>> (data_64 | 5)));
    wire [WIDTH-1:0] data_66;
    assign data_66 = ((data_65 ^ 8) & ((data_65 | 1) & 9));
    wire [WIDTH-1:0] data_67;
    assign data_67 = (((((data_66 >>> 5) ^ (data_66 <<< 8)) + ((data_66 ^ 7) | 4)) <<< 6) <<< (((data_66 & 6) | (data_66 >>> 7)) & (data_66 ^ 4)));
    wire [WIDTH-1:0] data_68;
    assign data_68 = (((data_67 | 3) | 9) ^ (((data_67 ^ 5) | 9) ^ 4));
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((data_68 | 6) <<< 1);
    wire [WIDTH-1:0] data_70;
    assign data_70 = ((((data_69 ^ 1) >>> ((data_69 ^ 1) + 7)) ^ 3) | 6);
    wire [WIDTH-1:0] data_71;
    assign data_71 = ((((data_70 <<< 9) - 2) + 9) <<< (data_70 | 9));
    wire [WIDTH-1:0] data_72;
    assign data_72 = ((((data_71 & 5) - (data_71 | 1)) - 6) & 8);
    wire [WIDTH-1:0] data_73;
    assign data_73 = (((((data_72 | 1) + ((data_72 >>> 9) & 8)) ^ 4) & (((data_72 + 7) <<< (data_72 | 10)) - 9)) >>> ((((data_72 ^ 2) | ((data_72 & 2) <<< (data_72 >>> 1))) & 4) + 5));
    wire [WIDTH-1:0] data_74;
    assign data_74 = (((data_73 >>> 1) <<< 3) - ((data_73 <<< 8) ^ ((data_73 >>> 5) ^ (data_73 | 10))));
    wire [WIDTH-1:0] data_75;
    assign data_75 = (((data_74 | 3) ^ (((data_74 & 4) >>> ((data_74 & 2) <<< (data_74 <<< 7))) & 2)) - ((((data_74 & 7) ^ 8) + (data_74 + 2)) + 1));
    wire [WIDTH-1:0] data_76;
    assign data_76 = (((data_75 | 3) ^ (((data_75 & 4) >>> ((data_75 & 2) <<< (data_75 <<< 7))) & 2)) - ((((data_75 & 7) ^ 8) + (data_75 + 2)) + 1));

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_76, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline_single,ns_50-w_128-opd_5-5,"`define WIDTH 128
`define DEPTH 84

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) | 3) & 6);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 1) - (in_data - 6)) | 4);
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 4) | ((in_data - 10) | 2)) <<< (((in_data ^ 7) ^ 8) ^ 5));
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 10) + 4) | (in_data ^ 10)) | (((((in_data <<< 10) + 5) | 4) | 8) <<< 5));
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 4) >>> 6) <<< 10) & ((((in_data ^ 7) >>> 5) <<< (in_data + 10)) >>> 8));
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 8) | ((((in_data & 7) & 5) + 1) <<< (in_data <<< 7))) ^ (((((in_data <<< 2) ^ 6) + (in_data <<< 9)) & (in_data <<< 3)) >>> 1));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 5) - ((data[i] <<< 9) <<< ((data[i] | 5) + 1))) ^ 7) - (data[i] >>> 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 4) >>> 5) | ((in_data >>> 10) <<< (in_data >>> 1))) - ((in_data >>> 4) ^ ((in_data - 5) - 5))) + ((in_data | 4) >>> (in_data | 10)));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 7) <<< (in_data | 2)) ^ 9) - 10);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((((in_data - 1) | 9) <<< (in_data + 6)) <<< (in_data - 1)) ^ ((in_data + 7) <<< 1)) & 8);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] ^ 6) | 7) - 10) >>> (data[i] + 1)) - (data[i] + 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 2) + 6) <<< ((((in_data | 10) ^ 10) >>> (in_data <<< 4)) <<< 4)) | ((in_data <<< 1) - 4));
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((((in_data & 1) >>> (in_data | 10)) & 8) | (in_data + 5)) >>> 6) <<< 9);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((((data[i] <<< 7) <<< (data[i] + 1)) & 4) - (data[i] <<< 10)) | 3) | (data[i] <<< 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 1) + 7) & (data[i] & 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 8) | ((in_data >>> 10) + 8)) | (in_data ^ 4));
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 9) | (data[i] <<< 1)) ^ (data[i] + 6)) & 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 8) >>> ((in_data & 8) ^ (in_data >>> 8))) + (in_data | 5)) & ((in_data + 5) >>> (((in_data | 4) ^ 8) >>> (in_data <<< 2)))) ^ (((in_data & 4) ^ (((in_data & 3) <<< 3) - ((in_data | 6) >>> (in_data <<< 1)))) + ((in_data | 9) >>> (in_data <<< 8))));
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 9) & 4) <<< (in_data >>> 7)) & (((in_data & 6) >>> (in_data <<< 2)) + 4));
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) ^ (((in_data <<< 10) <<< (in_data >>> 3)) - (in_data <<< 4))) + 10);
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 9) <<< 10) <<< 7) | ((in_data >>> 9) <<< ((in_data >>> 3) | 5)));
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 3) + (in_data | 10)) >>> 3) + 6) | 4);
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 7) >>> (in_data >>> 5)) ^ 10) - 9) >>> 5);
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 4) <<< 9) - 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 4) >>> 3) + (data[i] | 7)) ^ ((((data[i] | 6) ^ ((data[i] >>> 5) <<< 5)) ^ ((data[i] & 1) ^ 4)) | 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 6) >>> 1) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) - 7);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 2) + (in_data + 5)) >>> ((in_data ^ 4) & 7)) >>> 9);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 2) >>> 1) & (in_data <<< 4));
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 2) + 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 4) <<< 5) & (((data[i] ^ 6) - (data[i] >>> 6)) & 6)) >>> 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 3) <<< (in_data <<< 7)) - (((in_data >>> 10) & ((in_data + 8) ^ (in_data >>> 2))) ^ (((in_data & 1) & 8) & (((in_data >>> 10) | 3) + 8))));
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 8) >>> 10);
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 10) | (in_data >>> 1)) - 8) + 6);
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] + 1) + 6) + (data[i] + 3)) - 10) | 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 3) & 8) | 5) & 10) - (((in_data <<< 9) | (in_data ^ 7)) >>> 8));
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 6) <<< 9);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 2) ^ 2);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 9) <<< 1) ^ 4) + (data[i] <<< 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 5) & 6) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 8) <<< 3) >>> (in_data & 6)) & 8) | 5);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 6) | ((data[i] <<< 5) - (data[i] >>> 1))) >>> 6) >>> ((((data[i] | 7) >>> 7) ^ (((data[i] & 7) ^ 10) >>> 8)) + 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] >>> 6) | 2) - 3) <<< 6) + 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 2) + 10) <<< ((((in_data <<< 3) ^ (in_data | 8)) ^ (in_data + 9)) - 9));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 10) & 8) ^ 4);
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 2) + 1) - ((in_data - 1) ^ 1)) + 8) + (((in_data & 6) <<< 5) ^ ((in_data - 3) <<< ((in_data + 6) ^ (in_data - 7)))));
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((((in_data + 3) <<< 9) <<< (in_data | 9)) & (in_data + 2)) >>> 7) + 4);
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 2) - ((((in_data >>> 4) ^ 9) + (((in_data >>> 1) - (in_data <<< 10)) ^ 2)) + 9));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 9) + 1) | (((in_data >>> 4) | 7) | ((in_data + 7) <<< 7)));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) - ((in_data & 5) - 4)) ^ 4);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[77]),
        .in_vld(ready[77]),
        .out_data(data[81]), 
        .out_vld(ready[81])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[81]),
        .in_vld(ready[81]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[82]),
        .in_vld(ready[82]),
        .out_data(data[83]), 
        .out_vld(ready[83])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[83]),
        .in_vld(ready[83]),
        .out_data(data[84]), 
        .out_vld(ready[84])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 84

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);
    wire [WIDTH-1:0] data_0;
    assign data_0 = (((in_data - 6) >>> 1) | 7);
    wire [WIDTH-1:0] data_1;
    assign data_1 = (((data_0 - 6) >>> 1) | 7);
    wire [WIDTH-1:0] data_2;
    assign data_2 = (((data_1 - 6) >>> 1) | 7);
    wire [WIDTH-1:0] data_3;
    assign data_3 = (((data_2 - 6) >>> 1) | 7);
    wire [WIDTH-1:0] data_4;
    assign data_4 = (((data_3 + 7) | 3) & 6);
    wire [WIDTH-1:0] data_5;
    assign data_5 = (((((data_4 ^ 6) | 7) - 10) >>> (data_4 + 1)) - (data_4 + 6));
    wire [WIDTH-1:0] data_6;
    assign data_6 = (((((data_5 ^ 6) | 7) - 10) >>> (data_5 + 1)) - (data_5 + 6));
    wire [WIDTH-1:0] data_7;
    assign data_7 = (((((data_6 ^ 6) | 7) - 10) >>> (data_6 + 1)) - (data_6 + 6));
    wire [WIDTH-1:0] data_8;
    assign data_8 = (((((data_7 - 8) >>> ((data_7 & 8) ^ (data_7 >>> 8))) + (data_7 | 5)) & ((data_7 + 5) >>> (((data_7 | 4) ^ 8) >>> (data_7 <<< 2)))) ^ (((data_7 & 4) ^ (((data_7 & 3) <<< 3) - ((data_7 | 6) >>> (data_7 <<< 1)))) + ((data_7 | 9) >>> (data_7 <<< 8))));
    wire [WIDTH-1:0] data_9;
    assign data_9 = (((data_8 & 2) >>> 1) & (data_8 <<< 4));
    wire [WIDTH-1:0] data_10;
    assign data_10 = ((((data_9 <<< 5) - ((data_9 <<< 9) <<< ((data_9 | 5) + 1))) ^ 7) - (data_9 >>> 10));
    wire [WIDTH-1:0] data_11;
    assign data_11 = ((((data_10 <<< 5) - ((data_10 <<< 9) <<< ((data_10 | 5) + 1))) ^ 7) - (data_10 >>> 10));
    wire [WIDTH-1:0] data_12;
    assign data_12 = ((((data_11 <<< 5) - ((data_11 <<< 9) <<< ((data_11 | 5) + 1))) ^ 7) - (data_11 >>> 10));
    wire [WIDTH-1:0] data_13;
    assign data_13 = ((((data_12 <<< 5) - ((data_12 <<< 9) <<< ((data_12 | 5) + 1))) ^ 7) - (data_12 >>> 10));
    wire [WIDTH-1:0] data_14;
    assign data_14 = ((((data_13 & 7) <<< (data_13 | 2)) ^ 9) - 10);
    wire [WIDTH-1:0] data_15;
    assign data_15 = ((data_14 & 3) - 7);
    wire [WIDTH-1:0] data_16;
    assign data_16 = (((data_15 >>> 4) - ((data_15 & 5) - 4)) ^ 4);
    wire [WIDTH-1:0] data_17;
    assign data_17 = (((data_16 & 10) & 8) ^ 4);
    wire [WIDTH-1:0] data_18;
    assign data_18 = (((((data_17 >>> 6) | 2) - 3) <<< 6) + 4);
    wire [WIDTH-1:0] data_19;
    assign data_19 = (((((data_18 >>> 6) | 2) - 3) <<< 6) + 4);
    wire [WIDTH-1:0] data_20;
    assign data_20 = (((((data_19 >>> 6) | 2) - 3) <<< 6) + 4);
    wire [WIDTH-1:0] data_21;
    assign data_21 = (((((data_20 ^ 8) <<< 3) >>> (data_20 & 6)) & 8) | 5);
    wire [WIDTH-1:0] data_22;
    assign data_22 = (((((data_21 + 2) + 1) - ((data_21 - 1) ^ 1)) + 8) + (((data_21 & 6) <<< 5) ^ ((data_21 - 3) <<< ((data_21 + 6) ^ (data_21 - 7)))));
    wire [WIDTH-1:0] data_23;
    assign data_23 = (((data_22 | 1) + 7) & (data_22 & 5));
    wire [WIDTH-1:0] data_24;
    assign data_24 = (((data_23 | 1) + 7) & (data_23 & 5));
    wire [WIDTH-1:0] data_25;
    assign data_25 = (((((data_24 + 1) + 6) + (data_24 + 3)) - 10) | 4);
    wire [WIDTH-1:0] data_26;
    assign data_26 = (((((data_25 + 1) + 6) + (data_25 + 3)) - 10) | 4);
    wire [WIDTH-1:0] data_27;
    assign data_27 = (((((data_26 + 1) + 6) + (data_26 + 3)) - 10) | 4);
    wire [WIDTH-1:0] data_28;
    assign data_28 = (((((data_27 + 1) + 6) + (data_27 + 3)) - 10) | 4);
    wire [WIDTH-1:0] data_29;
    assign data_29 = (((data_28 >>> 4) ^ (((data_28 <<< 10) <<< (data_28 >>> 3)) - (data_28 <<< 4))) + 10);
    wire [WIDTH-1:0] data_30;
    assign data_30 = ((((((data_29 & 1) >>> (data_29 | 10)) & 8) | (data_29 + 5)) >>> 6) <<< 9);
    wire [WIDTH-1:0] data_31;
    assign data_31 = (((((data_30 + 3) + (data_30 | 10)) >>> 3) + 6) | 4);
    wire [WIDTH-1:0] data_32;
    assign data_32 = ((((data_31 & 4) >>> 3) + (data_31 | 7)) ^ ((((data_31 | 6) ^ ((data_31 >>> 5) <<< 5)) ^ ((data_31 & 1) ^ 4)) | 6));
    wire [WIDTH-1:0] data_33;
    assign data_33 = ((((data_32 & 4) >>> 3) + (data_32 | 7)) ^ ((((data_32 | 6) ^ ((data_32 >>> 5) <<< 5)) ^ ((data_32 & 1) ^ 4)) | 6));
    wire [WIDTH-1:0] data_34;
    assign data_34 = (((data_33 | 8) | ((data_33 >>> 10) + 8)) | (data_33 ^ 4));
    wire [WIDTH-1:0] data_35;
    assign data_35 = ((((((data_34 <<< 7) <<< (data_34 + 1)) & 4) - (data_34 <<< 10)) | 3) | (data_34 <<< 2));
    wire [WIDTH-1:0] data_36;
    assign data_36 = ((((((data_35 <<< 7) <<< (data_35 + 1)) & 4) - (data_35 <<< 10)) | 3) | (data_35 <<< 2));
    wire [WIDTH-1:0] data_37;
    assign data_37 = ((((((data_36 <<< 7) <<< (data_36 + 1)) & 4) - (data_36 <<< 10)) | 3) | (data_36 <<< 2));
    wire [WIDTH-1:0] data_38;
    assign data_38 = (((data_37 | 9) + 1) | (((data_37 >>> 4) | 7) | ((data_37 + 7) <<< 7)));
    wire [WIDTH-1:0] data_39;
    assign data_39 = ((((((data_38 + 3) <<< 9) <<< (data_38 | 9)) & (data_38 + 2)) >>> 7) + 4);
    wire [WIDTH-1:0] data_40;
    assign data_40 = ((((data_39 + 2) + 6) <<< ((((data_39 | 10) ^ 10) >>> (data_39 <<< 4)) <<< 4)) | ((data_39 <<< 1) - 4));
    wire [WIDTH-1:0] data_41;
    assign data_41 = (((data_40 >>> 4) <<< 9) - 1);
    wire [WIDTH-1:0] data_42;
    assign data_42 = (((data_41 >>> 4) <<< 9) - 1);
    wire [WIDTH-1:0] data_43;
    assign data_43 = (((data_42 >>> 4) <<< 9) - 1);
    wire [WIDTH-1:0] data_44;
    assign data_44 = (((data_43 >>> 4) <<< 9) - 1);
    wire [WIDTH-1:0] data_45;
    assign data_45 = ((data_44 >>> 2) - ((((data_44 >>> 4) ^ 9) + (((data_44 >>> 1) - (data_44 <<< 10)) ^ 2)) + 9));
    wire [WIDTH-1:0] data_46;
    assign data_46 = ((((data_45 | 9) <<< 1) ^ 4) + (data_45 <<< 6));
    wire [WIDTH-1:0] data_47;
    assign data_47 = ((((data_46 | 9) <<< 1) ^ 4) + (data_46 <<< 6));
    wire [WIDTH-1:0] data_48;
    assign data_48 = ((((data_47 | 9) <<< 1) ^ 4) + (data_47 <<< 6));
    wire [WIDTH-1:0] data_49;
    assign data_49 = ((((data_48 | 9) <<< 1) ^ 4) + (data_48 <<< 6));
    wire [WIDTH-1:0] data_50;
    assign data_50 = ((((data_49 | 2) + (data_49 + 5)) >>> ((data_49 ^ 4) & 7)) >>> 9);
    wire [WIDTH-1:0] data_51;
    assign data_51 = ((data_50 ^ 2) ^ 2);
    wire [WIDTH-1:0] data_52;
    assign data_52 = (((data_51 & 3) <<< (data_51 <<< 7)) - (((data_51 >>> 10) & ((data_51 + 8) ^ (data_51 >>> 2))) ^ (((data_51 & 1) & 8) & (((data_51 >>> 10) | 3) + 8))));
    wire [WIDTH-1:0] data_53;
    assign data_53 = ((((data_52 >>> 9) | (data_52 <<< 1)) ^ (data_52 + 6)) & 8);
    wire [WIDTH-1:0] data_54;
    assign data_54 = ((((data_53 >>> 9) | (data_53 <<< 1)) ^ (data_53 + 6)) & 8);
    wire [WIDTH-1:0] data_55;
    assign data_55 = ((((data_54 >>> 9) | (data_54 <<< 1)) ^ (data_54 + 6)) & 8);
    wire [WIDTH-1:0] data_56;
    assign data_56 = ((((data_55 >>> 9) | (data_55 <<< 1)) ^ (data_55 + 6)) & 8);
    wire [WIDTH-1:0] data_57;
    assign data_57 = (((data_56 + 5) & 6) | 7);
    wire [WIDTH-1:0] data_58;
    assign data_58 = (((data_57 + 5) & 6) | 7);
    wire [WIDTH-1:0] data_59;
    assign data_59 = ((((data_58 | 10) + 4) | (data_58 ^ 10)) | (((((data_58 <<< 10) + 5) | 4) | 8) <<< 5));
    wire [WIDTH-1:0] data_60;
    assign data_60 = (((data_59 >>> 2) + 10) <<< ((((data_59 <<< 3) ^ (data_59 | 8)) ^ (data_59 + 9)) - 9));
    wire [WIDTH-1:0] data_61;
    assign data_61 = ((data_60 | 8) >>> 10);
    wire [WIDTH-1:0] data_62;
    assign data_62 = ((((data_61 ^ 10) | (data_61 >>> 1)) - 8) + 6);
    wire [WIDTH-1:0] data_63;
    assign data_63 = (((((data_62 - 3) & 8) | 5) & 10) - (((data_62 <<< 9) | (data_62 ^ 7)) >>> 8));
    wire [WIDTH-1:0] data_64;
    assign data_64 = ((data_63 & 2) + 7);
    wire [WIDTH-1:0] data_65;
    assign data_65 = ((data_64 & 2) + 7);
    wire [WIDTH-1:0] data_66;
    assign data_66 = (((((data_65 & 4) >>> 5) | ((data_65 >>> 10) <<< (data_65 >>> 1))) - ((data_65 >>> 4) ^ ((data_65 - 5) - 5))) + ((data_65 | 4) >>> (data_65 | 10)));
    wire [WIDTH-1:0] data_67;
    assign data_67 = (((data_66 - 4) | ((data_66 - 10) | 2)) <<< (((data_66 ^ 7) ^ 8) ^ 5));
    wire [WIDTH-1:0] data_68;
    assign data_68 = (((data_67 >>> 1) - (data_67 - 6)) | 4);
    wire [WIDTH-1:0] data_69;
    assign data_69 = ((data_68 + 6) <<< 9);
    wire [WIDTH-1:0] data_70;
    assign data_70 = (((data_69 >>> 8) | ((((data_69 & 7) & 5) + 1) <<< (data_69 <<< 7))) ^ (((((data_69 <<< 2) ^ 6) + (data_69 <<< 9)) & (data_69 <<< 3)) >>> 1));
    wire [WIDTH-1:0] data_71;
    assign data_71 = ((((data_70 <<< 9) & 4) <<< (data_70 >>> 7)) & (((data_70 & 6) >>> (data_70 <<< 2)) + 4));
    wire [WIDTH-1:0] data_72;
    assign data_72 = ((((data_71 ^ 4) <<< 5) & (((data_71 ^ 6) - (data_71 >>> 6)) & 6)) >>> 5);
    wire [WIDTH-1:0] data_73;
    assign data_73 = ((((data_72 ^ 4) <<< 5) & (((data_72 ^ 6) - (data_72 >>> 6)) & 6)) >>> 5);
    wire [WIDTH-1:0] data_74;
    assign data_74 = ((((data_73 ^ 4) <<< 5) & (((data_73 ^ 6) - (data_73 >>> 6)) & 6)) >>> 5);
    wire [WIDTH-1:0] data_75;
    assign data_75 = ((((data_74 ^ 4) <<< 5) & (((data_74 ^ 6) - (data_74 >>> 6)) & 6)) >>> 5);
    wire [WIDTH-1:0] data_76;
    assign data_76 = ((((data_75 ^ 4) >>> 6) <<< 10) & ((((data_75 ^ 7) >>> 5) <<< (data_75 + 10)) >>> 8));
    wire [WIDTH-1:0] data_77;
    assign data_77 = ((((data_76 >>> 6) | ((data_76 <<< 5) - (data_76 >>> 1))) >>> 6) >>> ((((data_76 | 7) >>> 7) ^ (((data_76 & 7) ^ 10) >>> 8)) + 7));
    wire [WIDTH-1:0] data_78;
    assign data_78 = ((((data_77 >>> 6) | ((data_77 <<< 5) - (data_77 >>> 1))) >>> 6) >>> ((((data_77 | 7) >>> 7) ^ (((data_77 & 7) ^ 10) >>> 8)) + 7));
    wire [WIDTH-1:0] data_79;
    assign data_79 = ((((data_78 >>> 6) | ((data_78 <<< 5) - (data_78 >>> 1))) >>> 6) >>> ((((data_78 | 7) >>> 7) ^ (((data_78 & 7) ^ 10) >>> 8)) + 7));
    wire [WIDTH-1:0] data_80;
    assign data_80 = ((((data_79 >>> 6) | ((data_79 <<< 5) - (data_79 >>> 1))) >>> 6) >>> ((((data_79 | 7) >>> 7) ^ (((data_79 & 7) ^ 10) >>> 8)) + 7));
    wire [WIDTH-1:0] data_81;
    assign data_81 = ((((((data_80 - 1) | 9) <<< (data_80 + 6)) <<< (data_80 - 1)) ^ ((data_80 + 7) <<< 1)) & 8);
    wire [WIDTH-1:0] data_82;
    assign data_82 = ((((data_81 - 9) <<< 10) <<< 7) | ((data_81 >>> 9) <<< ((data_81 >>> 3) | 5)));
    wire [WIDTH-1:0] data_83;
    assign data_83 = (((((data_82 <<< 7) >>> (data_82 >>> 5)) ^ 10) - 9) >>> 5);

    asrt: assert property (@(posedge clk) disable iff(tb_reset)
        in_vld |-> ##DEPTH out_vld && (out_data == $past(data_83, DEPTH))
    );
    
endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
