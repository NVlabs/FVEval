design_name,task_id,prompt,ref_solution,testbench
pipeline,ns_2-w_128-opd_2-0,"`define WIDTH 128
`define DEPTH 4

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 8) ^ (data[i] - 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 2) ^ 10) - 2);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 4

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_2-1,"`define WIDTH 128
`define DEPTH 2

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 1) + 2) ^ (in_data >>> 6));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 8) & 10);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_2-2,"`define WIDTH 128
`define DEPTH 2

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 10) >>> ((in_data - 5) + 10));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) + (in_data & 2)) - 3);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_2-3,"`define WIDTH 128
`define DEPTH 2

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 1) | (in_data + 4)) <<< (in_data - 6));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 9) - (in_data >>> 9)) | ((in_data ^ 7) >>> (in_data | 8)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_2-4,"`define WIDTH 128
`define DEPTH 5

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 10) <<< 1) - 3);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 2) >>> ((data[i] | 2) <<< (data[i] + 1)));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 5

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_2-5,"`define WIDTH 128
`define DEPTH 2

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) - 4) <<< (in_data & 9));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 10) & (in_data | 4));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_3-0,"`define WIDTH 128
`define DEPTH 2

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 5) ^ ((in_data <<< 1) <<< 1));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 10) ^ ((in_data + 1) & (in_data <<< 6))) - 4);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_3-1,"`define WIDTH 128
`define DEPTH 5

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 7) >>> (((data[i] + 4) + 7) <<< 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 8) ^ (in_data <<< 3)) >>> ((in_data + 8) | 9));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 5

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_3-2,"`define WIDTH 128
`define DEPTH 2

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 8) ^ (in_data | 7)) - (in_data ^ 3)) - 5);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 1) + 8) - ((in_data ^ 6) | 2));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_3-3,"`define WIDTH 128
`define DEPTH 2

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 1) & 6);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 9) - 3);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_3-4,"`define WIDTH 128
`define DEPTH 3

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 6) >>> 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 6) + 2);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 3

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_3-5,"`define WIDTH 128
`define DEPTH 2

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 2) <<< ((in_data + 2) + 4));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 2) & 10) ^ 4) ^ 5);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_4-0,"`define WIDTH 128
`define DEPTH 3

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 9) | ((in_data >>> 4) & (in_data - 1))) >>> (((in_data | 10) - 5) <<< 6));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 7) >>> 4) | 5);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 3

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_4-1,"`define WIDTH 128
`define DEPTH 6

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 9) - ((data[i] <<< 7) + (data[i] - 5))) >>> 8) + 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 5) >>> 1) >>> 7) ^ 7);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 6

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_4-2,"`define WIDTH 128
`define DEPTH 4

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 3) >>> 7);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 7) <<< 2) | (data[i] | 7)) <<< 6);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 4

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_4-3,"`define WIDTH 128
`define DEPTH 3

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 6) ^ 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 2) & 3) <<< (in_data >>> 4)) <<< (in_data | 8)) >>> 8);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 3

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_4-4,"`define WIDTH 128
`define DEPTH 2

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 2) + 9) ^ 10) + ((in_data | 2) ^ ((in_data | 7) >>> 3)));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 5) + ((in_data & 3) + 2));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_4-5,"`define WIDTH 128
`define DEPTH 3

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 2) | (data[i] - 7)) - 4) - 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 8) ^ 4) + (in_data & 3)) + (((in_data + 2) & 9) - (in_data & 3)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 3

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_5-0,"`define WIDTH 128
`define DEPTH 2

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 8) | 3) <<< 3) - ((((in_data & 2) >>> 8) + 8) ^ ((in_data <<< 8) <<< 5)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 9) & ((in_data & 8) | (in_data & 8)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_5-1,"`define WIDTH 128
`define DEPTH 2

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 10) & (in_data + 5)) ^ (in_data & 2)) + (in_data - 3)) <<< (((in_data <<< 9) ^ 4) >>> 5));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 3) >>> 5);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_5-2,"`define WIDTH 128
`define DEPTH 2

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 10) >>> 5) + (((in_data | 3) - (in_data <<< 3)) + 7));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 4) & 3) & 8) | (((in_data <<< 7) ^ 2) | 7)) ^ 5);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_5-3,"`define WIDTH 128
`define DEPTH 4

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 8) >>> ((in_data ^ 7) <<< ((in_data & 1) | 5))) & (in_data - 6));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] <<< 3) <<< 2) <<< 1) - 4) | 7);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 4

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_5-4,"`define WIDTH 128
`define DEPTH 2

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 9) | 6) & 5) >>> (((in_data + 2) >>> 7) | 8));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 6) | 4) - ((in_data - 6) | (in_data >>> 9)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 2

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_2-w_128-opd_5-5,"`define WIDTH 128
`define DEPTH 4

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 5) & 8) & 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 7) ^ (((in_data | 2) >>> 5) - 4));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 4

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_2-0,"`define WIDTH 128
`define DEPTH 10

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 10) & ((data[i] ^ 1) >>> 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 8) + ((in_data | 8) + 4));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 8) + (data[i] <<< 4)) | ((data[i] ^ 3) - 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 10) + 7) + ((in_data >>> 4) <<< 9));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 1) <<< (data[i] & 4)) <<< (data[i] | 4));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 10

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_2-1,"`define WIDTH 128
`define DEPTH 5

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) <<< 6);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 10) ^ 3) + ((in_data + 5) <<< (in_data <<< 7)));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) - (in_data & 9)) - 8);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 8) + 8);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 3) + 7) <<< ((in_data + 6) <<< (in_data >>> 3)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 5

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_2-2,"`define WIDTH 128
`define DEPTH 5

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 10) ^ 7) <<< ((in_data | 5) - (in_data - 2)));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 4) & (in_data ^ 6)) + (in_data >>> 5));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 8) ^ (in_data + 7));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 9) - 2) | 5);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 3) - (in_data - 6)) ^ ((in_data - 6) >>> 1));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 5

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_2-3,"`define WIDTH 128
`define DEPTH 8

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 4) ^ 4) | 1);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 10) - 1) & 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 4) <<< (in_data >>> 7));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 10) & (in_data & 1));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) ^ 2) | 4);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 8

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_2-4,"`define WIDTH 128
`define DEPTH 5

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 8) & (in_data + 10)) & 6);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 1) >>> (in_data >>> 6));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 3) - (in_data | 1)) - 5);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) <<< 7) ^ (in_data - 5));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 1) + (in_data >>> 1));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 5

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_2-5,"`define WIDTH 128
`define DEPTH 8

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 8) & (in_data >>> 1)) | (in_data | 5));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 6) - 7);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 10) | (in_data <<< 3)) + 6);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 10) & 1) ^ ((data[i] >>> 2) | (data[i] + 3)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 8) ^ (in_data + 8)) >>> 2);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 8

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_3-0,"`define WIDTH 128
`define DEPTH 6

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 1) ^ ((data[i] & 9) ^ (data[i] | 2))) + 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 6) ^ 8) & 9) | 10);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 1) - (in_data <<< 7)) ^ (in_data - 5));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 4) | 4) ^ 6);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 1) | 6) - ((in_data - 3) ^ (in_data >>> 6)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 6

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_3-1,"`define WIDTH 128
`define DEPTH 7

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 6) >>> 5) - 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 5) & (in_data ^ 6));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 6) <<< 4);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) <<< 1);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 3) <<< (in_data - 3)) | 10);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 7

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_3-2,"`define WIDTH 128
`define DEPTH 11

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 2) + (data[i] + 2)) - (data[i] >>> 8)) ^ (((data[i] - 9) <<< 8) <<< ((data[i] >>> 3) + 9)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) - 9) | 2);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 9) & (((in_data <<< 3) & (in_data ^ 10)) | 6));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 7) ^ 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 10) ^ 3);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 11

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_3-3,"`define WIDTH 128
`define DEPTH 8

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 6) & 9) ^ 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) >>> 3) >>> ((in_data | 9) >>> ((in_data - 4) >>> (in_data & 5))));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 8) | (in_data + 5));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 2) | (data[i] ^ 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 6) & 4) & 7);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 8

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_3-4,"`define WIDTH 128
`define DEPTH 6

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 8) ^ (in_data ^ 9)) | 1) | 8);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 7) - (in_data - 6));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 10) | (data[i] | 9)) & ((data[i] | 6) - 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 10) + 7) - (((in_data + 9) + (in_data - 4)) - 2));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 6) ^ (in_data ^ 9)) + (in_data + 8));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 6

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_3-5,"`define WIDTH 128
`define DEPTH 6

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 4) >>> 3) - (((in_data ^ 4) >>> (in_data - 9)) - (in_data <<< 10)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 8) | (in_data - 5)) & 8);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 6) - 10) - (data[i] - 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 2) >>> 9) | 10) - 4);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 4) | 5) - ((in_data <<< 6) ^ 6)) - (in_data | 2));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 6

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_4-0,"`define WIDTH 128
`define DEPTH 11

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 1) & 4) >>> ((in_data ^ 8) <<< 10)) & 2);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 1) + (in_data ^ 6)) ^ ((in_data >>> 1) <<< 1)) - (in_data ^ 6));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 10) ^ (in_data + 10)) - 6) | 1) & 9);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 4) + 9) + 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 4) - 3) | (((data[i] >>> 9) & 10) & 5));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 11

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_4-1,"`define WIDTH 128
`define DEPTH 7

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 9) ^ ((in_data ^ 4) ^ 1));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 8) + (in_data - 2)) & 9);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 8) + 6) >>> (((data[i] & 4) + ((data[i] & 9) - 5)) | (((data[i] >>> 10) - 4) - (data[i] <<< 4))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 1) <<< (((in_data | 2) & 4) + 5));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 6) ^ (((data[i] >>> 6) + 1) - 7));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 7

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_4-2,"`define WIDTH 128
`define DEPTH 5

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 7) + (((in_data - 4) & 2) & (in_data >>> 1))) >>> (in_data + 8));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 1) >>> 4) ^ (in_data <<< 3)) - (in_data | 5)) - 7);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 1) - 6) >>> 4) + (((in_data + 10) >>> ((in_data ^ 5) + 1)) - 5));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 5) & 6) & 1) <<< ((in_data & 8) | 4));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 10) & ((in_data >>> 4) ^ (in_data - 5))) >>> (((in_data & 5) ^ (in_data | 9)) ^ ((in_data + 1) <<< 4)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 5

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_4-3,"`define WIDTH 128
`define DEPTH 8

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 9) - 9) | (((data[i] + 10) - 4) >>> 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 2) >>> ((in_data + 7) ^ (in_data | 1)));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 5) >>> (in_data - 9)) & (in_data + 6));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 4) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 2) - (in_data + 3)) ^ 7) >>> ((in_data >>> 7) | 5));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 8

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_4-4,"`define WIDTH 128
`define DEPTH 5

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 2) - (in_data + 7)) ^ ((in_data & 8) + (in_data >>> 6))) | ((((in_data ^ 2) & 6) ^ ((in_data + 9) & 7)) ^ 8));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 7) ^ 5);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 8) | ((in_data | 9) & (in_data - 7))) - 6) + (((in_data <<< 3) <<< (in_data & 10)) <<< ((in_data - 9) | (in_data - 6))));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 4) ^ 4) | (in_data & 9)) ^ (((in_data ^ 8) - 4) >>> 7));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 5) & 10) ^ 6) - 4);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 5

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_4-5,"`define WIDTH 128
`define DEPTH 11

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 4) & (data[i] | 2)) <<< 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 4) >>> 10) + (in_data <<< 1)) | ((in_data - 3) - (in_data <<< 8)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 1) >>> (data[i] + 5)) + (((data[i] - 5) ^ ((data[i] - 5) - 10)) ^ (((data[i] - 4) + (data[i] + 6)) & 3)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 3) >>> (data[i] <<< 9)) + 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 9) >>> 7) & 7) >>> 3);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 11

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_5-0,"`define WIDTH 128
`define DEPTH 6

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) - (in_data - 8)) <<< ((in_data | 6) <<< ((in_data + 3) - (in_data >>> 9))));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 9) + 10) <<< 3);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) <<< 5) & ((((in_data ^ 6) >>> 6) - 1) ^ 2));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 10) | 4) + 6) - 1);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] <<< 8) ^ (data[i] ^ 1)) ^ ((data[i] - 8) >>> 4)) >>> ((data[i] | 8) <<< 4)) - 4);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 6

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_5-1,"`define WIDTH 128
`define DEPTH 8

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 10) <<< (in_data & 9));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data | 5) >>> 7) - 3) | ((in_data - 1) - ((in_data & 10) & 2))) >>> ((in_data <<< 2) - ((((in_data | 3) ^ (in_data >>> 9)) & 7) >>> (in_data | 8))));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) & 4) & 7);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 4) - (data[i] | 5)) + ((data[i] & 3) <<< 5)) ^ (data[i] | 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 2) >>> 10) ^ ((in_data + 2) | (in_data | 1))) <<< 4);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 8

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_5-2,"`define WIDTH 128
`define DEPTH 6

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 9) >>> (in_data + 2)) | 3);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] >>> 2) ^ 5) >>> 5) & 4) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 6) - ((in_data ^ 4) <<< (in_data ^ 6))) <<< ((in_data & 6) >>> ((in_data & 1) - ((in_data + 8) ^ 5))));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 1) | (in_data & 7)) ^ 7) - (in_data ^ 5));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 6) | (in_data ^ 4)) <<< 10) >>> 3);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 6

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_5-3,"`define WIDTH 128
`define DEPTH 8

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 8) | ((in_data <<< 5) + ((in_data | 2) + 10))) ^ 7);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) <<< 5) <<< ((in_data + 1) >>> 2));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) | 10) | ((((in_data + 10) + 4) + 7) >>> 10));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 10) - (data[i] <<< 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) | 2) + ((in_data <<< 2) + (((in_data - 9) <<< (in_data >>> 6)) + 8)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 8

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_5-4,"`define WIDTH 128
`define DEPTH 12

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 6) >>> (data[i] + 3)) ^ 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 10) <<< (data[i] <<< 3)) <<< 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] <<< 2) - 6) & ((data[i] <<< 2) | 3)) + (data[i] <<< 4)) <<< 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 6) | (in_data >>> 1)) + ((in_data <<< 7) - 8)) | ((in_data >>> 7) + 4)) + 10);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 7) | ((in_data - 5) >>> ((in_data + 5) & (in_data >>> 3)))) | (((in_data & 1) - 10) >>> 9));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 12

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_5-w_128-opd_5-5,"`define WIDTH 128
`define DEPTH 7

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 6) ^ 10) >>> 4) - (data[i] & 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 5) >>> ((in_data >>> 8) - 8));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) | 5) | 7);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 3) | ((in_data + 8) - 2)) >>> (in_data ^ 9)) <<< ((in_data + 5) <<< ((((in_data >>> 1) <<< 5) + 2) - 8)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 9) <<< (((in_data | 9) | 7) >>> 5)) ^ 9) ^ (((in_data | 2) >>> 1) <<< (((in_data - 8) | (in_data >>> 5)) - 10)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 7

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_2-0,"`define WIDTH 128
`define DEPTH 15

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) + (in_data ^ 10)) <<< 3);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 2) - (in_data - 2));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 4) ^ 10);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) | 5);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) ^ 9) | ((in_data - 9) & (in_data >>> 1)));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 5) + 3) | ((data[i] <<< 3) >>> (data[i] & 7)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 3) ^ 9) <<< 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 9) | (data[i] & 5)) - 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 2) | 5) & ((in_data <<< 2) ^ 6));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 9) >>> 5);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 15

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_2-1,"`define WIDTH 128
`define DEPTH 20

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 5) + 4);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 9) - 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 8) ^ (in_data + 3)) + 7);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 1) & (data[i] ^ 3)) - 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 3) <<< 3) <<< 8);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 3) <<< (data[i] - 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 9) <<< (in_data + 7));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 10) & 7) - 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 9) - 7) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 7) <<< (in_data & 8)) <<< 9);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 20

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_2-2,"`define WIDTH 128
`define DEPTH 23

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 6) <<< (data[i] ^ 6)) <<< ((data[i] >>> 2) - 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 5) ^ (data[i] + 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 1) | (data[i] ^ 8)) + 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 9) | ((data[i] >>> 2) & (data[i] >>> 3)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 2) ^ 3) | 3);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) ^ 4) + 10);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) >>> (in_data >>> 9)) <<< 1);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 2) <<< (data[i] + 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 5) <<< ((data[i] + 5) & (data[i] | 4)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 6) & 6);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 23

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_2-3,"`define WIDTH 128
`define DEPTH 13

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 4) - 9) >>> ((in_data >>> 3) & (in_data <<< 6)));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 1) ^ (in_data ^ 4)) | 4);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 7) ^ (in_data ^ 1)) >>> 4);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) - 10) & (in_data >>> 8));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 2) | (in_data - 5));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 9) ^ (in_data <<< 9)) <<< (in_data - 2));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 5) ^ (in_data >>> 5));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 4) & 2);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 4) >>> (data[i] - 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 1) ^ (data[i] & 3)) + ((data[i] | 1) - 8));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 13

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_2-4,"`define WIDTH 128
`define DEPTH 22

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 2) >>> ((in_data & 10) + 4));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 1) | 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) | 5) ^ ((in_data - 1) >>> 2));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 1) <<< (in_data <<< 4)) <<< (in_data + 3));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 8) + 9) + (in_data <<< 8));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 7) & ((data[i] ^ 1) | 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 8) | 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 3) + 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 9) + 9) >>> ((data[i] - 6) >>> (data[i] <<< 1)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 7) & 4) ^ (in_data <<< 5));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 22

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_2-5,"`define WIDTH 128
`define DEPTH 12

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 8) <<< 1);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 10) | 1) | 6);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 10) + ((in_data | 3) ^ 5));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 9) <<< 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 8) <<< (in_data + 2)) | 5);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 5) + (in_data <<< 2));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 1) & (in_data >>> 6)) | (in_data + 9));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 8) & 4);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 6) - 9);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 9) & 10);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 12

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_3-0,"`define WIDTH 128
`define DEPTH 14

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 10) >>> ((in_data - 2) + (in_data ^ 3)));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) & 2) + (in_data - 5));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 8) + 10);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 6) - (in_data - 7)) ^ 8);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 8) <<< 4) | (((data[i] >>> 10) & 10) ^ ((data[i] | 7) ^ 8)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) ^ (in_data ^ 9)) ^ 5);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 6) >>> ((data[i] - 4) <<< 6)) | 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 4) | 6);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) | (in_data - 2)) & ((in_data <<< 4) + 9));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 1) + (((in_data + 7) + 10) + 6));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 14

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_3-1,"`define WIDTH 128
`define DEPTH 19

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 3) | 3);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 3) >>> ((in_data & 6) - (in_data >>> 10)));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 3) <<< ((in_data + 9) >>> ((in_data >>> 10) <<< 4)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 8) <<< (data[i] <<< 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 5) + 3) >>> 10) - 5);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 10) <<< (((data[i] & 2) | 2) + 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 2) + 4);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 7) + (data[i] <<< 2)) - 6) <<< (data[i] & 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) <<< (in_data & 7)) >>> (in_data & 3));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 1) ^ (data[i] <<< 7)) | ((data[i] - 2) >>> (data[i] <<< 2))) & 10);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 19

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_3-2,"`define WIDTH 128
`define DEPTH 13

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 7) - ((data[i] <<< 7) >>> ((data[i] & 7) | 10)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 2) >>> 4) >>> 7);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 1) + (in_data ^ 5)) >>> (((in_data & 1) | 5) <<< 1));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 1) <<< (in_data - 1)) | (in_data >>> 1)) & ((in_data & 8) & 7));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 6) - 10) ^ 10);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 4) ^ 3);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 9) <<< ((in_data & 5) + (in_data ^ 7)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 10) + 4) - ((in_data - 7) & (in_data ^ 6)));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 9) + (in_data ^ 10)) <<< (in_data & 2));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 7) ^ (in_data <<< 8)) ^ 5) + 3);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 13

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_3-3,"`define WIDTH 128
`define DEPTH 20

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 6) <<< (data[i] & 3)) <<< 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 10) <<< ((in_data <<< 9) <<< 1));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 10) >>> 6) - ((in_data + 8) ^ ((in_data | 4) >>> 2)));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 10) - 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 9) | (in_data ^ 4)) & ((in_data - 10) <<< 9));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 3) + ((data[i] + 1) ^ 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 7) ^ (((data[i] <<< 1) ^ 3) >>> (data[i] >>> 7)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 9) ^ 9);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) >>> ((in_data >>> 2) + 10)) <<< 6);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 7) + 8) >>> (data[i] + 9)) <<< ((data[i] >>> 4) - (data[i] ^ 10)));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 20

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_3-4,"`define WIDTH 128
`define DEPTH 14

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 10) <<< 8) | 6) & (in_data - 9));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 9) - (in_data - 3)) <<< 10) <<< 2);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 1) ^ (in_data & 9));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 2) | 5) + ((in_data >>> 4) + (in_data <<< 10))) <<< ((in_data ^ 4) ^ (in_data & 2)));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 4) + 5) + 3);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 8) - 9);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 8) <<< ((in_data | 10) & 8));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 5) ^ (data[i] >>> 7)) + (((data[i] + 7) - (data[i] - 2)) | 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 4) ^ 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 10) <<< 6) ^ 8);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 14

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_3-5,"`define WIDTH 128
`define DEPTH 16

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 10) | 6);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 7) ^ ((data[i] | 9) & (data[i] | 4)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 6) + (in_data & 4)) <<< ((in_data & 4) & (in_data + 7))) >>> (in_data - 4));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 6) <<< (in_data & 6)) >>> ((in_data & 1) | (in_data & 4))) >>> 2);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 6) - (in_data + 2)) <<< (((in_data - 8) <<< 2) <<< (in_data & 10)));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 1) - 2) + 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 10) >>> 9);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 7) - (in_data <<< 6)) >>> 5);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 4) - (data[i] + 5)) + 8) | ((data[i] - 7) >>> 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 3) + 10) >>> (data[i] | 6));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 16

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_4-0,"`define WIDTH 128
`define DEPTH 16

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 7) - 10) & ((in_data & 2) + 4));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 9) | (data[i] & 10)) + (((data[i] & 1) | 7) & 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 1) + (in_data + 8)) >>> 3) - ((((in_data ^ 3) <<< 6) & 9) | ((in_data >>> 5) ^ ((in_data + 5) <<< 3))));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 3) - 4) <<< (data[i] ^ 2)) - (((data[i] & 5) ^ (data[i] >>> 6)) >>> 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 1) >>> (in_data >>> 8)) | 3) <<< 5);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 7) + ((data[i] | 6) >>> 7)) >>> 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 4) & 9) | 4) + (in_data ^ 7));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) - ((in_data - 2) ^ 2)) <<< (in_data & 7));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 10) <<< 10) <<< 3) + 5);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 6) >>> 5) - (in_data >>> 7)) <<< 4);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 16

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_4-1,"`define WIDTH 128
`define DEPTH 12

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 10) >>> (in_data - 8)) <<< 6) | (in_data & 4));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 6) <<< ((in_data - 9) <<< 1));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 3) >>> (in_data | 4)) + 10) <<< (((in_data | 10) & 10) & 9));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 10) - 4) >>> 1) - (in_data + 2));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] - 6) & (data[i] - 8)) | (data[i] <<< 4)) + 1) + 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 3) + 2) + ((in_data - 8) + (in_data + 4))) - 1);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 10) <<< 10);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 3) ^ (in_data + 9)) <<< 5) + (((in_data ^ 10) >>> 7) & ((in_data & 1) + (in_data | 2))));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 8) ^ 6);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 1) >>> ((in_data | 7) & 2));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 12

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_4-2,"`define WIDTH 128
`define DEPTH 24

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 5) - 4);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 2) & 1) <<< ((data[i] - 2) + (((data[i] ^ 1) >>> (data[i] <<< 6)) & (data[i] >>> 10))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 7) ^ ((in_data - 10) ^ 8)) >>> 4) <<< (((in_data & 9) + 4) ^ 2));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 9) <<< ((in_data | 1) >>> 4)) | (in_data ^ 8)) >>> 6);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 6) & 8) | 3) & (data[i] - 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 3) >>> (data[i] | 10)) >>> 5) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 8) + ((data[i] <<< 1) | 3)) | 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 7) & 6) | 5) ^ ((((data[i] + 1) + 7) ^ 4) + ((data[i] - 10) <<< 8)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 3) ^ 7) & (data[i] + 8)) & 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 10) & (data[i] <<< 5)) >>> 2) & ((data[i] + 2) >>> 5));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 24

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_4-3,"`define WIDTH 128
`define DEPTH 17

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 6) & 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 6) <<< 7) ^ 4) >>> 2);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 5) - (in_data - 7)) | 8);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 4) + 3);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 6) & (data[i] - 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 10) & ((in_data >>> 6) >>> (in_data | 8)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 3) + (((in_data - 3) >>> (in_data + 8)) ^ 1));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 7) + 5) ^ 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 1) ^ (data[i] ^ 3)) | 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 4) | (((in_data >>> 10) >>> (in_data >>> 5)) ^ 8));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 17

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_4-4,"`define WIDTH 128
`define DEPTH 15

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 1) <<< 10) >>> 8) <<< 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 7) <<< 4) & (data[i] + 3)) <<< (((data[i] >>> 7) <<< (data[i] >>> 10)) - 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 3) ^ (in_data - 1)) & 3);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 6) & 1) & 1);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) - (in_data + 1)) & (((in_data ^ 4) & ((in_data - 3) >>> 6)) ^ (in_data | 3)));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 3) <<< (data[i] + 4)) <<< 5) | (data[i] + 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 10) ^ 7) - 1) | 7);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 2) ^ 6) + ((in_data - 1) - (in_data + 5))) & 2);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 10) - ((in_data - 4) ^ (in_data & 7))) ^ ((in_data <<< 7) | 2));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 4) | (((in_data >>> 1) | (in_data + 1)) | (((in_data | 2) ^ 5) - 6)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 15

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_4-5,"`define WIDTH 128
`define DEPTH 17

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 3) | 10) >>> 8) <<< 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 6) - 6);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] + 10) - 6) <<< 10) >>> (data[i] <<< 7)) ^ 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 9) & (((in_data & 8) + (in_data >>> 10)) | (in_data <<< 6))) - 2);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 7) ^ (in_data >>> 9)) - (((in_data + 3) ^ ((in_data | 5) <<< (in_data ^ 2))) <<< ((in_data | 4) | (in_data & 4))));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 5) <<< 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 6) & (((in_data | 10) >>> (in_data ^ 2)) & (((in_data - 6) & 3) & 8)));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 2) <<< ((in_data >>> 5) & (in_data - 8))) & 8) | 4);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 8) - (in_data | 4)) & (in_data | 2)) + 10);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 10) - ((in_data <<< 7) <<< 1));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 17

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_5-0,"`define WIDTH 128
`define DEPTH 12

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 4) & 4) >>> (in_data | 5));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 7) >>> (((in_data + 4) & 1) >>> (in_data - 7))) ^ 1);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 4) + 1) - 1) <<< 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 7) & ((in_data <<< 3) >>> 4)) - 4) + (in_data & 4));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 8) & 9) + (in_data + 3)) & 5);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 6) >>> (in_data | 7)) | 1) - (((in_data + 5) - (in_data & 3)) & (in_data - 7))) & ((in_data | 10) ^ ((((in_data & 7) + 4) + 8) & 9)));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 6) - (in_data | 4)) ^ (((in_data | 3) ^ (in_data >>> 4)) >>> 3)) + ((in_data ^ 9) | ((in_data >>> 1) | 1)));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 8) <<< ((((in_data >>> 2) | (in_data >>> 3)) | (in_data ^ 3)) >>> ((in_data | 5) >>> 6))) <<< ((in_data - 8) | (((in_data ^ 5) & (in_data >>> 9)) <<< 10)));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 4) ^ 10) - ((in_data >>> 9) ^ ((in_data + 5) - 8))) ^ 1);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data >>> 8) | 10) | 5) & ((in_data + 10) <<< 3)) + 2);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 12

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_5-1,"`define WIDTH 128
`define DEPTH 12

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 4) & (in_data & 4)) ^ ((in_data ^ 9) | 3)) & (((in_data <<< 1) & (in_data + 6)) | ((in_data & 3) | 10)));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 6) + 8) - 1) + 8);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 6) ^ (((in_data + 1) & (in_data & 3)) | 6)) + 8) + (((((in_data <<< 5) - 7) >>> (in_data & 2)) | ((in_data & 10) <<< (in_data <<< 9))) ^ 8));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 7) <<< 4) + ((data[i] | 7) ^ 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) <<< 10) | 2);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 2) >>> (in_data - 2)) >>> 2) - (((in_data | 4) - (((in_data ^ 10) <<< (in_data ^ 7)) + (in_data <<< 8))) ^ (in_data - 7)));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 5) >>> (in_data + 1)) <<< (((in_data ^ 10) - (in_data >>> 5)) + (in_data >>> 8))) >>> ((in_data - 2) & ((in_data & 4) | 6)));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 5) - 7);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 4) <<< (in_data >>> 2)) ^ ((in_data | 4) >>> (in_data & 1))) + ((((in_data >>> 4) <<< (in_data - 10)) <<< (in_data >>> 9)) & 3)) >>> 3);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 1) <<< 8) >>> (in_data & 6)) >>> (in_data & 3)) + (in_data + 6));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 12

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_5-2,"`define WIDTH 128
`define DEPTH 14

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 5) <<< ((((in_data | 7) & 6) & 10) <<< 7));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 10) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((((data[i] - 9) >>> (data[i] >>> 6)) + 1) <<< 9) + 5) & 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 6) >>> ((in_data ^ 8) >>> ((in_data + 10) ^ (in_data & 9))));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 10) & (in_data | 3)) - (in_data >>> 1)) >>> ((in_data | 9) & ((in_data | 5) | 8))) ^ (((in_data - 6) <<< (in_data | 3)) | (in_data - 5)));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 8) >>> ((in_data + 2) ^ (in_data - 5))) <<< ((in_data - 9) <<< (in_data - 9))) + 8);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 9) - (((in_data + 7) & 10) + ((in_data + 9) | 7))) ^ 10);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 10) & 9) & 2);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 1) >>> 6);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 7) & (in_data - 1)) <<< ((((in_data - 10) | (in_data & 4)) >>> 7) ^ 9)) - (((in_data <<< 10) | (in_data >>> 2)) <<< ((in_data <<< 6) - 1)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 14

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_5-3,"`define WIDTH 128
`define DEPTH 15

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 10) | (in_data | 1)) - 2) ^ ((in_data - 7) - 1)) ^ 10);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 1) <<< 6) <<< 5) & (((data[i] ^ 3) ^ (data[i] | 10)) + 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) | (in_data | 9)) >>> ((in_data | 2) <<< ((in_data <<< 7) <<< 1)));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 5) >>> 10) <<< (in_data <<< 7)) ^ 5);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 8) >>> (in_data + 8)) - 9) <<< 1) <<< (((in_data - 8) <<< 3) & 1));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 6) >>> ((((in_data ^ 4) ^ 10) - (in_data & 5)) <<< ((in_data | 2) | ((in_data + 6) & (in_data + 4)))));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 4) ^ ((data[i] + 4) & 7)) <<< (((data[i] ^ 9) <<< 8) | ((data[i] <<< 4) + (data[i] ^ 4))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 2) - 10) >>> ((data[i] | 6) & ((data[i] - 7) + ((data[i] >>> 8) | 7))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 4) ^ 10) >>> (in_data | 7)) & 10) >>> 1);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 1) <<< (in_data >>> 2)) & (((in_data + 3) | 1) & 5));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 15

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_5-4,"`define WIDTH 128
`define DEPTH 15

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 9) - 10) & (((in_data & 3) <<< (in_data & 1)) >>> 2));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 4) <<< (in_data | 10)) - (((in_data <<< 1) & 5) ^ ((in_data - 1) & (((in_data & 10) & 8) >>> (in_data <<< 1)))));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 8) - ((in_data + 8) | ((in_data + 5) <<< 6))) >>> (in_data >>> 1));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 7) + 6) + ((((data[i] | 1) ^ (data[i] | 9)) >>> (data[i] + 6)) | 7)) ^ (data[i] + 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 1) - (((in_data | 1) >>> 7) >>> 2));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 1) + 4) <<< ((((in_data ^ 9) & 10) <<< 6) | 6));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 4) <<< ((((data[i] & 4) & (data[i] | 6)) | (((data[i] <<< 2) - 2) <<< (data[i] | 1))) ^ 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 4) <<< ((in_data - 8) - 1)) + 3) ^ ((((in_data <<< 3) + 5) ^ 8) <<< 6));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 2) >>> (in_data >>> 10)) | 8);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 3) <<< ((in_data + 2) - ((in_data & 1) + (in_data ^ 2)))) + (((in_data & 1) | (in_data >>> 8)) >>> 5));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 15

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_10-w_128-opd_5-5,"`define WIDTH 128
`define DEPTH 18

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 6) - 9) ^ 3) + 5) | ((in_data + 6) & ((in_data | 1) | 9)));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 2) + ((in_data + 5) <<< 7)) <<< (((in_data | 4) & 4) - 6)) <<< (((in_data | 9) - 5) - ((in_data <<< 6) | (in_data & 10))));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 5) + 10) & 4) >>> 9);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 1) ^ (in_data & 2)) & ((in_data & 3) - (in_data | 5))) & 3) & 10);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] ^ 3) & 9) & ((data[i] & 5) <<< 3)) + 1) <<< 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 10) >>> 1) + 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 7) - 5) & ((in_data + 4) & ((in_data + 4) | (in_data <<< 7)))) + 3);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 5) >>> 4) + (data[i] >>> 2)) & (((data[i] ^ 7) <<< (data[i] & 10)) <<< 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 4) >>> (data[i] >>> 1)) ^ 9) + ((((data[i] + 7) <<< (data[i] ^ 8)) - (data[i] & 3)) <<< (((data[i] <<< 9) - ((data[i] + 7) + 7)) >>> ((data[i] <<< 6) + (data[i] - 10)))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 5) ^ (in_data - 10)) | ((((in_data + 6) - 6) <<< 8) & (in_data <<< 2)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 18

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_2-0,"`define WIDTH 128
`define DEPTH 85

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 4) & 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) <<< 8) ^ ((in_data >>> 6) | (in_data - 3)));
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 9) + 4);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) ^ (in_data & 5)) <<< 6);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 8) <<< (in_data & 6)) ^ ((in_data ^ 5) | 5));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 7) | 7);
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 8) <<< 6) | (in_data + 1));
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 4) - ((data[i] - 2) | (data[i] - 7)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 1) ^ ((in_data | 3) ^ 3));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 10) | (data[i] ^ 10)) >>> 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 9) <<< (in_data + 2));
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 5) & (in_data - 5)) & ((in_data >>> 8) + (in_data & 4)));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 7) ^ (data[i] & 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 2) - 8) ^ 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 1) <<< 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 8) ^ ((data[i] + 3) - 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 10) - (in_data ^ 6));
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 8) >>> (in_data <<< 10)) + ((in_data - 2) >>> (in_data ^ 2)));
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) >>> (in_data & 2)) - ((in_data ^ 9) & 4));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) + 6) & 7);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 2) | 1) >>> 3);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) >>> 2) ^ 4);
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 1) | 7);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 2) + ((data[i] >>> 1) - 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 2) >>> 3) >>> (in_data + 4));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 4) - 7) + 9);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 5) - (data[i] >>> 10)) <<< (data[i] - 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 2) ^ (data[i] <<< 7)) | ((data[i] | 6) ^ 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 6) <<< (data[i] ^ 2)) & ((data[i] <<< 10) | (data[i] ^ 8)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 7) + 2) | 8);
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 10) >>> (in_data - 10));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 10) >>> 8) >>> 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 7) - (in_data ^ 9));
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 2) >>> 7) <<< 9);
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 8) & 9);
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 5) - (data[i] + 7)) & 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 5) ^ 5) ^ (data[i] + 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 8) ^ (in_data + 5));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) ^ (in_data | 8)) >>> (in_data & 1));
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 7) ^ ((data[i] <<< 2) - (data[i] & 5)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 6) <<< (in_data <<< 3)) & 4);
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 6) + ((in_data >>> 8) + 10));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 5) | (in_data - 5)) | 1);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 5) | ((in_data >>> 4) | 10));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) - 2) | 8);
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 3) + (in_data + 2)) + (in_data & 6));
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 7) & (data[i] ^ 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 1) <<< 7);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 1) & 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 10) >>> (in_data | 7)) >>> 10);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[79]),
        .in_vld(ready[79]),
        .out_data(data[80]), 
        .out_vld(ready[80])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[80]),
        .in_vld(ready[80]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[82]),
        .in_vld(ready[82]),
        .out_data(data[83]), 
        .out_vld(ready[83])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[83]),
        .in_vld(ready[83]),
        .out_data(data[84]), 
        .out_vld(ready[84])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[84]),
        .in_vld(ready[84]),
        .out_data(data[85]), 
        .out_vld(ready[85])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 85

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_2-1,"`define WIDTH 128
`define DEPTH 85

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) & 5) ^ 4);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 6) - 9);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 10) & 5) ^ ((data[i] + 6) ^ (data[i] - 2)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 6) + ((data[i] >>> 6) <<< (data[i] - 1)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 4) <<< ((in_data ^ 1) - (in_data + 1)));
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 7) + 7);
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 7) >>> 8);
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 6) + 9) <<< 3);
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 8) >>> (data[i] ^ 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 5) ^ (in_data <<< 1)) + 9);
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 10) + 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 9) <<< (data[i] + 6)) + 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 7) - (data[i] & 10)) ^ ((data[i] & 4) <<< 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 7) + 3);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 7) <<< (in_data & 6)) - (in_data >>> 4));
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 2) + ((in_data <<< 1) <<< 2));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 5) >>> (in_data | 6)) - (in_data - 1));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 3) >>> (in_data <<< 9)) & ((in_data - 7) >>> (in_data + 8)));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 1) ^ (in_data & 1));
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 9) + (data[i] | 7)) + (data[i] >>> 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 5) ^ (data[i] & 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 5) >>> 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 7) <<< 2);
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 6) >>> (in_data <<< 6)) >>> ((in_data ^ 4) <<< 5));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 10) - (in_data <<< 3)) & (in_data + 1));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) - (in_data & 5)) ^ 5);
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 10) >>> 2) | 7);
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 8) ^ (in_data + 7)) <<< (in_data <<< 3));
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 6) ^ (in_data <<< 3));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 7) & 1) | (in_data - 2));
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) ^ (in_data - 2)) | 4);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 3) | 3) <<< (data[i] ^ 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 2) + 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 7) >>> 6) & 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 9) >>> 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 6) + ((data[i] ^ 2) >>> (data[i] >>> 5)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 8) >>> (in_data | 5));
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 9) - 5);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) & (in_data + 2)) ^ 4);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 4) >>> 6) - 10);
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 5) >>> (in_data >>> 3)) | 2);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 5) ^ (in_data | 2)) ^ 7);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 10) <<< (in_data ^ 6)) | 3);
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) - (in_data >>> 8));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 8) + ((in_data <<< 5) | 1));
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 8) | 1);
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 5) - 3);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 10) ^ 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 5) ^ ((data[i] & 6) ^ (data[i] + 7)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 9) ^ 5);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[79]),
        .in_vld(ready[79]),
        .out_data(data[80]), 
        .out_vld(ready[80])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[80]),
        .in_vld(ready[80]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[82]),
        .in_vld(ready[82]),
        .out_data(data[83]), 
        .out_vld(ready[83])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[83]),
        .in_vld(ready[83]),
        .out_data(data[84]), 
        .out_vld(ready[84])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[84]),
        .in_vld(ready[84]),
        .out_data(data[85]), 
        .out_vld(ready[85])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 85

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_2-2,"`define WIDTH 128
`define DEPTH 64

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 1) >>> (in_data + 10)) >>> 4);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 1) ^ (data[i] <<< 1)) + 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 3) - 4);
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 1) - (in_data | 5));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) + (in_data >>> 7)) >>> 3);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 9) <<< 7);
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 7) >>> 6) & 3);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 3) <<< 1) | 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 1) + 10);
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 1) <<< 2);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) | (in_data & 5)) >>> 4);
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 6) <<< 10);
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 1) ^ ((in_data <<< 4) <<< 4));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 2) <<< 3);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 7) | 3);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 7) | 2);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 10) + 2);
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 4) - (data[i] ^ 10)) >>> (data[i] <<< 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 8) <<< 6);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 3) ^ (in_data | 3)) - 3);
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 3) >>> 7);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 2) <<< (in_data ^ 9));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) >>> 9) >>> 8);
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 5) + (data[i] & 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 4) - (in_data >>> 10));
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 1) - ((in_data ^ 4) | 7));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 10) & 6) + 10);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) & 6);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 4) - (in_data >>> 9));
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 10) - 4) | 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 3) - 10);
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 6) | (data[i] & 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) + 8);
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 2) ^ 9);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 3) <<< (data[i] ^ 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 7) >>> ((in_data <<< 10) ^ (in_data | 8)));
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 1) ^ (in_data >>> 3)) | (in_data & 10));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 1) & (in_data + 2)) - 8);
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 2) <<< 2);
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 4) & 8);
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 9) >>> 8);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 10) ^ (in_data <<< 6)) | 3);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 4) & (in_data - 4));
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) <<< 1) - 1);
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 4) - 2) + 4);
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 7) + (in_data <<< 6));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 8) ^ ((in_data >>> 6) & 10));
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 4) | 3);
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 2) + ((in_data | 1) & 4));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 6) ^ 8) - 9);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 64

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_2-3,"`define WIDTH 128
`define DEPTH 83

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) ^ 9) & ((in_data ^ 6) | (in_data <<< 6)));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) + (in_data | 4)) - 6);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 3) | ((in_data >>> 9) - (in_data | 5)));
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 5) | 1) ^ 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 5) ^ (data[i] <<< 5)) - 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 4) + 2);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 10) ^ ((in_data - 3) | 2));
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 10) <<< ((in_data ^ 4) + 7));
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 1) ^ (data[i] ^ 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 10) & (in_data ^ 7));
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 2) & (in_data | 8)) >>> ((in_data & 4) - 1));
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 4) <<< 7) >>> ((data[i] <<< 8) - 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 4) & ((in_data - 9) ^ 2));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 7) - 6) >>> ((data[i] >>> 3) <<< 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 3) >>> (in_data - 6)) & 10);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 4) + 1);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 3) <<< (in_data <<< 5));
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 1) | 1);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 5) >>> (in_data <<< 8)) | (in_data >>> 6));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 2) - 4) + 1);
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 10) | (in_data + 7));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 5) + ((data[i] | 5) + (data[i] ^ 6)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 6) <<< 6);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 1) + 10) ^ 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 6) | (data[i] + 1)) ^ 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 4) <<< (in_data & 4)) | (in_data ^ 1));
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 3) - (in_data - 4)) <<< (in_data ^ 4));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 9) ^ (in_data >>> 7)) ^ ((in_data <<< 1) - (in_data | 7)));
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) ^ (in_data >>> 5)) | 6);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) + (in_data + 10)) ^ (in_data & 1));
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) ^ (in_data ^ 4)) | ((in_data | 3) - 9));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 10) - 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 8) & 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 2) + (data[i] + 4)) - (data[i] ^ 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 1) & ((data[i] <<< 3) - 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 10) ^ (data[i] <<< 2)) + 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) >>> 2) >>> 9);
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 6) >>> (data[i] + 1)) - 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 7) >>> 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 2) - 1);
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 1) + 10);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 1) - 2) >>> 7);
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) <<< (in_data >>> 3)) ^ 3);
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 9) | 6) | ((in_data - 3) ^ 10));
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 1) ^ 8) - 1);
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 3) + ((in_data ^ 3) >>> (in_data + 10)));
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) ^ (in_data >>> 1)) | (in_data + 4));
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) & 4);
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 2) - 8) - ((data[i] >>> 1) + 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 6) - 2);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[78]), 
        .out_vld(ready[78])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[78]),
        .in_vld(ready[78]),
        .out_data(data[81]), 
        .out_vld(ready[81])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[81]),
        .in_vld(ready[81]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[82]),
        .in_vld(ready[82]),
        .out_data(data[83]), 
        .out_vld(ready[83])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 83

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_2-4,"`define WIDTH 128
`define DEPTH 95

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 7) - (in_data | 9)) ^ (in_data & 9));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) >>> 5) - 8);
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 1) <<< 9) & ((in_data | 5) - 10));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 6) & ((in_data - 7) - (in_data & 10)));
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) ^ (in_data ^ 4)) ^ (in_data | 4));
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 10) ^ (in_data <<< 3));
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 10) <<< 10) & 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 9) + 6) <<< (in_data | 10));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 2) & 5);
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 2) | 8) & ((data[i] >>> 1) <<< (data[i] ^ 2)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 3) ^ ((data[i] <<< 9) + 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 5) >>> 8) | 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 5) & (in_data <<< 4));
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) | 1) + (in_data & 9));
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) <<< 9) & 3);
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 9) & (data[i] & 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 9) <<< (data[i] + 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) >>> (in_data + 9)) ^ ((in_data <<< 9) - (in_data <<< 7)));
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 5) ^ 4) | 10);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 1) >>> 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) >>> 7);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 9) ^ 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 6) + (data[i] >>> 8)) >>> 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 9) ^ (in_data & 10)) & 10);
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 3) <<< 8);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) & 8) | 9);
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 6) | 5);
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 4) <<< 10);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 4) <<< 9) ^ ((data[i] <<< 5) + 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 6) | 8) >>> 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 7) ^ (in_data >>> 1)) | ((in_data + 10) + 3));
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 9) & 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 9) >>> (in_data <<< 5));
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 1) + (in_data >>> 7)) & ((in_data >>> 8) >>> 3));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 7) >>> ((data[i] + 7) >>> (data[i] - 1)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 7) & (data[i] ^ 10)) ^ 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 3) <<< (in_data <<< 4)) & ((in_data - 6) <<< 3));
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 2) ^ (data[i] >>> 7)) | (data[i] + 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 4) ^ 9) ^ (data[i] & 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) + (in_data + 9)) + 10);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 3) & 3);
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 8) >>> 4) ^ ((in_data - 6) + (in_data >>> 9)));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 4) >>> 2) <<< ((in_data - 8) & (in_data + 6)));
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 7) | 3);
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 7) - (data[i] - 5)) + 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) <<< (in_data + 8)) <<< 3);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 10) >>> 6) ^ 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 2) - ((data[i] | 7) <<< 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 8) | 7) + 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 1) | 2);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[79]),
        .in_vld(ready[79]),
        .out_data(data[80]), 
        .out_vld(ready[80])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[80]),
        .in_vld(ready[80]),
        .out_data(data[81]), 
        .out_vld(ready[81])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[81]),
        .in_vld(ready[81]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[82]),
        .in_vld(ready[82]),
        .out_data(data[84]), 
        .out_vld(ready[84])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[84]),
        .in_vld(ready[84]),
        .out_data(data[85]), 
        .out_vld(ready[85])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[85]),
        .in_vld(ready[85]),
        .out_data(data[86]), 
        .out_vld(ready[86])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[86]),
        .in_vld(ready[86]),
        .out_data(data[87]), 
        .out_vld(ready[87])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[87]),
        .in_vld(ready[87]),
        .out_data(data[91]), 
        .out_vld(ready[91])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[91]),
        .in_vld(ready[91]),
        .out_data(data[95]), 
        .out_vld(ready[95])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 95

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_2-5,"`define WIDTH 128
`define DEPTH 74

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 10) | 5) | ((in_data | 6) <<< (in_data + 7)));
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) <<< (in_data <<< 6)) ^ 6);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 8) - ((data[i] | 2) <<< (data[i] ^ 2)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) + (in_data ^ 3)) ^ (in_data >>> 8));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 4) - ((in_data - 4) >>> (in_data | 7)));
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 7) | (data[i] - 3)) <<< 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) <<< (in_data + 9)) | ((in_data | 4) <<< (in_data >>> 6)));
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 8) >>> ((data[i] + 4) <<< 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) & 7) + (in_data <<< 9));
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) <<< 2) ^ 10);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 10) + (in_data + 2)) + ((in_data | 8) & 9));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 5) - (in_data ^ 8)) >>> ((in_data | 3) >>> (in_data ^ 2)));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 5) + (in_data | 3)) & ((in_data + 8) ^ (in_data - 5)));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 5) - 7);
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 4) | 3) >>> ((in_data - 10) & (in_data & 4)));
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 9) & 10) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 4) - (in_data >>> 4)) & ((in_data & 10) - (in_data >>> 5)));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 10) - 5);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 9) - 4);
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 3) + 5);
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 1) + 4) >>> ((in_data & 5) + 8));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 9) <<< (in_data ^ 9)) >>> 9);
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 10) + 9);
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 4) | 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 3) - 2);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 3) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 1) & (in_data | 6)) ^ 7);
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 1) & 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 8) <<< (in_data ^ 7));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) | (in_data - 8)) & 9);
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 4) ^ 7) | 9);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) - (in_data + 8)) >>> 7);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 2) <<< 10);
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 9) + 3);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) - 4) - 4);
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 1) | 2) - 5);
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 1) | 3);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 7) >>> (data[i] & 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 3) >>> 1) <<< 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 2) - (in_data ^ 9));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 1) - 3) & 3);
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 10) <<< (in_data >>> 2));
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 5) & 4) & 4);
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 7) <<< (data[i] ^ 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 3) | ((in_data + 5) >>> (in_data <<< 6)));
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 5) <<< 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) - (in_data + 7));
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 1) >>> 2) & 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 1) + 4) <<< ((in_data >>> 6) - (in_data - 3)));
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 10) - 3) | (in_data & 8));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 74

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_3-0,"`define WIDTH 128
`define DEPTH 79

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 10) <<< 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 3) ^ ((in_data >>> 7) ^ (in_data >>> 7))) ^ (in_data ^ 9));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 5) | ((data[i] <<< 3) <<< (data[i] <<< 1))) & 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 7) >>> 4) <<< (in_data ^ 3)) & 2);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 9) + 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 3) | (data[i] <<< 8)) >>> 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 10) ^ 2) <<< 8) ^ 9);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 4) + 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 1) - 8) + (((in_data + 1) - 2) + ((in_data & 5) - 2)));
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) ^ 9) + ((in_data >>> 4) | ((in_data + 9) ^ 7)));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 9) <<< 2) + (in_data - 6));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 4) | 2);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 3) ^ 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 7) & (in_data & 6)) - 1) <<< (((in_data ^ 2) & (in_data ^ 7)) | 6));
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) + 10) <<< 10);
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 4) + (in_data <<< 4));
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 5) >>> (data[i] >>> 2)) | ((data[i] - 4) <<< 9)) & 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 2) & 8);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 9) - 10) & ((data[i] | 7) & 3)) & 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 5) | ((data[i] | 8) + 2)) ^ 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 10) | 10) & ((in_data ^ 8) >>> ((in_data | 6) | 9)));
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 10) ^ ((in_data + 8) >>> 1)) & ((in_data >>> 1) ^ (in_data + 10)));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) & 8) - (in_data + 2));
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) | (in_data <<< 6)) ^ ((in_data <<< 8) ^ (in_data & 2)));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 4) >>> 8) <<< 5) & 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 1) ^ (in_data + 6));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 8) & ((in_data - 5) + (in_data & 7))) & (in_data <<< 4));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 6) | (in_data >>> 6)) - 10) >>> ((in_data - 10) | 9));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 7) - (in_data ^ 5)) + (((in_data ^ 9) + 2) & 3));
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 2) + (in_data ^ 2));
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 4) >>> 4);
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 10) & (data[i] ^ 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 9) + (in_data >>> 2)) - 8) - 2);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 5) ^ (in_data <<< 3));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 8) & (data[i] ^ 4)) <<< (data[i] >>> 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 10) >>> ((in_data | 9) ^ (in_data >>> 4)));
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 4) >>> 5) + ((data[i] - 8) + (data[i] & 8))) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 1) - (((in_data - 7) ^ (in_data ^ 3)) <<< 8));
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 10) >>> 2) ^ (in_data | 8)) & 1);
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 10) | 8);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 2) >>> 1);
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 2) + ((in_data | 4) >>> 4));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 9) <<< 1) - (((in_data & 5) ^ 2) + 7));
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 4) <<< (data[i] >>> 10)) & 10) + 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 10) - 9);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 6) ^ 8);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) <<< 3) + (in_data ^ 9));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 3) - (in_data ^ 7)) ^ 1) + (in_data ^ 5));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 4) & 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 6) >>> ((in_data - 3) + (in_data | 1)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[77]),
        .in_vld(ready[77]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 79

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_3-1,"`define WIDTH 128
`define DEPTH 88

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 5) <<< 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 8) - ((in_data >>> 10) & (in_data | 8)));
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 7) & 8) >>> (in_data ^ 7));
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 4) <<< 8);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 8) | (((in_data - 9) - 3) <<< (in_data + 8)));
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 3) - 10);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 3) >>> 10) ^ (data[i] <<< 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 3) <<< ((in_data ^ 4) - (in_data & 7))) <<< (in_data + 10));
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 4) ^ 10) + (in_data ^ 9));
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 10) + 6) ^ 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 10) & 4) ^ ((in_data & 1) + (in_data & 1)));
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 2) - 1) + ((in_data ^ 7) & 1)) <<< 9);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) + 10) - 2);
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) & ((in_data >>> 4) ^ (in_data + 1))) - ((in_data >>> 1) <<< 5));
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 10) ^ (in_data & 2)) | 8);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 6) & 6) - 5) >>> 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 5) ^ 7) & 5);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 9) ^ (in_data - 4)) >>> 8);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 5) - ((data[i] <<< 6) & 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 3) <<< 4);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 6) - ((data[i] >>> 10) >>> (data[i] & 8))) | ((data[i] - 10) & ((data[i] & 3) - (data[i] <<< 7))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 2) <<< 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 4) ^ 1) & ((in_data | 2) ^ 3));
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 1) >>> 1) + 1) & 10);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 1) & 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 9) & ((in_data ^ 3) ^ ((in_data | 9) - 9)));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 9) + 3) | (in_data | 10)) & ((in_data <<< 9) & 7));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 7) + 5) <<< 2) + 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 8) & ((in_data ^ 8) >>> (in_data ^ 3))) | 9);
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 2) >>> (in_data | 2));
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 5) + 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 4) ^ (data[i] + 4)) ^ (data[i] <<< 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 10) ^ ((in_data & 2) - (in_data <<< 6))) | 9);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 4) & ((data[i] ^ 10) + (data[i] ^ 2))) + (data[i] | 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 6) <<< ((in_data + 3) ^ (in_data <<< 4))) & ((in_data + 8) <<< 9));
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 7) <<< (data[i] | 8)) & ((data[i] >>> 3) >>> (data[i] ^ 1))) + 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 4) <<< (data[i] & 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 9) & 1) ^ 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 4) | 7) ^ 2);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 5) >>> 7) >>> 10);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 6) + (in_data - 2)) - ((in_data - 5) ^ (in_data | 8))) >>> ((in_data & 10) - ((in_data ^ 4) >>> (in_data | 10))));
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 2) & 6);
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 5) & 6);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) | 9) & 10);
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 3) <<< 4) | 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 4) + (data[i] >>> 9)) | 10) <<< 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 10) | 2);
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 4) - 2) ^ 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 8) ^ 2);
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 10) ^ 9) ^ ((in_data >>> 3) | (in_data >>> 1))) + (in_data <<< 8));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[79]),
        .in_vld(ready[79]),
        .out_data(data[80]), 
        .out_vld(ready[80])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[80]),
        .in_vld(ready[80]),
        .out_data(data[81]), 
        .out_vld(ready[81])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[81]),
        .in_vld(ready[81]),
        .out_data(data[85]), 
        .out_vld(ready[85])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[85]),
        .in_vld(ready[85]),
        .out_data(data[86]), 
        .out_vld(ready[86])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[86]),
        .in_vld(ready[86]),
        .out_data(data[88]), 
        .out_vld(ready[88])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 88

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_3-2,"`define WIDTH 128
`define DEPTH 78

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 10) & (in_data - 5)) <<< ((in_data <<< 3) >>> ((in_data >>> 9) ^ 7)));
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 5) <<< (data[i] - 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 5) & 8);
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) + ((in_data & 1) + 9)) >>> ((in_data >>> 1) + ((in_data >>> 5) ^ (in_data <<< 7))));
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 9) & 10) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 8) + 10) - 6);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 6) >>> (in_data ^ 10));
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 8) & ((in_data <<< 6) + 7));
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 4) >>> (data[i] ^ 9)) | 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 6) ^ 2) & 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 2) & 5) <<< (data[i] >>> 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 7) | (in_data - 5)) & 2) ^ 10);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 5) + ((in_data & 2) - (in_data + 1))) & ((in_data + 1) + (in_data + 5)));
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) + (in_data - 1)) - (in_data >>> 8));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 6) | 1);
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 1) <<< 1) >>> 7);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 9) ^ (data[i] - 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 7) | 4) & 7);
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 4) - (data[i] ^ 6)) & ((data[i] <<< 8) <<< 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 9) <<< 7) ^ 1) >>> ((in_data <<< 2) <<< ((in_data - 6) ^ 2)));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 10) <<< 1) >>> ((in_data ^ 9) | 10)) >>> 4);
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 7) <<< 7);
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 9) - 8) ^ ((in_data + 3) >>> (in_data >>> 8)));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 9) - (in_data & 2)) | 7) >>> 9);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 6) - 6) >>> 1);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 9) | ((in_data <<< 5) + ((in_data | 7) - 7)));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 3) & 9) >>> 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 9) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 7) - 10);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 1) | ((data[i] - 10) ^ 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 6) <<< 1) ^ (in_data ^ 5));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 6) >>> 8) >>> 5);
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) <<< 7);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 1) <<< (in_data <<< 7)) >>> 9);
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 6) | 4) >>> 4) | ((data[i] + 5) - 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 3) <<< 10) + 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 7) ^ 5);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 3) & 4) + (in_data <<< 10)) <<< (in_data | 2));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 10) <<< 9);
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 10) - ((in_data - 7) & 5)) >>> 9);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 7) & ((in_data + 9) | (in_data | 2)));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 3) - (in_data <<< 7)) >>> ((in_data - 6) >>> (in_data + 2))) | 2);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 1) + 9) >>> (in_data + 6));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 1) | ((in_data >>> 1) >>> 1));
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 4) + 10) <<< (in_data <<< 10)) + 5);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 8) <<< (data[i] - 10)) ^ 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 2) & ((in_data + 2) <<< ((in_data | 3) <<< 4)));
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 9) ^ 2) >>> (data[i] ^ 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 9) | (in_data - 1)) <<< 7);
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 5) ^ 4) ^ 4) + 2);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[77]),
        .in_vld(ready[77]),
        .out_data(data[78]), 
        .out_vld(ready[78])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 78

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_3-3,"`define WIDTH 128
`define DEPTH 83

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 5) & 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 9) & 3) ^ 3) >>> (((data[i] + 10) | (data[i] | 2)) >>> 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 3) + 2) + (data[i] <<< 3)) ^ 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 9) - 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 6) ^ ((in_data ^ 5) >>> 4));
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 9) | 9) | 10) - (((data[i] <<< 9) & 8) | ((data[i] & 8) >>> (data[i] ^ 5))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 4) - 10) - 8);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 5) + (in_data - 4)) <<< ((in_data + 6) ^ ((in_data | 10) | (in_data & 5))));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 2) ^ (data[i] ^ 10)) >>> (data[i] - 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) <<< (in_data ^ 3)) | (in_data ^ 2));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 8) ^ 3) | ((in_data + 4) & (in_data >>> 3)));
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 3) >>> (data[i] + 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 1) >>> ((data[i] <<< 3) <<< (data[i] <<< 8))) - (((data[i] & 9) ^ 3) | (data[i] | 2)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 2) <<< 2);
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 1) | 1) <<< (in_data <<< 5));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 7) <<< (data[i] <<< 8)) ^ 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) + 7) + ((in_data + 3) <<< 10));
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 1) <<< (data[i] ^ 10)) >>> 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 7) ^ ((in_data + 9) ^ 6));
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 3) >>> 9) >>> 6) | 7);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) + 1) + ((in_data >>> 8) >>> 8));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 2) | ((in_data - 4) | 6)) >>> 7);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 5) + 9) | 3) >>> (((in_data + 1) & (in_data - 7)) - 10));
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 2) & 4) - ((in_data ^ 9) + 2));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 5) <<< 8) ^ (data[i] + 6)) >>> 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 2) - (in_data & 10));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 5) & 8);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 1) + 6) <<< 4);
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 4) ^ (in_data & 4));
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 9) <<< (in_data + 9)) >>> (in_data - 9)) | 7);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 4) - ((in_data >>> 10) | (in_data & 8))) + ((in_data >>> 4) | ((in_data ^ 3) + 1)));
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 5) - ((data[i] ^ 6) + 2)) | ((data[i] >>> 4) & ((data[i] - 1) - (data[i] ^ 7))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 1) ^ ((data[i] & 1) - ((data[i] >>> 6) - 9)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 2) & (data[i] ^ 4)) - 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 9) <<< ((in_data - 2) & (in_data ^ 3)));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 2) - 5);
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 5) >>> 10) + ((in_data & 8) <<< (in_data <<< 4))) + 9);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 5) - 4);
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 2) + 4) ^ 4) - 5);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 6) ^ 2) <<< 9);
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) | 8) & ((in_data & 4) ^ ((in_data | 2) - (in_data - 6))));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 4) <<< ((in_data ^ 9) | (in_data ^ 8))) | ((in_data ^ 7) - 7));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 6) & 2) - 2);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 6) <<< 6);
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 3) | (in_data >>> 10)) ^ 3) + ((in_data <<< 9) + 2));
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 1) | 8) | ((in_data & 7) - (in_data - 10)));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 6) & (data[i] - 1)) | (((data[i] + 9) <<< 10) & 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 4) >>> (data[i] ^ 7)) + (((data[i] >>> 9) >>> 3) & 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 2) - (in_data - 2));
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 3) & (in_data + 5)) | 3);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[77]),
        .in_vld(ready[77]),
        .out_data(data[78]), 
        .out_vld(ready[78])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[78]),
        .in_vld(ready[78]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[79]),
        .in_vld(ready[79]),
        .out_data(data[80]), 
        .out_vld(ready[80])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[80]),
        .in_vld(ready[80]),
        .out_data(data[81]), 
        .out_vld(ready[81])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[81]),
        .in_vld(ready[81]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[82]),
        .in_vld(ready[82]),
        .out_data(data[83]), 
        .out_vld(ready[83])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 83

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_3-4,"`define WIDTH 128
`define DEPTH 77

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 4) + 3) >>> 10) - ((data[i] | 8) - (data[i] - 1)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 2) <<< (in_data ^ 9));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 1) >>> 5) & ((in_data <<< 10) >>> (in_data & 2)));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 1) ^ 1) <<< ((in_data - 3) >>> (in_data - 3)));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 6) & 5) - 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 7) <<< (in_data - 4)) + 9) <<< (in_data & 5));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) & (in_data >>> 6)) <<< ((in_data | 2) | 3));
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 8) ^ 5) | (data[i] ^ 4)) + (data[i] <<< 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 6) & 4) + (data[i] - 5)) <<< (((data[i] <<< 9) <<< 1) <<< (data[i] <<< 6)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 8) <<< 1) >>> 10) ^ 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 3) | 6);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 5) <<< 1);
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) <<< 7) + (in_data <<< 9));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 7) & 10) + ((in_data - 5) >>> 4));
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 1) & ((in_data & 2) <<< 8)) + 10);
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 6) ^ (in_data | 3));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 1) - (data[i] - 5)) ^ 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 5) + 3);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 10) & 9) >>> 1) <<< 9);
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 10) ^ 1);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 10) ^ 5) >>> 6);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 1) >>> 9) | 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 8) - 4);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 5) - (data[i] <<< 10)) >>> (data[i] - 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 9) >>> (in_data | 8)) >>> ((in_data ^ 9) & (in_data - 4)));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 2) | ((in_data >>> 6) | (in_data >>> 6))) + (in_data ^ 7));
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 6) + (in_data ^ 3)) <<< ((in_data + 4) + ((in_data | 8) - (in_data <<< 4))));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 4) - (in_data - 2)) | (in_data + 6));
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 3) ^ (in_data >>> 8));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 5) >>> (((in_data - 6) <<< (in_data ^ 9)) - ((in_data >>> 2) | 4)));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 1) >>> ((in_data + 5) | (in_data & 1)));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 1) ^ (in_data & 3)) - ((in_data - 5) ^ 4));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 2) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 7) + 9) - ((in_data | 6) ^ 10)) >>> 10);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 9) + 3) - (((data[i] ^ 5) | (data[i] - 6)) ^ 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 4) + (in_data <<< 9)) - 7);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) <<< ((in_data | 9) <<< ((in_data - 9) ^ 4)));
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 3) <<< (in_data - 3)) + (in_data - 2)) >>> 1);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 6) <<< 7) - (data[i] ^ 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 10) <<< (in_data >>> 9)) >>> (in_data <<< 4)) - (((in_data >>> 3) <<< (in_data - 2)) ^ 4));
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 6) | ((in_data >>> 1) >>> 4));
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 1) - 1) & 10) - 5);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 6) | 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 2) ^ 9) + (in_data + 10));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 10) >>> (data[i] <<< 2)) ^ 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 5) & (data[i] >>> 2)) | 2) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 10) <<< 10);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 3) >>> (in_data | 8)) <<< (in_data + 2)) | (in_data <<< 2));
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 2) >>> (in_data + 4));
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 3) <<< 4) | (in_data | 4)) & (in_data - 9));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 77

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_3-5,"`define WIDTH 128
`define DEPTH 79

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 8) <<< (in_data <<< 8));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 10) ^ 8);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 7) - 6) <<< (in_data | 1));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 8) + ((in_data ^ 6) | (in_data >>> 4))) <<< 4);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 8) ^ (in_data ^ 2)) <<< ((in_data + 2) >>> (in_data | 9)));
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) & (in_data | 4)) | (in_data & 9));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 7) + (in_data | 8)) <<< 9) >>> ((in_data | 8) + (in_data <<< 2)));
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 4) ^ ((in_data <<< 5) + 3));
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 6) - (data[i] - 9)) + (data[i] >>> 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 10) <<< ((in_data - 1) <<< (in_data <<< 5)));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 9) - (in_data | 9)) ^ 4) | (((in_data ^ 5) & (in_data - 3)) >>> (in_data & 1)));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 7) <<< (data[i] >>> 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 7) | 4);
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 3) >>> (in_data ^ 4));
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 1) | (in_data <<< 10)) ^ 1);
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 9) >>> 6) + 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 9) <<< (in_data & 9)) + (in_data - 3)) | 10);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 10) <<< 7) + ((in_data <<< 3) - 3));
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 8) ^ ((data[i] >>> 9) & (data[i] <<< 7)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 2) <<< ((data[i] <<< 6) ^ 7)) >>> 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 4) & 4) <<< 3);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 5) | 4) ^ 1) | (((in_data >>> 3) <<< (in_data ^ 10)) <<< ((in_data ^ 3) ^ (in_data <<< 2))));
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 2) <<< (data[i] - 8)) - 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 2) - ((in_data & 6) - (in_data | 1))) & ((in_data - 7) ^ (in_data | 6)));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 8) >>> (in_data - 4)) & ((in_data + 5) - 5)) & (in_data >>> 9));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 7) <<< ((data[i] >>> 9) + (data[i] <<< 1))) ^ 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 4) & (in_data & 8));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) - 10) ^ ((in_data & 9) <<< 9));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 8) - 8) & ((data[i] - 7) & (data[i] | 1))) & 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 3) >>> 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 8) + 4) >>> 7);
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 5) <<< (data[i] | 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 8) & ((data[i] & 9) & (data[i] | 6))) | 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 8) ^ 5) - (data[i] - 3)) - (data[i] >>> 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 6) & (data[i] + 9)) >>> ((data[i] <<< 8) + 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 9) & 3) + ((data[i] ^ 7) - 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 1) <<< 4);
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 4) & 3);
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 7) ^ (in_data + 4)) + 6);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 1) - (in_data | 1)) + 9);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) >>> ((in_data <<< 2) - 5)) >>> 9);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 4) & 4) & (((in_data & 7) & 8) | 2));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 7) + 6) >>> (data[i] ^ 9)) >>> (((data[i] - 6) & 10) <<< 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 9) + 3) <<< 9);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 6) >>> 6) >>> (in_data >>> 8)) | 9);
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 9) & (in_data >>> 4)) ^ ((in_data & 4) ^ (in_data - 6)));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 1) & (in_data - 6)) & 9);
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 5) | 7) ^ 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 7) >>> 3);
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 3) ^ 10) + 5);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[77]),
        .in_vld(ready[77]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 79

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_4-0,"`define WIDTH 128
`define DEPTH 73

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 5) - 7);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 7) | 4) + ((((in_data >>> 4) <<< (in_data & 10)) <<< 10) <<< ((in_data - 4) ^ 6)));
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 4) ^ (in_data ^ 7)) - 10) | ((in_data & 9) <<< 5));
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 9) - 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 4) & (in_data ^ 9)) <<< 1) + (in_data ^ 2));
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) - 8) <<< 3);
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 10) - 9) <<< (in_data + 1));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 6) ^ 4) ^ 4) ^ ((in_data - 2) & 4));
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 8) & 8) >>> (in_data + 3)) & 4) | 9);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 1) & (data[i] <<< 5)) <<< ((data[i] >>> 3) + 2)) - 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 10) ^ (in_data | 7)) ^ (in_data >>> 7));
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 9) + 5) ^ 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 4) <<< (data[i] + 4)) ^ ((data[i] | 9) <<< (data[i] | 4)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 2) - 7) - (in_data & 7)) - 7);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 9) - 4) & 1) >>> 9);
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 8) >>> (in_data ^ 4)) & (in_data - 6));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 10) ^ 3) >>> 7) <<< ((in_data >>> 4) & 9));
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 7) | ((in_data >>> 8) >>> 4));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 9) & 7) >>> 6) - 5);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 7) <<< 1) >>> 6) | 3) & 8);
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 4) >>> (in_data & 7));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 6) ^ 7) ^ 9);
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 4) & (in_data >>> 1)) - (((in_data - 1) - (in_data & 7)) | (in_data & 2)));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 4) <<< 10) ^ (((in_data - 2) - 4) + (in_data + 7)));
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 1) & 9) ^ (((in_data | 4) | (in_data - 3)) >>> 3)) | 8);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 10) | (((data[i] >>> 3) | (data[i] ^ 2)) | 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 6) | 5) & (in_data & 3)) + (in_data ^ 2)) & ((((in_data + 4) <<< 7) | 6) | (((in_data | 8) ^ (in_data + 5)) | 3)));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 3) - (((data[i] >>> 6) - (data[i] <<< 2)) ^ ((data[i] ^ 5) & (data[i] ^ 7))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 1) - 6) | (in_data ^ 10));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 9) + ((in_data <<< 10) >>> 3));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 5) <<< (data[i] | 5)) ^ ((data[i] >>> 8) ^ 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 2) & 8) >>> (((in_data | 10) - 4) >>> 7));
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] - 2) ^ (data[i] - 7)) & 4) <<< ((data[i] & 1) <<< (data[i] - 9))) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) | 4) & 5);
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 10) >>> (in_data & 10)) >>> 5);
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 1) >>> ((data[i] ^ 4) ^ 3)) | (((data[i] <<< 8) + ((data[i] ^ 5) <<< 7)) & ((data[i] | 4) ^ 5)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 1) & ((in_data + 3) & 10));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 3) ^ ((in_data - 2) >>> 3)) >>> 7) - 5);
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 2) + 8) + (in_data ^ 1));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 8) + 10);
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 1) + ((((data[i] - 2) <<< 3) & 10) ^ 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] ^ 2) <<< (data[i] ^ 1)) >>> 5) - ((data[i] >>> 5) - 5)) ^ ((data[i] >>> 4) ^ ((data[i] & 7) + 4)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 7) | 7);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 4) + 10) - ((in_data >>> 3) - 3)) | (in_data | 8)) >>> ((((in_data >>> 7) - 5) + 4) ^ (in_data + 8)));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 6) & ((data[i] ^ 2) ^ 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 6) - 5) + (((data[i] ^ 4) | 8) ^ 6)) & 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 10) | 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 5) <<< 10) + 10) & (((in_data >>> 8) - 9) | 4));
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 10) - 2) + (in_data & 2)) - 7);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data | 4) - 2) + ((in_data ^ 2) - (in_data ^ 10))) - (in_data + 1)) + (((in_data - 10) + (in_data ^ 10)) | ((in_data & 9) <<< (in_data - 5))));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 73

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_4-1,"`define WIDTH 128
`define DEPTH 77

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) <<< ((in_data | 4) | 10)) & 8);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 2) | (in_data & 3)) | (in_data + 7)) | (((in_data + 4) ^ (in_data + 6)) & 1)) >>> (((in_data >>> 6) + (in_data <<< 10)) >>> ((in_data + 7) - (in_data + 9))));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 3) ^ (data[i] & 4)) <<< (((data[i] | 4) + (data[i] - 5)) - (data[i] ^ 1))) >>> 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 2) ^ (((data[i] | 5) ^ (data[i] <<< 4)) ^ (data[i] & 2)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 1) - (in_data + 1)) >>> (in_data - 6)) - (in_data & 10)) <<< (in_data - 4));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 9) - (in_data <<< 4)) >>> ((in_data <<< 5) + 5)) ^ ((in_data >>> 10) | ((in_data & 1) <<< ((in_data ^ 2) - 6))));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 4) ^ (in_data <<< 10)) | 9) >>> 6);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 6) - (data[i] - 8)) >>> 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 4) - 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) | ((in_data & 10) - 6));
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 1) & 5) + 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) ^ 1);
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 4) & 4) + ((in_data ^ 8) + 2)) | 3) >>> ((in_data >>> 8) | 1));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 2) | 7) | ((in_data | 5) ^ (in_data <<< 2))) & ((((in_data | 9) & 7) | 6) <<< 2));
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 9) - 8) >>> 7);
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 6) & (data[i] >>> 8)) | (data[i] + 9)) | (data[i] >>> 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 10) + ((in_data <<< 3) & ((in_data <<< 2) <<< 3))) - 1);
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 1) & (data[i] + 3)) - ((data[i] <<< 9) & ((data[i] >>> 2) ^ (data[i] - 1))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 6) | (data[i] - 10)) & 9) >>> ((data[i] + 4) ^ ((data[i] <<< 8) | 4)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 9) >>> (in_data ^ 2)) ^ ((in_data + 9) - 1)) - 4);
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 9) <<< 3);
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 4) + 6) | 7) - 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 8) ^ 3);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 7) | 8) ^ (in_data & 3)) <<< 2);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 8) >>> ((in_data | 10) <<< (in_data >>> 8))) | 2) - 8);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 8) | (data[i] | 10)) <<< ((data[i] >>> 3) >>> (data[i] - 8))) >>> ((((data[i] >>> 7) ^ 9) & (data[i] + 2)) + 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 1) <<< 6) <<< (in_data + 8));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 3) & 8) <<< 6);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] >>> 1) <<< 9) <<< 4) & 1) ^ 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 8) + 7) & 7) <<< 9);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 10) - (((in_data ^ 10) >>> ((in_data & 2) >>> (in_data & 9))) & 3));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 8) ^ (in_data + 2)) <<< 5);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 2) + (data[i] >>> 7)) <<< 9) - (((data[i] ^ 6) & 2) & ((data[i] | 1) >>> (data[i] ^ 8))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 6) <<< (in_data - 3)) & ((((in_data - 2) >>> 3) >>> ((in_data >>> 10) - (in_data >>> 7))) <<< ((in_data >>> 10) ^ (in_data >>> 2))));
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 9) & (in_data + 10)) + 2) + (((in_data & 4) | (in_data >>> 3)) & (in_data <<< 4)));
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) >>> ((in_data ^ 6) ^ 7)) ^ (in_data + 3));
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 7) | (in_data | 5)) & (in_data + 4)) <<< (((in_data & 5) | (in_data <<< 2)) - ((in_data + 7) <<< ((in_data >>> 6) >>> (in_data - 3)))));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 4) | (in_data & 10)) - ((in_data - 6) >>> (in_data | 2))) <<< ((in_data & 2) + (in_data | 4))) + (in_data ^ 7));
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 5) <<< 5) >>> 10);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 4) ^ 2);
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 9) <<< 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 9) ^ 2) & ((in_data | 4) & (in_data + 5))) & ((in_data >>> 4) >>> 9));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) | ((in_data <<< 9) | 3)) >>> (in_data ^ 4));
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) <<< 3) - 10);
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] & 4) & (data[i] - 10)) ^ 2) <<< (data[i] ^ 8)) | ((data[i] + 4) | ((data[i] - 8) >>> 5)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 5) ^ 7) + (in_data - 3)) ^ ((in_data >>> 1) - (in_data - 8)));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 8) ^ (data[i] + 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 4) | (data[i] - 1)) - 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 9) >>> 10) - (in_data <<< 2)) | 6) + (((in_data & 1) & 7) & 2));
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 5) ^ (in_data - 4)) - (in_data <<< 8)) <<< 10);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 77

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_4-2,"`define WIDTH 128
`define DEPTH 82

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 9) ^ 7) ^ 9);
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 2) + ((data[i] >>> 5) >>> (data[i] <<< 9))) | ((data[i] <<< 1) + 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) & 1) + (in_data + 4));
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 8) <<< ((in_data <<< 9) + 9)) & ((((in_data + 6) & 9) - 3) | 5));
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 7) >>> ((((data[i] ^ 5) & (data[i] ^ 4)) & (data[i] >>> 4)) & ((data[i] & 7) <<< (data[i] | 4))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 7) <<< (((in_data + 8) - (in_data | 9)) ^ ((in_data ^ 9) >>> (in_data ^ 4))));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 6) | 7) - ((((data[i] >>> 8) & (data[i] | 4)) ^ (data[i] | 1)) ^ 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 2) & (data[i] <<< 9)) - 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 10) + 6) >>> (((in_data & 10) | ((in_data | 8) + 5)) ^ 10));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 2) <<< 6) - 5);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) >>> 4) | 10);
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 6) | (data[i] & 6)) + (((data[i] | 10) >>> (data[i] - 10)) + (data[i] | 4)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 3) >>> 3);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) <<< (in_data | 7)) ^ ((in_data ^ 6) + (((in_data <<< 2) >>> 10) ^ 7)));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) <<< (in_data + 1)) - 8);
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 5) + 2);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 5) | ((in_data - 2) >>> 4)) + ((in_data - 5) - (in_data | 1)));
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 10) ^ (in_data - 7)) + (((in_data >>> 8) >>> ((in_data ^ 7) & (in_data | 7))) ^ ((in_data + 9) ^ 3)));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 7) | (in_data ^ 5)) <<< 7);
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 5) | (in_data <<< 4));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) + 7) >>> 2);
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 9) >>> 2) <<< ((in_data + 1) + 1));
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 7) + (in_data - 10)) ^ (in_data ^ 5)) ^ ((in_data ^ 1) & 8));
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 8) >>> ((data[i] ^ 10) <<< (data[i] | 2))) <<< 1) | 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 4) + 2) & 1);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 3) >>> 2);
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 2) | (data[i] - 3)) & ((data[i] & 1) | (((data[i] | 2) - 7) + (data[i] - 7))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 3) | 7);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 9) - ((data[i] >>> 8) | 6)) & 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 1) & (((in_data ^ 1) - 3) + 10));
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 3) ^ 10) + 8) >>> ((in_data <<< 5) + 9));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 1) >>> 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data >>> 1) + 2) <<< 7) <<< 8) | ((in_data >>> 3) - 1));
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 6) >>> 2) + 8) + 2) & 3);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 6) <<< 3) <<< (in_data - 1)) | 1);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 3) | (in_data & 10)) >>> 10) | 10) >>> (((in_data | 9) & ((in_data >>> 2) & (in_data & 6))) >>> (in_data <<< 8)));
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 5) & ((in_data + 3) <<< 10)) - 8);
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 10) >>> 7) ^ 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 9) + ((in_data <<< 6) & (in_data - 8))) <<< ((in_data >>> 2) + ((in_data - 10) | (in_data <<< 9)))) & ((in_data ^ 1) >>> ((in_data + 9) <<< 6)));
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 10) <<< (in_data >>> 9)) ^ 10);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 6) >>> 10) | 9) + ((in_data ^ 1) ^ ((in_data | 9) + (in_data - 10))));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 9) - 4) <<< (((in_data ^ 5) >>> 9) + 1)) + 5);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 7) | 5) - 9);
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 7) - (in_data <<< 6));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) | 3) | (((in_data >>> 3) <<< ((in_data & 6) <<< (in_data + 3))) | ((in_data <<< 4) + (in_data | 8))));
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 1) - 5) - (in_data <<< 6)) ^ (in_data - 3));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 7) & ((data[i] | 1) & (data[i] | 7))) ^ (((data[i] & 4) ^ 5) ^ ((data[i] | 5) <<< 1)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 4) & 4) + 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 5) ^ ((in_data ^ 1) <<< 9)) <<< ((in_data | 9) & (in_data + 3)));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 7) | 5);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[77]),
        .in_vld(ready[77]),
        .out_data(data[81]), 
        .out_vld(ready[81])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[81]),
        .in_vld(ready[81]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 82

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_4-3,"`define WIDTH 128
`define DEPTH 78

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 3) - 2) >>> (in_data ^ 8));
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) | 1) + 7);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 6) + 1) ^ ((in_data - 10) <<< (in_data ^ 4))) ^ ((in_data <<< 1) & (((in_data ^ 2) + 4) - (in_data + 4))));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 1) >>> ((in_data + 4) >>> (in_data + 5))) >>> 1);
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 3) | 10) | (in_data - 5));
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 3) | ((in_data + 6) ^ 8)) - 5);
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 6) - (in_data - 6)) >>> ((in_data >>> 10) & (in_data >>> 7)));
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 4) & 9) >>> (in_data - 5)) >>> 8);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 9) - (((in_data | 8) >>> 6) - 1));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 3) ^ (in_data ^ 3)) >>> 8) >>> ((in_data & 1) + 9)) >>> ((in_data | 5) <<< ((in_data & 1) + 2)));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 5) - (in_data & 2)) >>> (in_data ^ 2)) & (in_data ^ 4)) + (((in_data ^ 3) | (in_data <<< 2)) - 5));
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 6) >>> 2);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 7) <<< 9) + 4) >>> (in_data ^ 9)) & ((in_data & 5) - ((in_data <<< 2) - (in_data & 8))));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 2) & (data[i] >>> 8)) | 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 7) & ((in_data | 1) - 9)) <<< 9);
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 7) - 3);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 3) <<< 3) - ((data[i] & 4) + 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 8) + 6);
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] + 9) & 3) >>> (data[i] + 6)) + (data[i] | 8)) >>> 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 3) <<< 4) & 8) & (((data[i] >>> 9) >>> (data[i] - 2)) | ((data[i] ^ 2) + 9)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 3) ^ 6) <<< ((data[i] >>> 8) ^ 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 7) & 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 8) ^ (in_data >>> 10)) | (in_data - 3)) >>> 9) | 5);
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 1) & 9) ^ 3) >>> (((in_data & 4) | (in_data <<< 3)) ^ 8));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 3) ^ 10) <<< 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 7) <<< ((data[i] & 6) - 1)) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) | (in_data & 1)) - (in_data | 6));
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 4) - 8) ^ 7) & (in_data | 8)) - 4);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 7) <<< 5) - 4);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 10) + (in_data >>> 6)) + ((in_data + 7) & (in_data - 2))) >>> 5);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 6) | 8) <<< (in_data ^ 8)) ^ (in_data & 2));
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 7) + ((data[i] <<< 2) ^ (data[i] <<< 3))) & ((data[i] <<< 7) >>> (data[i] & 4)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 2) <<< ((in_data ^ 4) + (in_data - 1))) >>> (in_data <<< 7)) ^ 3);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 6) >>> 6);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 2) + ((data[i] >>> 10) <<< (data[i] ^ 6)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 3) | (in_data | 1)) - ((in_data - 3) & 10));
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 5) ^ (((in_data & 8) ^ 7) | (in_data + 7))) - (((in_data ^ 10) >>> (in_data & 10)) | 10));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 10) - (in_data & 10)) | ((in_data & 6) - 7));
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 7) <<< (in_data + 6)) <<< ((in_data <<< 1) | 6)) ^ 1);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 6) - 5);
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 10) ^ 8) | (((data[i] & 9) + 4) >>> 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 5) & 2) | ((data[i] - 8) <<< 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 5) <<< ((data[i] & 2) ^ (data[i] ^ 7))) | 3) + (((data[i] + 3) >>> (data[i] ^ 1)) <<< (data[i] <<< 6)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 6) & 4) ^ 3) | 5);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 2) <<< (in_data - 5));
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 5) - ((in_data | 5) & (in_data + 3))) >>> (in_data >>> 2)) + 3);
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] <<< 2) & 7) ^ 4) | 6) >>> (data[i] & 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) - (((in_data - 6) - 1) | 10)) + 9);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 9) + (((in_data <<< 5) - (in_data ^ 4)) <<< 9)) <<< ((in_data ^ 6) - 3));
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 5) | 9);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[78]), 
        .out_vld(ready[78])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 78

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_4-4,"`define WIDTH 128
`define DEPTH 82

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 4) ^ 4) <<< 4) | ((data[i] >>> 6) ^ 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 10) + (in_data - 5)) - 7);
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 7) - (in_data ^ 8)) <<< ((in_data & 7) - 3)) ^ 5);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 7) & 1) | 4) - (((in_data ^ 4) & 7) & 6));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 3) | 5);
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 10) ^ 5) >>> 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 4) - ((in_data - 2) >>> (in_data + 9)));
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 9) >>> (data[i] & 3)) & 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 6) | 6);
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 5) - 2);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 3) & (data[i] + 9)) - ((data[i] - 3) + 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 5) ^ (in_data + 9)) | (in_data - 3)) - 3);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 8) >>> 10) | 5);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 5) | (data[i] ^ 3)) - (data[i] & 1)) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 9) ^ (in_data & 9)) & ((in_data - 10) >>> (in_data ^ 3)));
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 4) ^ (((data[i] - 5) >>> 4) >>> 10)) + ((data[i] >>> 3) >>> (data[i] <<< 10)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) & 4) | 3);
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 6) ^ (data[i] & 2)) ^ (data[i] + 9)) + 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 2) & 10) | ((in_data <<< 4) & ((in_data >>> 2) ^ (in_data - 6))));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 7) <<< (in_data ^ 10)) & ((((in_data >>> 9) + 1) >>> (in_data & 10)) | 2));
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 4) <<< ((in_data - 6) + 8));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 9) - (in_data ^ 3)) | (in_data | 5)) & 5) - 8);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 9) | 9);
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 1) - 4) + (in_data ^ 2)) ^ (in_data >>> 4)) & 4);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 4) >>> ((data[i] & 5) ^ 6)) <<< (data[i] & 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 9) >>> ((in_data - 10) + (in_data <<< 10))) & 1);
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 3) | 5) - (((in_data - 9) <<< 1) - ((in_data & 1) - 4))) <<< 6);
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 2) ^ (((data[i] ^ 4) - (data[i] <<< 2)) & ((data[i] - 3) <<< (data[i] ^ 1)))) - (((data[i] <<< 5) & 4) ^ (data[i] + 9)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 4) - (in_data + 4)) | 10) | ((in_data >>> 1) ^ (in_data & 9))) + (in_data >>> 3));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 7) - ((in_data ^ 4) + 6));
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 1) | 4) & (data[i] >>> 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 3) - ((in_data & 6) & (in_data & 2))) - 3) | 9);
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 4) ^ ((data[i] - 2) ^ 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 10) | (in_data & 3)) <<< 6);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 8) | ((in_data + 9) ^ (in_data ^ 9))) | 3);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) & 4) ^ 8);
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 1) + 5) >>> (in_data - 2)) | 4) <<< 1);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 6) >>> 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 3) ^ 2);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 5) + (in_data + 6)) <<< 5) <<< ((in_data + 5) | ((in_data - 8) ^ 7)));
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 8) & (((in_data <<< 4) & 2) >>> (in_data | 10)));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 5) | 7) - 6) - 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 9) <<< (in_data - 7)) >>> ((in_data >>> 1) | (in_data - 2))) ^ 8) & 10);
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) + ((in_data - 1) ^ 2)) + (in_data ^ 8));
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) - ((in_data ^ 1) - (in_data ^ 10))) <<< 9);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 1) <<< ((data[i] & 7) + 8)) - 10) >>> (data[i] <<< 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 8) | 4) <<< 4) + 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 2) + (in_data | 2)) & (in_data <<< 1));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 5) ^ ((data[i] ^ 7) ^ (data[i] ^ 3)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 8) <<< (in_data >>> 10)) ^ ((in_data + 9) & 10)) & 7);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[77]),
        .in_vld(ready[77]),
        .out_data(data[78]), 
        .out_vld(ready[78])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[78]),
        .in_vld(ready[78]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 82

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_4-5,"`define WIDTH 128
`define DEPTH 89

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 8) <<< ((in_data <<< 3) | (in_data + 6))) <<< 7) & (((in_data - 2) + (in_data ^ 4)) - 4));
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 4) ^ 1) | 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 7) + 10) ^ 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 8) >>> 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 3) | 5) | 1) >>> (in_data ^ 7));
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 4) <<< (((in_data - 4) & 3) & (in_data | 4))) <<< 8);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data >>> 5) - 10) + 2) - ((in_data ^ 3) & (in_data & 4))) - (in_data >>> 3));
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 6) >>> ((in_data + 5) & 6));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) + ((in_data + 6) - ((in_data ^ 1) - (in_data | 8))));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 2) | 10) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 9) | (data[i] + 9)) ^ 6) - 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 6) & (in_data <<< 3)) - (((in_data & 5) + ((in_data - 1) - 3)) >>> 2));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 4) - 6) + 3);
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 9) >>> 4) & (((data[i] >>> 3) >>> 10) + 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) + (in_data ^ 2)) - 7);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 6) >>> (data[i] | 8)) & (data[i] >>> 5)) ^ ((data[i] ^ 2) ^ ((data[i] | 3) | ((data[i] >>> 1) + 4))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 4) >>> 7) + (in_data & 9)) & 5) + 9);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 7) | 9) ^ 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 5) + 10) & 4);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 1) >>> 10) >>> 5);
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 8) ^ (((in_data & 1) + 8) >>> (in_data >>> 10)));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 8) + 6);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) - ((in_data <<< 10) ^ 9)) + 5);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 8) + (in_data - 8)) <<< (((in_data | 9) ^ 7) | 1));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 4) >>> (((in_data ^ 6) | 2) >>> 2));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 10) - (in_data >>> 1)) <<< (in_data ^ 2)) + (((in_data <<< 7) - (in_data - 1)) - (in_data >>> 6))) & ((((in_data - 4) ^ 9) | (in_data ^ 10)) & ((in_data + 10) & ((in_data & 4) >>> 5))));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 3) | ((data[i] | 6) & ((data[i] - 3) + 8))) >>> ((data[i] ^ 4) + 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data >>> 7) & (in_data ^ 2)) | (in_data & 6)) <<< (in_data - 9)) >>> 10);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) | ((in_data <<< 10) + (in_data & 9))) + 5);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 6) ^ 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 10) <<< 3) + (((data[i] + 3) ^ 8) & (data[i] <<< 2)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 4) & ((in_data ^ 1) | 7)) + 9);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 4) - 6) <<< 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 4) | 1) & ((data[i] >>> 2) ^ 8)) - (data[i] ^ 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 3) >>> 10) & 3) + ((((data[i] | 5) & 1) | ((data[i] <<< 9) + 2)) + 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 6) | (data[i] - 9)) | (((data[i] & 8) <<< 7) & 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 1) & 7);
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 2) <<< 4);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 6) >>> 3) | 10) + 6);
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 4) + 4) | (in_data <<< 4)) - (in_data & 4));
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 9) <<< (((in_data - 7) - (in_data | 4)) + (in_data - 1)));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 7) | 8) & 3) & 10);
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 5) - ((in_data - 7) - 2)) >>> (in_data <<< 3));
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 8) - 7) ^ 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 6) | (in_data >>> 1)) - 9);
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 1) <<< 8) & 4);
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 3) & 7) | 8) - ((in_data >>> 1) | ((in_data & 1) + 10)));
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 8) <<< ((data[i] >>> 4) | 6)) & (data[i] <<< 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 9) & 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] <<< 7) & (data[i] + 10)) >>> (data[i] & 7)) & 2) - ((data[i] ^ 2) <<< 10));
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[78]), 
        .out_vld(ready[78])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[78]),
        .in_vld(ready[78]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[79]),
        .in_vld(ready[79]),
        .out_data(data[80]), 
        .out_vld(ready[80])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[80]),
        .in_vld(ready[80]),
        .out_data(data[81]), 
        .out_vld(ready[81])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[81]),
        .in_vld(ready[81]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[82]),
        .in_vld(ready[82]),
        .out_data(data[83]), 
        .out_vld(ready[83])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[83]),
        .in_vld(ready[83]),
        .out_data(data[84]), 
        .out_vld(ready[84])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[84]),
        .in_vld(ready[84]),
        .out_data(data[85]), 
        .out_vld(ready[85])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[85]),
        .in_vld(ready[85]),
        .out_data(data[86]), 
        .out_vld(ready[86])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[86]),
        .in_vld(ready[86]),
        .out_data(data[87]), 
        .out_vld(ready[87])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[87]),
        .in_vld(ready[87]),
        .out_data(data[88]), 
        .out_vld(ready[88])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[88]),
        .in_vld(ready[88]),
        .out_data(data[89]), 
        .out_vld(ready[89])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 89

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_5-0,"`define WIDTH 128
`define DEPTH 71

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 4) | 4) <<< 1);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 3) ^ 9) >>> ((in_data >>> 1) | 5)) ^ 4);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 9) & ((in_data - 8) + (in_data + 1))) - 7);
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data | 2) - ((in_data & 5) | 6)) ^ (in_data >>> 4)) & 5) + 9);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 6) >>> (((in_data & 9) >>> 7) >>> 7)) ^ 6) >>> 9);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 1) | (((in_data >>> 5) >>> (in_data <<< 5)) <<< 10)) ^ 5) | 3);
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 4) + (in_data + 7)) ^ ((in_data | 3) & 5)) - (((in_data & 8) >>> 3) - 7));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 5) >>> 2) - (in_data & 3)) - 7);
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 2) <<< ((data[i] >>> 6) & 5)) + 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 6) & 5) - ((data[i] & 2) | ((data[i] + 1) + (data[i] & 6))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 9) + 4);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 5) & (in_data & 8)) <<< 7) <<< 5) + 4);
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 2) ^ 7) >>> ((in_data | 10) <<< 5)) | (((in_data & 7) - (in_data >>> 1)) + (in_data & 4)));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 5) + 2) | 6);
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 3) - (in_data | 1)) | 5) <<< ((((in_data ^ 9) | 6) & (in_data + 10)) + 5));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 9) - 5) >>> ((in_data <<< 6) + 9));
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 5) ^ ((data[i] | 2) | 3)) & 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 7) + (data[i] - 7)) & ((((data[i] & 2) + (data[i] <<< 8)) + (data[i] ^ 7)) >>> 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 2) ^ 10) ^ ((in_data | 4) & 2)) & 6);
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 3) + ((in_data & 7) <<< 2)) - 2) - 5);
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 5) | (((((data[i] <<< 2) & (data[i] - 7)) >>> 7) <<< ((data[i] ^ 4) | (data[i] ^ 4))) & 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 10) | ((in_data ^ 3) & 10));
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 8) <<< (in_data >>> 7)) | 1);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 2) >>> ((in_data <<< 1) | 7)) | (((in_data >>> 5) ^ (((in_data | 7) ^ 7) - 9)) | ((in_data | 10) + (in_data ^ 3))));
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 9) - (data[i] >>> 1)) >>> 9) | (data[i] <<< 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 7) + ((in_data >>> 2) <<< (in_data & 7))) >>> (in_data - 4)) <<< ((in_data >>> 2) ^ (((in_data - 6) <<< 7) <<< ((in_data & 3) | 7)))) | (((in_data | 1) | (in_data ^ 3)) + 3));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 1) & 3) ^ 1);
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) >>> (in_data & 8)) | (((in_data + 8) - 3) - (((in_data | 10) + (in_data | 6)) | 9)));
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) <<< ((in_data - 5) - ((in_data - 3) & 5))) - 9);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 5) + ((data[i] | 9) <<< ((data[i] >>> 7) + (data[i] <<< 9))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 3) >>> (((in_data <<< 8) ^ 2) - (((in_data <<< 6) & 6) ^ 6)));
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] | 10) + (data[i] >>> 9)) | ((data[i] + 2) <<< (data[i] >>> 7))) + ((data[i] | 3) ^ 3)) >>> (data[i] <<< 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 10) & (data[i] <<< 6)) & 2) ^ (((data[i] <<< 10) + 1) + ((data[i] - 3) & 7)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 10) >>> (in_data & 8)) >>> 2);
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 5) - ((((in_data + 6) <<< 7) + (in_data ^ 5)) - ((in_data | 2) >>> 8))) <<< 9);
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 7) | 5);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 7) >>> (in_data - 4)) >>> 1) & (in_data + 10));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 1) & ((in_data - 10) + (in_data | 1))) <<< 4) - 2) & 1);
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 4) <<< (((((data[i] <<< 10) | (data[i] & 10)) <<< (data[i] + 8)) | (data[i] <<< 3)) + (data[i] >>> 6)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 6) <<< ((in_data | 10) >>> (in_data >>> 3))) >>> 6);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 10) - 3);
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 3) + 2) ^ ((in_data <<< 5) <<< 8)) & ((in_data | 1) | (in_data + 1))) <<< 8);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 5) + (in_data >>> 6)) & 5) <<< 5);
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 1) + (in_data & 1)) + (in_data >>> 2)) + (in_data - 8)) <<< 9);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 8) + 7) <<< 8) & 7);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 4) <<< ((in_data - 2) - (((in_data & 9) <<< 9) ^ (in_data + 7)))) ^ (((in_data & 6) - 9) <<< 7));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 4) + (in_data - 7)) ^ (((in_data & 7) + (in_data & 2)) | (in_data - 5))) & (((in_data <<< 7) >>> 7) >>> 4));
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 7) >>> 1) <<< 5) - 7);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 2) | ((in_data | 3) & ((in_data <<< 2) | (in_data <<< 5)))) | 10) | ((in_data + 8) ^ 5));
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 4) & (((((in_data - 2) ^ 1) + 4) & 2) - (in_data | 1)));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 71

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_5-1,"`define WIDTH 128
`define DEPTH 84

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 10) >>> 4) - 10) >>> ((in_data ^ 9) <<< 3)) ^ 8);
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 10) + 6) <<< (((in_data | 4) - (in_data - 3)) - 2));
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 8) ^ ((in_data | 5) ^ (in_data >>> 6))) - 3) <<< (((in_data + 1) >>> (in_data ^ 1)) & (((in_data >>> 9) >>> (in_data - 9)) - (in_data <<< 4)))) & (in_data <<< 9));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 2) & 8) >>> 6) & (in_data ^ 7)) <<< ((in_data + 8) ^ 9));
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 1) + 10) ^ ((in_data <<< 6) & (in_data <<< 4))) + 9);
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 3) ^ 7) + 3) - 1);
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 4) >>> (in_data <<< 8)) | 9) & ((in_data ^ 2) - 2)) ^ 6);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 4) ^ 8) + (((in_data & 6) >>> (in_data >>> 3)) >>> 5)) | 8) <<< ((in_data & 3) - (in_data & 4)));
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 10) | ((in_data ^ 1) + (((in_data <<< 1) & 7) <<< 4)));
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 5) - (in_data & 4)) | (in_data | 3)) | 8) ^ 10);
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 7) + 6) + ((data[i] | 5) & (data[i] & 1))) ^ (data[i] + 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) >>> ((in_data & 9) >>> (in_data <<< 10)));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 4) <<< ((data[i] - 1) >>> 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 8) <<< 3) <<< (((in_data ^ 7) & 9) - 5));
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 10) - ((in_data & 5) + 3)) + (in_data - 1));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 1) | 5) + (data[i] ^ 8)) - 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 4) - 4);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 7) | ((data[i] & 5) <<< (((data[i] >>> 8) | 8) >>> 6))) + 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 10) ^ 8) + 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) - 5) | ((((in_data ^ 5) & (in_data >>> 2)) <<< 8) >>> ((in_data - 4) | (in_data & 5))));
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 2) ^ 2) | 10) >>> 6);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 6) <<< ((in_data - 1) - (in_data | 1))) | ((in_data | 1) >>> 8)) >>> 3);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] <<< 9) <<< (data[i] & 9)) ^ 2) + (data[i] | 9)) ^ ((((data[i] <<< 1) >>> (data[i] & 10)) ^ ((data[i] <<< 6) & (data[i] | 2))) <<< (data[i] - 6)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] & 10) <<< 9) ^ ((data[i] ^ 7) ^ (data[i] + 2))) >>> 10) <<< 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 5) + 9) & 7) | ((((data[i] <<< 1) | ((data[i] | 5) - 8)) | 8) <<< 9));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((((data[i] <<< 9) <<< 10) <<< 6) >>> ((data[i] <<< 4) <<< (data[i] + 9))) | 2) & ((data[i] & 1) | 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 3) | 8) - 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 5) | 2) & (((in_data & 9) >>> (in_data - 9)) ^ 1));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 1) >>> 10) <<< 9);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 4) - 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 4) ^ ((in_data + 3) | (in_data | 5))) ^ 4) >>> ((in_data | 6) ^ ((in_data - 4) <<< ((in_data >>> 3) >>> (in_data + 7)))));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 1) >>> ((in_data - 4) ^ 9)) <<< 4);
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] - 4) & 8) ^ 7) - 5) - 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 9) >>> 7) ^ (in_data | 9));
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) <<< 2);
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 7) >>> (data[i] ^ 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 2) ^ 10);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 2) ^ ((in_data <<< 3) - ((in_data | 1) | (in_data <<< 3))));
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 3) ^ (data[i] >>> 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 3) & (data[i] + 10)) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 2) + ((in_data >>> 4) >>> 5)) >>> ((in_data <<< 4) + ((in_data <<< 2) & 4))) + (((in_data & 2) >>> 6) >>> ((in_data <<< 3) + ((in_data ^ 5) ^ (in_data <<< 6)))));
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 4) - 3) - (((in_data - 1) | ((in_data <<< 3) + (in_data ^ 9))) + 10));
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 8) <<< 7);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 9) | (((data[i] | 9) - ((data[i] <<< 7) & (data[i] >>> 6))) | ((data[i] & 1) ^ ((data[i] & 1) & 8))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 6) & (data[i] >>> 6)) >>> (data[i] - 9)) <<< ((((data[i] & 10) | (data[i] - 7)) <<< ((data[i] <<< 3) <<< 4)) - ((data[i] | 10) - 2)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 9) <<< (((in_data - 6) ^ (in_data | 4)) | 4)) | 8) | 4);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 7) + 5) - (in_data | 1)) + (((in_data | 5) + (in_data ^ 6)) <<< (in_data | 8))) ^ ((((in_data & 8) - 1) + (in_data >>> 7)) & (in_data >>> 7)));
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 9) <<< (in_data | 3)) >>> 8);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 7) - ((in_data <<< 1) | 2)) & 2);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 4) + 5);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[6]), 
        .out_vld(ready[6])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[6]),
        .in_vld(ready[6]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[78]), 
        .out_vld(ready[78])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[78]),
        .in_vld(ready[78]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[82]),
        .in_vld(ready[82]),
        .out_data(data[83]), 
        .out_vld(ready[83])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[83]),
        .in_vld(ready[83]),
        .out_data(data[84]), 
        .out_vld(ready[84])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 84

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_5-2,"`define WIDTH 128
`define DEPTH 85

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((((in_data - 3) - (in_data ^ 10)) <<< 9) + (in_data | 8)) - (in_data <<< 10)) ^ (((in_data | 8) + ((in_data + 1) + 4)) <<< ((in_data >>> 8) + 8)));
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 2) + (in_data <<< 2)) >>> (in_data + 6)) & 8);
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] - 4) - 1) | ((data[i] >>> 1) | ((data[i] + 3) - 9))) & 8) + 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 2) >>> 3) + ((data[i] | 10) & 4)) - (data[i] <<< 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 2) & 7);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 2) + 8) | ((data[i] <<< 6) - 6)) - 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 6) | ((in_data - 3) <<< (in_data >>> 8))) - ((in_data >>> 1) + 10)) & 8) | ((in_data + 1) >>> (((in_data - 3) ^ (in_data | 7)) - 6)));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 5) | ((data[i] - 8) <<< 6)) >>> ((((data[i] + 2) >>> (data[i] <<< 4)) <<< (((data[i] - 9) + 3) | ((data[i] + 9) <<< (data[i] + 9)))) <<< 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 5) + (in_data <<< 7)) >>> 3) | ((in_data <<< 5) >>> 9)) ^ 5);
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 10) >>> ((in_data >>> 8) + (in_data <<< 2)));
        end
    end
endmodule

module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 8) | (in_data ^ 7)) & 6) ^ ((in_data - 9) >>> (((in_data ^ 6) >>> (in_data - 4)) | 9)));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 4) + (data[i] ^ 3)) <<< (data[i] ^ 1)) - 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) & 2) - (((in_data & 3) >>> 3) & ((in_data ^ 3) ^ (in_data + 6))));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 6) + ((in_data - 9) | (in_data + 5)));
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 5) <<< 1);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 7) >>> 2);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 1) >>> (data[i] ^ 6)) ^ ((((data[i] ^ 4) >>> ((data[i] & 2) <<< 6)) + (data[i] | 6)) & 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((((in_data ^ 6) + 6) ^ 2) ^ 9) <<< (((in_data <<< 10) | (in_data + 8)) ^ 3)) - 10);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 2) ^ 5) ^ (in_data | 6)) + 6) & 8);
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 1) - 6) & (((in_data <<< 3) & (in_data | 8)) & (in_data >>> 4))) & (((in_data & 2) & 10) | 9));
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 5) | 5) ^ ((in_data - 10) | ((in_data - 10) & 5)));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 4) <<< (in_data >>> 9)) ^ (in_data - 6)) + ((in_data - 4) | (in_data + 10))) - (((in_data ^ 8) | (((in_data >>> 3) - (in_data + 2)) - (in_data - 2))) <<< 1));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 1) | 5) & ((in_data - 7) ^ (in_data <<< 7))) + ((in_data + 9) ^ (in_data & 2)));
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 4) + 9) >>> (data[i] | 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 8) <<< 10);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 8) | (in_data + 7)) - 7) ^ 5);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] >>> 7) + 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 9) + 7);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] + 10) >>> 6) | (data[i] | 6)) <<< ((data[i] - 4) & ((data[i] ^ 4) & 8))) - 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 8) & 9);
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 6) - 9) <<< (in_data >>> 1)) | 8) >>> 2);
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 5) + 7) >>> 2);
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 9) + (in_data | 8)) ^ 10);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 10) - (data[i] | 1)) | (((data[i] >>> 5) | (data[i] | 6)) - 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 2) | 7) - 7);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] + 5) + (((data[i] & 5) <<< (((data[i] - 8) >>> 10) >>> (data[i] <<< 6))) >>> ((data[i] <<< 8) >>> ((data[i] | 1) + ((data[i] >>> 5) | (data[i] | 1))))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 2) + 3) >>> 2);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 10) ^ 6) >>> (data[i] - 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 2) | ((in_data - 1) <<< (in_data & 2)));
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 6) >>> 9) - 2);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 3) ^ 8) | 5) | ((((in_data | 7) | (in_data >>> 10)) + ((in_data & 6) + 5)) <<< 1));
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] <<< 9) | (data[i] - 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 4) | 9);
        end
    end
endmodule

module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 4) + (data[i] - 2)) <<< ((data[i] + 3) ^ ((data[i] ^ 9) ^ 3))) - ((((data[i] - 9) <<< 4) | (data[i] + 7)) ^ ((data[i] & 10) - (data[i] & 3))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 6) + 5) <<< 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 2) & ((data[i] & 10) ^ (data[i] + 8))) - 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 9) <<< (((in_data >>> 2) + 1) - 9));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) & 1) - 1);
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 6) & ((data[i] - 8) - (data[i] + 4))) & 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 9) <<< 5);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[42]), 
        .out_vld(ready[42])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[42]),
        .in_vld(ready[42]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[77]),
        .in_vld(ready[77]),
        .out_data(data[78]), 
        .out_vld(ready[78])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[78]),
        .in_vld(ready[78]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[79]),
        .in_vld(ready[79]),
        .out_data(data[80]), 
        .out_vld(ready[80])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[80]),
        .in_vld(ready[80]),
        .out_data(data[84]), 
        .out_vld(ready[84])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[84]),
        .in_vld(ready[84]),
        .out_data(data[85]), 
        .out_vld(ready[85])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 85

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_5-3,"`define WIDTH 128
`define DEPTH 80

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 2) - 9) | 3) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 1) ^ 9);
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 10) & 8) <<< 8) + 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 7) - 1) ^ (((in_data >>> 6) >>> ((in_data + 4) | 2)) >>> 5));
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 8) | 5) & 1) >>> (in_data + 10)) & ((in_data + 5) <<< ((in_data | 5) & 2)));
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 4) & 9) + ((in_data >>> 5) & 7)) ^ 8) | 7);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 6) ^ (((in_data <<< 9) - 3) - (in_data <<< 10))) >>> (((in_data + 7) + 4) & ((in_data <<< 4) + 1))) - 6);
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 1) <<< 10) - 9);
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 5) & 9) + 6) & 10) & (in_data <<< 4));
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 8) & 1) | (((data[i] ^ 10) <<< 4) & ((data[i] <<< 6) <<< (data[i] - 4)))) ^ (((data[i] | 2) - 2) >>> 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 4) ^ (in_data >>> 8));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((((in_data | 5) + (in_data - 10)) & 6) - (in_data | 2)) & 9) ^ 3);
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 10) | (in_data - 9)) - ((in_data <<< 4) ^ (((in_data ^ 7) ^ 6) | 7)));
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 6) - 4) - 1);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 6) ^ 1);
        end
    end
endmodule

module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 10) & 10) & 1);
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 3) ^ ((data[i] >>> 3) ^ (data[i] - 7))) + 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 9) >>> ((in_data + 6) <<< 1)) - 7) - ((in_data - 7) ^ ((in_data - 2) + 2)));
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 1) <<< 6) + 5) & 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 1) <<< 2) <<< 10);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 3) + (in_data + 1)) & (in_data & 10)) - ((((in_data | 7) | ((in_data & 8) <<< 1)) | 1) - ((in_data - 9) - (((in_data >>> 8) >>> 4) | (in_data - 8)))));
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 1) ^ 4) + ((data[i] + 7) + (((data[i] - 7) | 1) - 8))) - ((data[i] >>> 8) | 4));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 6) | ((in_data | 5) <<< ((((in_data ^ 6) <<< 6) - 5) ^ 2)));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 5) + ((data[i] | 7) & 4)) + (data[i] ^ 4)) ^ 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 9) - 9);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 5) >>> 7);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 4) >>> 5) >>> ((in_data | 9) <<< (in_data - 9))) - 7) + 7);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 3) | 2) >>> 7) >>> 7);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data - 5) - (in_data & 10));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((((data[i] | 4) | 8) & 4) - (data[i] - 9)) ^ 6) & 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 8) & (in_data & 9)) >>> (in_data - 1)) + (in_data - 2)) - ((in_data ^ 8) - (in_data - 5)));
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 9) <<< 10);
        end
    end
endmodule

module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 8) <<< 6) | 8) >>> 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 10) & 4) + (((data[i] <<< 3) >>> 7) | 2)) | 2);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 2) ^ (((data[i] - 6) | (data[i] + 6)) | (data[i] >>> 8))) & 3);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 8) - 3) <<< ((((in_data <<< 10) >>> (in_data >>> 8)) >>> (in_data <<< 7)) & ((in_data | 2) & 8))) + (in_data <<< 7));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 6) <<< 10) & ((in_data & 8) & 10));
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data >>> 4) >>> (in_data ^ 9)) & 1) <<< (in_data >>> 4)) & 8);
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data | 5) <<< (in_data & 8)) - (in_data | 2)) ^ 7) + 5);
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 2) | ((in_data ^ 8) | 2)) <<< (((in_data + 6) - 3) | ((in_data - 6) ^ ((in_data | 9) + 10)))) & (((in_data >>> 9) ^ 9) | (in_data | 4)));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data >>> 7) - (in_data ^ 2)) >>> (in_data + 3)) >>> (((in_data >>> 9) | 1) - ((in_data - 8) & 3))) & 1);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 8) ^ 6);
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] | 5) ^ 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 10) >>> ((in_data - 2) - (in_data ^ 5))) - ((in_data >>> 10) ^ 2)) - 3);
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 6) - (in_data - 4)) ^ 7);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 6) >>> 4) - 1) - (in_data <<< 10));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 5) & 2) <<< (((in_data | 6) <<< ((in_data | 4) & (in_data >>> 6))) <<< (in_data ^ 6))) & (((in_data + 9) & 7) - 1));
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 3) >>> ((in_data | 3) <<< (in_data | 7))) & 6) & 4);
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] - 7) | ((data[i] | 2) ^ ((data[i] ^ 3) & (((data[i] >>> 3) - 8) & 5))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] & 8) | ((data[i] >>> 10) + 4)) >>> 8);
                end
            end
        end
    endgenerate
endmodule



module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[3]), 
        .out_vld(ready[3])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[3]),
        .in_vld(ready[3]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[7]), 
        .out_vld(ready[7])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[7]),
        .in_vld(ready[7]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[12]), 
        .out_vld(ready[12])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[12]),
        .in_vld(ready[12]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[24]), 
        .out_vld(ready[24])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[24]),
        .in_vld(ready[24]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[27]), 
        .out_vld(ready[27])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[27]),
        .in_vld(ready[27]),
        .out_data(data[28]), 
        .out_vld(ready[28])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[28]),
        .in_vld(ready[28]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[33]), 
        .out_vld(ready[33])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[33]),
        .in_vld(ready[33]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[37]), 
        .out_vld(ready[37])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[37]),
        .in_vld(ready[37]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[79]), 
        .out_vld(ready[79])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[79]),
        .in_vld(ready[79]),
        .out_data(data[80]), 
        .out_vld(ready[80])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 80

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_5-4,"`define WIDTH 128
`define DEPTH 77

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data | 1) + ((in_data >>> 9) & 8)) ^ 4) & (((in_data + 7) <<< (in_data | 10)) - 9)) >>> ((((in_data ^ 2) | ((in_data & 2) <<< (in_data >>> 1))) & 4) + 5));
        end
    end
endmodule

module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 6) >>> 7) ^ 10) <<< (((in_data <<< 2) - (in_data & 9)) <<< (((in_data | 10) & 5) <<< 1)));
        end
    end
endmodule

module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 6) <<< ((in_data <<< 2) >>> (in_data & 7))) >>> (((in_data + 3) - (in_data | 7)) - (((in_data | 6) + 10) <<< (in_data <<< 10))));
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 7) <<< (in_data + 1)) ^ (in_data <<< 9));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 6) <<< (in_data & 9)) | ((((in_data + 9) & 2) <<< 1) | ((((in_data - 3) & (in_data & 10)) ^ (in_data <<< 5)) <<< 3)));
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 5) - (in_data | 1)) - 6) & 8);
        end
    end
endmodule

module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 7) & 8) & (((in_data >>> 3) ^ 10) & 1)) + ((((in_data | 8) - ((in_data + 9) | 6)) + (in_data <<< 9)) | (in_data <<< 7)));
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] + 7) - ((data[i] & 6) <<< ((data[i] >>> 6) >>> 8))) - (data[i] | 1)) & ((data[i] ^ 1) >>> (((data[i] <<< 3) <<< 5) & ((data[i] + 4) + 8))));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 6) <<< 1);
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] >>> 3) ^ ((data[i] - 8) - 10)) & ((data[i] - 5) ^ (data[i] + 7))) & ((data[i] + 8) ^ 4)) <<< (data[i] - 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((((in_data <<< 1) - 8) + (in_data - 9)) <<< (in_data + 6)) >>> 5) | 6);
        end
    end
endmodule

module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 1) >>> ((in_data <<< 9) <<< ((in_data ^ 10) | (in_data <<< 10)))) - (in_data + 4)) | (((in_data ^ 1) <<< ((in_data & 8) + (in_data & 6))) ^ ((in_data | 6) <<< 8)));
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data <<< 3) <<< 7) <<< ((((in_data ^ 5) - 3) + (in_data | 9)) & ((in_data + 8) ^ 2)));
        end
    end
endmodule

module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 1) + 6) & 8) >>> 2);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 8) & ((in_data | 1) & 9));
        end
    end
endmodule

module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 2) ^ (in_data ^ 10)) - 8) | 6);
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 8) - 7) >>> (data[i] - 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 2) | (data[i] >>> 8)) >>> ((data[i] ^ 10) <<< 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] ^ 2) - 6) ^ ((((data[i] & 3) - 5) ^ 4) ^ (data[i] - 7)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 9) | (data[i] >>> 10)) ^ 10) | (((data[i] ^ 2) >>> 1) & (data[i] + 9)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 5) >>> ((in_data <<< 3) ^ (in_data | 9)));
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] ^ 5) ^ 9);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data <<< 6) & ((in_data >>> 6) >>> (in_data | 5)));
        end
    end
endmodule

module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 1) >>> ((in_data ^ 1) + 7)) ^ 3) | 6);
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] - 9) ^ 8) <<< (data[i] ^ 3)) & ((data[i] - 3) + (data[i] - 6))) | (((data[i] & 7) - 9) + ((data[i] - 10) | 8)));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 9) - 2) + 9) <<< (in_data | 9));
        end
    end
endmodule

module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] <<< 9) ^ 5) ^ (data[i] >>> 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 3) ^ (((data[i] & 4) >>> ((data[i] & 2) <<< (data[i] <<< 7))) & 2)) - ((((data[i] & 7) ^ 8) + (data[i] + 2)) + 1));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] <<< 7) >>> 7) <<< 9) <<< (data[i] ^ 4)) >>> (data[i] + 8));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 5) + 1) & ((data[i] >>> 3) + 3));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 9) & (((data[i] - 9) <<< (data[i] - 9)) >>> 4)) + 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 8) & (in_data & 9)) ^ 6) & 2);
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 9) | (in_data ^ 9)) - 7) + 6) >>> ((in_data | 10) - 9));
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) ^ 2) >>> ((in_data - 9) - ((in_data ^ 2) >>> 8)));
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data >>> 5) ^ (in_data <<< 8)) + ((in_data ^ 7) | 4)) <<< 6) <<< (((in_data & 6) | (in_data >>> 7)) & (in_data ^ 4)));
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 6) - (in_data ^ 8)) & ((in_data ^ 8) & 4)) <<< (((in_data + 5) ^ 3) ^ 3)) >>> 1);
        end
    end
endmodule

module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 7) | (in_data | 3)) - (((in_data ^ 6) | (in_data ^ 9)) <<< (in_data - 10))) & ((((in_data ^ 2) ^ (in_data + 5)) | (in_data <<< 7)) | ((in_data & 1) >>> (in_data & 4))));
        end
    end
endmodule

module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 9) ^ (in_data | 8)) & (in_data - 3)) ^ 10);
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 4) - 9) | 7);
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 7) ^ 6) ^ 1) & 5);
        end
    end
endmodule

module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 3) & (in_data ^ 6)) <<< (in_data | 7)) <<< 9);
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 1) <<< 3) - ((in_data <<< 8) ^ ((in_data >>> 5) ^ (in_data | 10))));
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] - 2) | 9) + ((data[i] | 9) + 6)) ^ 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data ^ 7) & ((in_data - 9) >>> (in_data | 1))) >>> ((in_data - 6) | ((in_data <<< 1) >>> 3)));
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 3) | 9) ^ (((in_data ^ 5) | 9) ^ 4));
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 4) ^ 7) <<< (((in_data <<< 6) <<< 10) | ((in_data | 8) & (in_data ^ 7)))) >>> ((in_data >>> 3) - 6)) - ((((in_data <<< 1) ^ (in_data ^ 7)) ^ ((in_data >>> 9) | 9)) + 9));
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data >>> 6) <<< 6) <<< 7) | ((((in_data >>> 9) >>> 3) ^ 7) & 4));
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 2) & 9) | 6);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 8) & ((in_data + 5) <<< 9)) - ((((in_data ^ 6) & (in_data ^ 5)) + (((in_data + 8) | (in_data & 7)) | 1)) - (in_data <<< 5)));
        end
    end
endmodule

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 8) >>> ((in_data & 6) ^ 7));
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[1]), 
        .out_vld(ready[1])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[1]),
        .in_vld(ready[1]),
        .out_data(data[2]), 
        .out_vld(ready[2])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[2]),
        .in_vld(ready[2]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[11]), 
        .out_vld(ready[11])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[11]),
        .in_vld(ready[11]),
        .out_data(data[13]), 
        .out_vld(ready[13])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[13]),
        .in_vld(ready[13]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[19]), 
        .out_vld(ready[19])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[19]),
        .in_vld(ready[19]),
        .out_data(data[20]), 
        .out_vld(ready[20])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[20]),
        .in_vld(ready[20]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[26]), 
        .out_vld(ready[26])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[26]),
        .in_vld(ready[26]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[36]), 
        .out_vld(ready[36])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[36]),
        .in_vld(ready[36]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[43]), 
        .out_vld(ready[43])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[43]),
        .in_vld(ready[43]),
        .out_data(data[44]), 
        .out_vld(ready[44])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[44]),
        .in_vld(ready[44]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[47]), 
        .out_vld(ready[47])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[47]),
        .in_vld(ready[47]),
        .out_data(data[48]), 
        .out_vld(ready[48])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[48]),
        .in_vld(ready[48]),
        .out_data(data[49]), 
        .out_vld(ready[49])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[49]),
        .in_vld(ready[49]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[54]), 
        .out_vld(ready[54])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[54]),
        .in_vld(ready[54]),
        .out_data(data[55]), 
        .out_vld(ready[55])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[55]),
        .in_vld(ready[55]),
        .out_data(data[56]), 
        .out_vld(ready[56])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[56]),
        .in_vld(ready[56]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[58]), 
        .out_vld(ready[58])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[58]),
        .in_vld(ready[58]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[65]), 
        .out_vld(ready[65])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[65]),
        .in_vld(ready[65]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[73]), 
        .out_vld(ready[73])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[73]),
        .in_vld(ready[73]),
        .out_data(data[74]), 
        .out_vld(ready[74])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[74]),
        .in_vld(ready[74]),
        .out_data(data[75]), 
        .out_vld(ready[75])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[75]),
        .in_vld(ready[75]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 77

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
pipeline,ns_50-w_128-opd_5-5,"`define WIDTH 128
`define DEPTH 84

module exec_unit_1 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data + 7) | 3) & 6);
        end
    end
endmodule

module exec_unit_40 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 1) - (in_data - 6)) | 4);
        end
    end
endmodule

module exec_unit_39 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data - 4) | ((in_data - 10) | 2)) <<< (((in_data ^ 7) ^ 8) ^ 5));
        end
    end
endmodule

module exec_unit_32 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 10) + 4) | (in_data ^ 10)) | (((((in_data <<< 10) + 5) | 4) | 8) <<< 5));
        end
    end
endmodule

module exec_unit_45 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 4) >>> 6) <<< 10) & ((((in_data ^ 7) >>> 5) <<< (in_data + 10)) >>> 8));
        end
    end
endmodule

module exec_unit_42 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 8) | ((((in_data & 7) & 5) + 1) <<< (in_data <<< 7))) ^ (((((in_data <<< 2) ^ 6) + (in_data <<< 9)) & (in_data <<< 3)) >>> 1));
        end
    end
endmodule

module exec_unit_5 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] <<< 5) - ((data[i] <<< 9) <<< ((data[i] | 5) + 1))) ^ 7) - (data[i] >>> 10));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_38 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data & 4) >>> 5) | ((in_data >>> 10) <<< (in_data >>> 1))) - ((in_data >>> 4) ^ ((in_data - 5) - 5))) + ((in_data | 4) >>> (in_data | 10)));
        end
    end
endmodule

module exec_unit_6 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data & 7) <<< (in_data | 2)) ^ 9) - 10);
        end
    end
endmodule

module exec_unit_47 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((((in_data - 1) | 9) <<< (in_data + 6)) <<< (in_data - 1)) ^ ((in_data + 7) <<< 1)) & 8);
        end
    end
endmodule

module exec_unit_2 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] ^ 6) | 7) - 10) >>> (data[i] + 1)) - (data[i] + 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_23 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data + 2) + 6) <<< ((((in_data | 10) ^ 10) >>> (in_data <<< 4)) <<< 4)) | ((in_data <<< 1) - 4));
        end
    end
endmodule

module exec_unit_16 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((((in_data & 1) >>> (in_data | 10)) & 8) | (in_data + 5)) >>> 6) <<< 9);
        end
    end
endmodule

module exec_unit_20 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((((data[i] <<< 7) <<< (data[i] + 1)) & 4) - (data[i] <<< 10)) | 3) | (data[i] <<< 2));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_13 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] | 1) + 7) & (data[i] & 5));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_19 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 8) | ((in_data >>> 10) + 8)) | (in_data ^ 4));
        end
    end
endmodule

module exec_unit_30 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 9) | (data[i] <<< 1)) ^ (data[i] + 6)) & 8);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_3 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 8) >>> ((in_data & 8) ^ (in_data >>> 8))) + (in_data | 5)) & ((in_data + 5) >>> (((in_data | 4) ^ 8) >>> (in_data <<< 2)))) ^ (((in_data & 4) ^ (((in_data & 3) <<< 3) - ((in_data | 6) >>> (in_data <<< 1)))) + ((in_data | 9) >>> (in_data <<< 8))));
        end
    end
endmodule

module exec_unit_43 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data <<< 9) & 4) <<< (in_data >>> 7)) & (((in_data & 6) >>> (in_data <<< 2)) + 4));
        end
    end
endmodule

module exec_unit_15 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) ^ (((in_data <<< 10) <<< (in_data >>> 3)) - (in_data <<< 4))) + 10);
        end
    end
endmodule

module exec_unit_48 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data - 9) <<< 10) <<< 7) | ((in_data >>> 9) <<< ((in_data >>> 3) | 5)));
        end
    end
endmodule

module exec_unit_17 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 3) + (in_data | 10)) >>> 3) + 6) | 4);
        end
    end
endmodule

module exec_unit_49 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data <<< 7) >>> (in_data >>> 5)) ^ 10) - 9) >>> 5);
        end
    end
endmodule

module exec_unit_24 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] >>> 4) <<< 9) - 1);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_18 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] & 4) >>> 3) + (data[i] | 7)) ^ ((((data[i] | 6) ^ ((data[i] >>> 5) <<< 5)) ^ ((data[i] & 1) ^ 4)) | 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_0 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] - 6) >>> 1) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_7 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data & 3) - 7);
        end
    end
endmodule

module exec_unit_27 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data | 2) + (in_data + 5)) >>> ((in_data ^ 4) & 7)) >>> 9);
        end
    end
endmodule

module exec_unit_4 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 2) >>> 1) & (in_data <<< 4));
        end
    end
endmodule

module exec_unit_37 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((data[i] & 2) + 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_44 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] ^ 4) <<< 5) & (((data[i] ^ 6) - (data[i] >>> 6)) & 6)) >>> 5);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_29 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 3) <<< (in_data <<< 7)) - (((in_data >>> 10) & ((in_data + 8) ^ (in_data >>> 2))) ^ (((in_data & 1) & 8) & (((in_data >>> 10) | 3) + 8))));
        end
    end
endmodule

module exec_unit_34 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data | 8) >>> 10);
        end
    end
endmodule

module exec_unit_35 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((in_data ^ 10) | (in_data >>> 1)) - 8) + 6);
        end
    end
endmodule

module exec_unit_14 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] + 1) + 6) + (data[i] + 3)) - 10) | 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_36 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data - 3) & 8) | 5) & 10) - (((in_data <<< 9) | (in_data ^ 7)) >>> 8));
        end
    end
endmodule

module exec_unit_41 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data + 6) <<< 9);
        end
    end
endmodule

module exec_unit_28 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data ^ 2) ^ 2);
        end
    end
endmodule

module exec_unit_26 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] | 9) <<< 1) ^ 4) + (data[i] <<< 6));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_31 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 2;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((data[i] + 5) & 6) | 7);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_11 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data ^ 8) <<< 3) >>> (in_data & 6)) & 8) | 5);
        end
    end
endmodule

module exec_unit_46 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 4;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= ((((data[i] >>> 6) | ((data[i] <<< 5) - (data[i] >>> 1))) >>> 6) >>> ((((data[i] | 7) >>> 7) ^ (((data[i] & 7) ^ 10) >>> 8)) + 7));
                end
            end
        end
    endgenerate
endmodule


module exec_unit_10 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);  
    parameter WIDTH = `WIDTH;
    localparam DEPTH = 3;
    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output [WIDTH-1:0] out_data;
    output out_vld;

    
    logic [DEPTH:0] ready;
    logic [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    generate
        for (genvar i=0; i < DEPTH; i=i+1) begin : gen
            always @(posedge clk) begin
                if (!reset_) begin
                    ready[i+1] <= 'd0;
                    data[i+1] <= 'd0;
                end else begin
                    ready[i+1] <= ready[i];
                    data[i+1] <= (((((data[i] >>> 6) | 2) - 3) <<< 6) + 4);
                end
            end
        end
    endgenerate
endmodule


module exec_unit_33 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 2) + 10) <<< ((((in_data <<< 3) ^ (in_data | 8)) ^ (in_data + 9)) - 9));
        end
    end
endmodule

module exec_unit_9 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data & 10) & 8) ^ 4);
        end
    end
endmodule

module exec_unit_12 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((((in_data + 2) + 1) - ((in_data - 1) ^ 1)) + 8) + (((in_data & 6) <<< 5) ^ ((in_data - 3) <<< ((in_data + 6) ^ (in_data - 7)))));
        end
    end
endmodule

module exec_unit_22 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((((((in_data + 3) <<< 9) <<< (in_data | 9)) & (in_data + 2)) >>> 7) + 4);
        end
    end
endmodule

module exec_unit_25 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= ((in_data >>> 2) - ((((in_data >>> 4) ^ 9) + (((in_data >>> 1) - (in_data <<< 10)) ^ 2)) + 9));
        end
    end
endmodule

module exec_unit_21 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data | 9) + 1) | (((in_data >>> 4) | 7) | ((in_data + 7) <<< 7)));
        end
    end
endmodule

module exec_unit_8 (
    clk,
    reset_,
    in_data,
    in_vld,
    out_data,
    out_vld
);
    parameter WIDTH = `WIDTH;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_data;
    input in_vld;
    output reg [WIDTH-1:0] out_data;
    output reg out_vld;

    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            out_vld <= 'd0;
            out_data <= 'd0;
        end else begin
            out_vld <= in_vld;
            out_data <= (((in_data >>> 4) - ((in_data & 5) - 4)) ^ 4);
        end
    end
endmodule


module pipeline (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;
    
    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    output out_vld;
    output [WIDTH-1:0] out_data;

    wire [DEPTH:0] ready;
    wire [DEPTH:0][WIDTH-1:0] data;
    assign ready[0] = in_vld;
    assign data[0] = in_data;
    assign out_vld = ready[DEPTH];
    assign out_data = data[DEPTH];

    exec_unit_0 #(.WIDTH(WIDTH)) unit_0 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[0]),
        .in_vld(ready[0]),
        .out_data(data[4]), 
        .out_vld(ready[4])
    );

    exec_unit_1 #(.WIDTH(WIDTH)) unit_1 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[4]),
        .in_vld(ready[4]),
        .out_data(data[5]), 
        .out_vld(ready[5])
    );

    exec_unit_2 #(.WIDTH(WIDTH)) unit_2 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[5]),
        .in_vld(ready[5]),
        .out_data(data[8]), 
        .out_vld(ready[8])
    );

    exec_unit_3 #(.WIDTH(WIDTH)) unit_3 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[8]),
        .in_vld(ready[8]),
        .out_data(data[9]), 
        .out_vld(ready[9])
    );

    exec_unit_4 #(.WIDTH(WIDTH)) unit_4 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[9]),
        .in_vld(ready[9]),
        .out_data(data[10]), 
        .out_vld(ready[10])
    );

    exec_unit_5 #(.WIDTH(WIDTH)) unit_5 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[10]),
        .in_vld(ready[10]),
        .out_data(data[14]), 
        .out_vld(ready[14])
    );

    exec_unit_6 #(.WIDTH(WIDTH)) unit_6 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[14]),
        .in_vld(ready[14]),
        .out_data(data[15]), 
        .out_vld(ready[15])
    );

    exec_unit_7 #(.WIDTH(WIDTH)) unit_7 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[15]),
        .in_vld(ready[15]),
        .out_data(data[16]), 
        .out_vld(ready[16])
    );

    exec_unit_8 #(.WIDTH(WIDTH)) unit_8 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[16]),
        .in_vld(ready[16]),
        .out_data(data[17]), 
        .out_vld(ready[17])
    );

    exec_unit_9 #(.WIDTH(WIDTH)) unit_9 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[17]),
        .in_vld(ready[17]),
        .out_data(data[18]), 
        .out_vld(ready[18])
    );

    exec_unit_10 #(.WIDTH(WIDTH)) unit_10 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[18]),
        .in_vld(ready[18]),
        .out_data(data[21]), 
        .out_vld(ready[21])
    );

    exec_unit_11 #(.WIDTH(WIDTH)) unit_11 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[21]),
        .in_vld(ready[21]),
        .out_data(data[22]), 
        .out_vld(ready[22])
    );

    exec_unit_12 #(.WIDTH(WIDTH)) unit_12 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[22]),
        .in_vld(ready[22]),
        .out_data(data[23]), 
        .out_vld(ready[23])
    );

    exec_unit_13 #(.WIDTH(WIDTH)) unit_13 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[23]),
        .in_vld(ready[23]),
        .out_data(data[25]), 
        .out_vld(ready[25])
    );

    exec_unit_14 #(.WIDTH(WIDTH)) unit_14 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[25]),
        .in_vld(ready[25]),
        .out_data(data[29]), 
        .out_vld(ready[29])
    );

    exec_unit_15 #(.WIDTH(WIDTH)) unit_15 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[29]),
        .in_vld(ready[29]),
        .out_data(data[30]), 
        .out_vld(ready[30])
    );

    exec_unit_16 #(.WIDTH(WIDTH)) unit_16 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[30]),
        .in_vld(ready[30]),
        .out_data(data[31]), 
        .out_vld(ready[31])
    );

    exec_unit_17 #(.WIDTH(WIDTH)) unit_17 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[31]),
        .in_vld(ready[31]),
        .out_data(data[32]), 
        .out_vld(ready[32])
    );

    exec_unit_18 #(.WIDTH(WIDTH)) unit_18 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[32]),
        .in_vld(ready[32]),
        .out_data(data[34]), 
        .out_vld(ready[34])
    );

    exec_unit_19 #(.WIDTH(WIDTH)) unit_19 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[34]),
        .in_vld(ready[34]),
        .out_data(data[35]), 
        .out_vld(ready[35])
    );

    exec_unit_20 #(.WIDTH(WIDTH)) unit_20 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[35]),
        .in_vld(ready[35]),
        .out_data(data[38]), 
        .out_vld(ready[38])
    );

    exec_unit_21 #(.WIDTH(WIDTH)) unit_21 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[38]),
        .in_vld(ready[38]),
        .out_data(data[39]), 
        .out_vld(ready[39])
    );

    exec_unit_22 #(.WIDTH(WIDTH)) unit_22 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[39]),
        .in_vld(ready[39]),
        .out_data(data[40]), 
        .out_vld(ready[40])
    );

    exec_unit_23 #(.WIDTH(WIDTH)) unit_23 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[40]),
        .in_vld(ready[40]),
        .out_data(data[41]), 
        .out_vld(ready[41])
    );

    exec_unit_24 #(.WIDTH(WIDTH)) unit_24 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[41]),
        .in_vld(ready[41]),
        .out_data(data[45]), 
        .out_vld(ready[45])
    );

    exec_unit_25 #(.WIDTH(WIDTH)) unit_25 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[45]),
        .in_vld(ready[45]),
        .out_data(data[46]), 
        .out_vld(ready[46])
    );

    exec_unit_26 #(.WIDTH(WIDTH)) unit_26 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[46]),
        .in_vld(ready[46]),
        .out_data(data[50]), 
        .out_vld(ready[50])
    );

    exec_unit_27 #(.WIDTH(WIDTH)) unit_27 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[50]),
        .in_vld(ready[50]),
        .out_data(data[51]), 
        .out_vld(ready[51])
    );

    exec_unit_28 #(.WIDTH(WIDTH)) unit_28 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[51]),
        .in_vld(ready[51]),
        .out_data(data[52]), 
        .out_vld(ready[52])
    );

    exec_unit_29 #(.WIDTH(WIDTH)) unit_29 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[52]),
        .in_vld(ready[52]),
        .out_data(data[53]), 
        .out_vld(ready[53])
    );

    exec_unit_30 #(.WIDTH(WIDTH)) unit_30 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[53]),
        .in_vld(ready[53]),
        .out_data(data[57]), 
        .out_vld(ready[57])
    );

    exec_unit_31 #(.WIDTH(WIDTH)) unit_31 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[57]),
        .in_vld(ready[57]),
        .out_data(data[59]), 
        .out_vld(ready[59])
    );

    exec_unit_32 #(.WIDTH(WIDTH)) unit_32 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[59]),
        .in_vld(ready[59]),
        .out_data(data[60]), 
        .out_vld(ready[60])
    );

    exec_unit_33 #(.WIDTH(WIDTH)) unit_33 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[60]),
        .in_vld(ready[60]),
        .out_data(data[61]), 
        .out_vld(ready[61])
    );

    exec_unit_34 #(.WIDTH(WIDTH)) unit_34 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[61]),
        .in_vld(ready[61]),
        .out_data(data[62]), 
        .out_vld(ready[62])
    );

    exec_unit_35 #(.WIDTH(WIDTH)) unit_35 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[62]),
        .in_vld(ready[62]),
        .out_data(data[63]), 
        .out_vld(ready[63])
    );

    exec_unit_36 #(.WIDTH(WIDTH)) unit_36 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[63]),
        .in_vld(ready[63]),
        .out_data(data[64]), 
        .out_vld(ready[64])
    );

    exec_unit_37 #(.WIDTH(WIDTH)) unit_37 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[64]),
        .in_vld(ready[64]),
        .out_data(data[66]), 
        .out_vld(ready[66])
    );

    exec_unit_38 #(.WIDTH(WIDTH)) unit_38 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[66]),
        .in_vld(ready[66]),
        .out_data(data[67]), 
        .out_vld(ready[67])
    );

    exec_unit_39 #(.WIDTH(WIDTH)) unit_39 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[67]),
        .in_vld(ready[67]),
        .out_data(data[68]), 
        .out_vld(ready[68])
    );

    exec_unit_40 #(.WIDTH(WIDTH)) unit_40 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[68]),
        .in_vld(ready[68]),
        .out_data(data[69]), 
        .out_vld(ready[69])
    );

    exec_unit_41 #(.WIDTH(WIDTH)) unit_41 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[69]),
        .in_vld(ready[69]),
        .out_data(data[70]), 
        .out_vld(ready[70])
    );

    exec_unit_42 #(.WIDTH(WIDTH)) unit_42 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[70]),
        .in_vld(ready[70]),
        .out_data(data[71]), 
        .out_vld(ready[71])
    );

    exec_unit_43 #(.WIDTH(WIDTH)) unit_43 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[71]),
        .in_vld(ready[71]),
        .out_data(data[72]), 
        .out_vld(ready[72])
    );

    exec_unit_44 #(.WIDTH(WIDTH)) unit_44 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[72]),
        .in_vld(ready[72]),
        .out_data(data[76]), 
        .out_vld(ready[76])
    );

    exec_unit_45 #(.WIDTH(WIDTH)) unit_45 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[76]),
        .in_vld(ready[76]),
        .out_data(data[77]), 
        .out_vld(ready[77])
    );

    exec_unit_46 #(.WIDTH(WIDTH)) unit_46 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[77]),
        .in_vld(ready[77]),
        .out_data(data[81]), 
        .out_vld(ready[81])
    );

    exec_unit_47 #(.WIDTH(WIDTH)) unit_47 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[81]),
        .in_vld(ready[81]),
        .out_data(data[82]), 
        .out_vld(ready[82])
    );

    exec_unit_48 #(.WIDTH(WIDTH)) unit_48 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[82]),
        .in_vld(ready[82]),
        .out_data(data[83]), 
        .out_vld(ready[83])
    );

    exec_unit_49 #(.WIDTH(WIDTH)) unit_49 (
        .clk(clk),
        .reset_(reset_),
        .in_data(data[83]),
        .in_vld(ready[83]),
        .out_data(data[84]), 
        .out_vld(ready[84])
    );
endmodule",,"`define WIDTH 128
`define DEPTH 84

module pipeline_tb (
    clk,
    reset_,
    in_vld,
    in_data,
    out_vld,
    out_data
);
    parameter WIDTH=`WIDTH;
    parameter DEPTH=`DEPTH;

    input clk;
    input reset_;
    input in_vld;
    input [WIDTH-1:0] in_data;
    input out_vld;
    input [WIDTH-1:0] out_data;

    assign tb_reset = (reset_ == 1'b0);

endmodule


bind pipeline pipeline_tb #(
        .WIDTH(`WIDTH),
        .DEPTH(`DEPTH)
    ) pipeline_tb_inst (.*);
"
