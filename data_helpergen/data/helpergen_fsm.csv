design_name,task_id,prompt,ref_solution,testbench
fsm,4_20_40_32_2,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                next_state = S19;
            S1: begin
                next_state = S2;
            S2: begin
                if ((in_C != 'd0)) begin
                    next_state = S10;
                end
                else if ((in_A >= (in_C || in_A))) begin
                    next_state = S12;
                end
                else if ((in_B && in_A)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S2;
                end
            S3: begin
                if ((in_A <= 'd1)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S11;
                end
            S4: begin
                if ((in_C == 'd1)) begin
                    next_state = S13;
                end
                else if (((in_A != 'd0) != in_D)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S19;
                end
            S5: begin
            S6: begin
                next_state = S11;
            S7: begin
                if (~^((in_D || in_A))) begin
                    next_state = S10;
                end
                else begin
                    next_state = S4;
                end
            S8: begin
                if ((in_D >= (in_A && in_C))) begin
                    next_state = S17;
                end
                else begin
                    next_state = S1;
                end
            S9: begin
                if (((in_B && in_C) < ~^(in_A))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S14;
                end
            S10: begin
                if ((in_A && (in_D || in_C))) begin
                    next_state = S7;
                end
                else begin
                    next_state = S16;
                end
            S11: begin
            S12: begin
                next_state = S9;
            S13: begin
                if (!(in_C)) begin
                    next_state = S0;
                end
                else if ((in_A == 'd1)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S10;
                end
            S14: begin
                if ((~^(in_B) || (in_A != 'd1))) begin
                    next_state = S1;
                end
                else begin
                    next_state = S16;
                end
            S15: begin
                if (((in_A != 'd0) == 'd0)) begin
                    next_state = S17;
                end
                else begin
                    next_state = S10;
                end
            S16: begin
                if ((in_B || (in_C && in_A))) begin
                    next_state = S5;
                end
                else begin
                    next_state = S8;
                end
            S17: begin
                if (&(~|(in_D))) begin
                    next_state = S4;
                end
                else if (~^((in_D != in_C))) begin
                    next_state = S12;
                end
                else if (((in_B == 'd1) != (in_A != 'd1))) begin
                    next_state = S18;
                end
                else if (((in_D ^ in_A) != 'd1)) begin
                    next_state = S15;
                end
                else if ((in_C || in_A)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S14;
                end
            S18: begin
                next_state = S7;
            S19: begin
                if ((in_C || in_B)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S6;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_20_40_32_4,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_D == 'd0)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S13;
                end
            S1: begin
                next_state = S10;
            S2: begin
                if ((!(in_D) != 'd0)) begin
                    next_state = S14;
                end
                else if (((in_B && in_A) || ~&(in_D))) begin
                    next_state = S15;
                end
                else if (((in_C ^ in_B) || in_A)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S5;
                end
            S3: begin
                if ((~^(in_C) && (in_A != in_C))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S17;
                end
            S4: begin
                if (((in_D != 'd0) == in_B)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S16;
                end
            S5: begin
                if (((in_D ^ in_C) != 'd0)) begin
                    next_state = S0;
                end
                else if ((in_C && in_A)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S13;
                end
            S6: begin
                next_state = S11;
            S7: begin
                next_state = S14;
            S8: begin
                if (((in_B || in_C) && in_D)) begin
                    next_state = S1;
                end
                else if ((in_A == 'd0)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S5;
                end
            S9: begin
                if (((in_B || in_A) != 'd1)) begin
                    next_state = S18;
                end
                else if ((in_B != in_A)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S15;
                end
            S10: begin
                if (!((in_B && in_D))) begin
                    next_state = S7;
                end
                else if (((in_D == 'd1) == 'd1)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S16;
                end
            S11: begin
                next_state = S2;
            S12: begin
                if (~&((in_D == in_B))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S13;
                end
            S13: begin
                if (^(in_B)) begin
                    next_state = S17;
                end
                else if (((in_A && in_D) == 'd0)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S5;
                end
            S14: begin
                if ((~(in_B) ^ in_C)) begin
                    next_state = S9;
                end
                else if (((in_A || in_D) && (in_C || in_D))) begin
                    next_state = S11;
                end
                else begin
                    next_state = S12;
                end
            S15: begin
            S16: begin
                next_state = S1;
            S17: begin
                if (!(in_C)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S19;
                end
            S18: begin
                next_state = S13;
            S19: begin
                next_state = S4;
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_20_40_64_2,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_D ^ in_A)) begin
                    next_state = S1;
                end
                else if ((in_C >= 'd0)) begin
                    next_state = S8;
                end
                else if (&(in_C)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S12;
                end
            S1: begin
            S2: begin
                if (((in_D ^ in_B) != 'd0)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S9;
                end
            S3: begin
            S4: begin
                if ((~(in_A) || in_D)) begin
                    next_state = S18;
                end
                else begin
                    next_state = S1;
                end
            S5: begin
                next_state = S13;
            S6: begin
                if ((in_D != (in_A || in_C))) begin
                    next_state = S4;
                end
                else if (!(in_A)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S12;
                end
            S7: begin
                if ((&(in_B) == 'd0)) begin
                    next_state = S5;
                end
                else if ((in_C ^ ~&(in_B))) begin
                    next_state = S9;
                end
                else if ((in_A || !(in_D))) begin
                    next_state = S11;
                end
                else begin
                    next_state = S18;
                end
            S8: begin
                if (~(&(in_D))) begin
                    next_state = S0;
                end
                else if ((in_D != (in_B > in_D))) begin
                    next_state = S12;
                end
                else if ((in_C ^ in_A)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S10;
                end
            S9: begin
            S10: begin
            S11: begin
                next_state = S18;
            S12: begin
                if (~|(in_C)) begin
                    next_state = S2;
                end
                else if ((~|(in_D) == 'd1)) begin
                    next_state = S6;
                end
                else if ((in_C && in_B)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S1;
                end
            S13: begin
                if ((in_C == 'd1)) begin
                    next_state = S14;
                end
                else if (^((in_D || in_C))) begin
                    next_state = S12;
                end
                else begin
                    next_state = S11;
                end
            S14: begin
                if (((in_D || in_B) ^ in_A)) begin
                    next_state = S17;
                end
                else if ((^(in_D) == 'd1)) begin
                    next_state = S19;
                end
                else begin
                    next_state = S2;
                end
            S15: begin
                next_state = S16;
            S16: begin
                if (((in_C && in_A) ^ (in_B && in_A))) begin
                    next_state = S7;
                end
                else begin
                    next_state = S3;
                end
            S17: begin
                next_state = S3;
            S18: begin
                next_state = S14;
            S19: begin
                if (|((in_B || in_A))) begin
                    next_state = S10;
                end
                else begin
                    next_state = S16;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_20_40_64_4,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_B && (in_A != 'd0))) begin
                    next_state = S16;
                end
                else begin
                    next_state = S12;
                end
            S1: begin
            S2: begin
                next_state = S17;
            S3: begin
                next_state = S5;
            S4: begin
                if ((in_D || in_B)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S3;
                end
            S5: begin
                next_state = S7;
            S6: begin
                next_state = S2;
            S7: begin
                if (((in_C < 'd1) == in_D)) begin
                    next_state = S8;
                end
                else if ((~&(in_A) && (in_D || in_B))) begin
                    next_state = S13;
                end
                else begin
                    next_state = S1;
                end
            S8: begin
                if ((in_D && (in_C < in_A))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S6;
                end
            S9: begin
                next_state = S11;
            S10: begin
                if ((in_D || (in_A == in_C))) begin
                    next_state = S14;
                end
                else if ((in_B <= 'd0)) begin
                    next_state = S19;
                end
                else begin
                    next_state = S5;
                end
            S11: begin
                next_state = S0;
            S12: begin
                next_state = S7;
            S13: begin
                if (((in_D ^ in_A) || (in_D || in_C))) begin
                    next_state = S2;
                end
                else if (~^(in_B)) begin
                    next_state = S3;
                end
                else if (&((in_B ^ in_D))) begin
                    next_state = S9;
                end
                else begin
                    next_state = S1;
                end
            S14: begin
                next_state = S6;
            S15: begin
                if ((in_D != (in_A && in_B))) begin
                    next_state = S4;
                end
                else if ((in_C != 'd1)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S18;
                end
            S16: begin
                next_state = S12;
            S17: begin
                if (((in_D || in_C) == 'd0)) begin
                    next_state = S5;
                end
                else if ((in_A <= 'd1)) begin
                    next_state = S10;
                end
                else if (((in_A != 'd1) != 'd1)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S0;
                end
            S18: begin
                next_state = S1;
            S19: begin
                if (((in_C ^ in_D) || &(in_B))) begin
                    next_state = S7;
                end
                else if (((in_A == 'd0) || in_D)) begin
                    next_state = S19;
                end
                else begin
                    next_state = S13;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_20_80_32_2,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (((in_B ^ in_D) != 'd0)) begin
                    next_state = S6;
                end
                else if ((in_B && (in_C != 'd0))) begin
                    next_state = S1;
                end
                else if ((in_B ^ ~^(in_C))) begin
                    next_state = S9;
                end
                else if ((in_C && in_B)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S7;
                end
            S1: begin
                if ((in_D == 'd1)) begin
                    next_state = S3;
                end
                else if ((in_A == 'd0)) begin
                    next_state = S7;
                end
                else if (((in_A == 'd0) && in_C)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S11;
                end
            S2: begin
                if (|(in_B)) begin
                    next_state = S18;
                end
                else if ((~^(in_C) < in_B)) begin
                    next_state = S11;
                end
                else if (~&((in_C ^ in_B))) begin
                    next_state = S2;
                end
                else begin
                    next_state = S4;
                end
            S3: begin
                if ((in_D ^ &(in_B))) begin
                    next_state = S10;
                end
                else if (((in_B || in_A) != 'd0)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S1;
                end
            S4: begin
                if ((in_B && (in_D == 'd0))) begin
                    next_state = S9;
                end
                else if (((in_D && in_A) >= (in_C == 'd0))) begin
                    next_state = S18;
                end
                else if (((in_D == 'd1) || (in_C && in_B))) begin
                    next_state = S6;
                end
                else if (((in_D == in_A) != 'd0)) begin
                    next_state = S4;
                end
                else if (&((in_D && in_C))) begin
                    next_state = S10;
                end
                else begin
                    next_state = S1;
                end
            S5: begin
                if ((in_A && (in_D ^ in_C))) begin
                    next_state = S10;
                end
                else begin
                    next_state = S1;
                end
            S6: begin
                if ((in_B == 'd0)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S8;
                end
            S7: begin
                next_state = S4;
            S8: begin
                if (((in_C == in_A) ^ in_C)) begin
                    next_state = S2;
                end
                else if ((in_C < (in_A != in_C))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S15;
                end
            S9: begin
                next_state = S11;
            S10: begin
                if ((in_A == 'd0)) begin
                    next_state = S14;
                end
                else if ((in_A == 'd0)) begin
                    next_state = S4;
                end
                else if (((in_A == 'd0) > in_D)) begin
                    next_state = S19;
                end
                else begin
                    next_state = S16;
                end
            S11: begin
                if ((in_B != 'd1)) begin
                    next_state = S15;
                end
                else if ((in_A != 'd1)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S13;
                end
            S12: begin
                if (((in_D && in_C) || in_B)) begin
                    next_state = S13;
                end
                else if ((in_A && in_D)) begin
                    next_state = S12;
                end
                else if (((in_D == 'd0) || (in_C || in_B))) begin
                    next_state = S16;
                end
                else if (((in_B == in_D) && in_C)) begin
                    next_state = S18;
                end
                else begin
                    next_state = S11;
                end
            S13: begin
                if (((in_A > 'd1) != (in_C && in_D))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S8;
                end
            S14: begin
                if (((in_D < 'd1) ^ in_B)) begin
                    next_state = S5;
                end
                else if (((in_A || in_B) > in_A)) begin
                    next_state = S12;
                end
                else if (((in_A != 'd1) || ~^(in_D))) begin
                    next_state = S16;
                end
                else begin
                    next_state = S10;
                end
            S15: begin
                if (((in_A || in_C) != in_A)) begin
                    next_state = S9;
                end
                else if (!(&(in_A))) begin
                    next_state = S15;
                end
                else if (&(~(in_A))) begin
                    next_state = S3;
                end
                else if (~^(in_A)) begin
                    next_state = S13;
                end
                else if ((in_B > 'd0)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S16;
                end
            S16: begin
                if (~&(~(in_D))) begin
                    next_state = S2;
                end
                else if ((in_C && in_B)) begin
                    next_state = S4;
                end
                else if (~^(in_C)) begin
                    next_state = S8;
                end
                else if (((in_C || in_B) != 'd0)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S16;
                end
            S17: begin
                if ((|(in_A) == 'd1)) begin
                    next_state = S19;
                end
                else if (((in_D == 'd1) ^ (in_C <= in_B))) begin
                    next_state = S16;
                end
                else if ((in_D == 'd0)) begin
                    next_state = S15;
                end
                else if ((in_A || (in_C == 'd0))) begin
                    next_state = S13;
                end
                else begin
                    next_state = S0;
                end
            S18: begin
                if ((in_C || in_D)) begin
                    next_state = S10;
                end
                else if (~&(in_D)) begin
                    next_state = S14;
                end
                else if ((in_D || ~^(in_C))) begin
                    next_state = S17;
                end
                else if ((in_A == (in_B != in_D))) begin
                    next_state = S5;
                end
                else if (((in_A < 'd1) || (in_C < 'd1))) begin
                    next_state = S2;
                end
                else if ((!(in_C) && ~^(in_A))) begin
                    next_state = S9;
                end
                else begin
                    next_state = S11;
                end
            S19: begin
                if (((in_C || in_D) && (in_C && in_B))) begin
                    next_state = S1;
                end
                else begin
                    next_state = S7;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_20_80_32_4,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (((in_C == 'd0) == 'd1)) begin
                    next_state = S4;
                end
                else if (((in_D != 'd1) ^ in_C)) begin
                    next_state = S19;
                end
                else begin
                    next_state = S2;
                end
            S1: begin
                if (~&(in_C)) begin
                    next_state = S17;
                end
                else begin
                    next_state = S10;
                end
            S2: begin
                if (((in_B || in_D) == 'd0)) begin
                    next_state = S13;
                end
                else if (^(~&(in_B))) begin
                    next_state = S19;
                end
                else if ((~|(in_A) && in_B)) begin
                    next_state = S6;
                end
                else if ((in_C == 'd1)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S1;
                end
            S3: begin
                if ((in_C != 'd1)) begin
                    next_state = S16;
                end
                else if ((in_C != 'd1)) begin
                    next_state = S4;
                end
                else if (((in_D && in_B) && in_D)) begin
                    next_state = S12;
                end
                else if ((in_D == (in_C && in_D))) begin
                    next_state = S6;
                end
                else if ((in_D >= 'd0)) begin
                    next_state = S11;
                end
                else if ((|(in_D) == 'd1)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S1;
                end
            S4: begin
                if (((in_D ^ in_B) >= (in_C == 'd1))) begin
                    next_state = S1;
                end
                else if ((in_B ^ ~|(in_C))) begin
                    next_state = S11;
                end
                else begin
                    next_state = S3;
                end
            S5: begin
                if ((in_B != 'd0)) begin
                    next_state = S7;
                end
                else if (((in_A != 'd0) || (in_B != 'd1))) begin
                    next_state = S8;
                end
                else if ((in_C != 'd1)) begin
                    next_state = S10;
                end
                else if (((in_C > in_A) || (in_B || in_D))) begin
                    next_state = S16;
                end
                else if ((in_C && in_A)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S15;
                end
            S6: begin
                next_state = S7;
            S7: begin
                if ((|(in_A) < 'd1)) begin
                    next_state = S5;
                end
                else if (((in_D && in_C) != (in_B == 'd0))) begin
                    next_state = S12;
                end
                else if ((in_B != ~&(in_D))) begin
                    next_state = S7;
                end
                else if (((in_A != in_D) || in_B)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S10;
                end
            S8: begin
                if ((!(in_C) != 'd0)) begin
                    next_state = S15;
                end
                else if (((in_C == 'd1) && (in_B ^ in_A))) begin
                    next_state = S9;
                end
                else begin
                    next_state = S6;
                end
            S9: begin
                if ((in_C <= 'd1)) begin
                    next_state = S2;
                end
                else if ((in_A || (in_D != in_C))) begin
                    next_state = S12;
                end
                else begin
                    next_state = S6;
                end
            S10: begin
                if (((in_A ^ in_B) && in_D)) begin
                    next_state = S2;
                end
                else if (((in_D == in_A) && (in_C ^ in_B))) begin
                    next_state = S6;
                end
                else if ((in_A ^ (in_C != 'd0))) begin
                    next_state = S5;
                end
                else if ((in_A > 'd1)) begin
                    next_state = S16;
                end
                else if (((in_D == in_A) < 'd0)) begin
                    next_state = S4;
                end
                else if ((in_C ^ in_B)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S18;
                end
            S11: begin
                if (^(in_C)) begin
                    next_state = S0;
                end
                else if (((in_C != 'd1) <= 'd1)) begin
                    next_state = S1;
                end
                else if (((in_D <= 'd1) && (in_A || in_D))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S12;
                end
            S12: begin
                if ((in_D == 'd1)) begin
                    next_state = S18;
                end
                else if ((^(in_A) == 'd0)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S8;
                end
            S13: begin
                if ((in_C && in_B)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S10;
                end
            S14: begin
                if (!((in_D >= 'd1))) begin
                    next_state = S8;
                end
                else if (((in_B && in_A) != (in_C < in_A))) begin
                    next_state = S2;
                end
                else if ((in_A || in_C)) begin
                    next_state = S1;
                end
                else if ((in_C && in_B)) begin
                    next_state = S13;
                end
                else if ((in_B ^ in_A)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S16;
                end
            S15: begin
                if (((in_B || in_C) == 'd1)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S16;
                end
            S16: begin
                if (&(in_C)) begin
                    next_state = S11;
                end
                else if (((in_D || in_C) || (in_D != 'd0))) begin
                    next_state = S17;
                end
                else begin
                    next_state = S0;
                end
            S17: begin
                if (((in_B || in_C) < in_B)) begin
                    next_state = S14;
                end
                else if ((in_B != 'd1)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S0;
                end
            S18: begin
                if (((in_D == in_C) == (in_A ^ in_C))) begin
                    next_state = S9;
                end
                else begin
                    next_state = S18;
                end
            S19: begin
                if ((in_B == 'd0)) begin
                    next_state = S3;
                end
                else if (((in_A ^ in_C) == 'd0)) begin
                    next_state = S17;
                end
                else if ((in_B && in_A)) begin
                    next_state = S5;
                end
                else if (((in_C ^ in_A) && in_D)) begin
                    next_state = S18;
                end
                else begin
                    next_state = S10;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_20_80_64_2,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (((in_B ^ in_D) && (in_B ^ in_C))) begin
                    next_state = S9;
                end
                else if ((in_A != (in_B != 'd1))) begin
                    next_state = S1;
                end
                else begin
                    next_state = S17;
                end
            S1: begin
                if ((in_B && (in_C ^ in_D))) begin
                    next_state = S13;
                end
                else if (&((in_A || in_D))) begin
                    next_state = S10;
                end
                else if ((in_D == 'd0)) begin
                    next_state = S1;
                end
                else if (((in_A == 'd1) || ~&(in_B))) begin
                    next_state = S6;
                end
                else begin
                    next_state = S17;
                end
            S2: begin
                if (((in_A ^ in_B) ^ in_A)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S9;
                end
            S3: begin
                if ((in_D == 'd0)) begin
                    next_state = S6;
                end
                else if (~((in_A || in_C))) begin
                    next_state = S7;
                end
                else begin
                    next_state = S3;
                end
            S4: begin
                if ((in_A && (in_B || in_A))) begin
                    next_state = S2;
                end
                else if (((in_B ^ in_C) == 'd1)) begin
                    next_state = S19;
                end
                else if (~&(in_B)) begin
                    next_state = S17;
                end
                else if ((in_A != 'd0)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S1;
                end
            S5: begin
                if ((in_D != 'd0)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S3;
                end
            S6: begin
                if (~|(in_B)) begin
                    next_state = S4;
                end
                else if ((in_D || (in_A && in_D))) begin
                    next_state = S9;
                end
                else if ((in_D == 'd0)) begin
                    next_state = S13;
                end
                else if (~&((in_D == 'd0))) begin
                    next_state = S16;
                end
                else if (((in_D && in_A) && in_D)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S17;
                end
            S7: begin
                if ((in_B == (in_D || in_C))) begin
                    next_state = S1;
                end
                else if ((in_C != 'd0)) begin
                    next_state = S7;
                end
                else if ((in_A >= 'd1)) begin
                    next_state = S4;
                end
                else if ((in_D && in_A)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S10;
                end
            S8: begin
                if ((~&(in_A) <= |(in_C))) begin
                    next_state = S0;
                end
                else if ((in_A < 'd1)) begin
                    next_state = S11;
                end
                else if ((in_A ^ ~&(in_C))) begin
                    next_state = S12;
                end
                else begin
                    next_state = S19;
                end
            S9: begin
                if (((in_D != 'd0) <= 'd1)) begin
                    next_state = S18;
                end
                else begin
                    next_state = S12;
                end
            S10: begin
                if ((in_D || !(in_A))) begin
                    next_state = S5;
                end
                else begin
                    next_state = S0;
                end
            S11: begin
                if (((in_D || in_C) ^ in_A)) begin
                    next_state = S3;
                end
                else if ((in_C ^ in_A)) begin
                    next_state = S19;
                end
                else begin
                    next_state = S1;
                end
            S12: begin
                if (((in_D || in_C) == 'd0)) begin
                    next_state = S18;
                end
                else if (~^(in_A)) begin
                    next_state = S5;
                end
                else if (((in_B == 'd0) == &(in_D))) begin
                    next_state = S7;
                end
                else if (((in_A || in_B) || in_A)) begin
                    next_state = S3;
                end
                else if ((in_C && in_D)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S4;
                end
            S13: begin
                if ((in_D > 'd0)) begin
                    next_state = S8;
                end
                else if (((in_D != 'd0) || in_C)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S10;
                end
            S14: begin
                if ((in_D == in_A)) begin
                    next_state = S6;
                end
                else if (((in_B && in_C) != 'd1)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S19;
                end
            S15: begin
                if ((in_A > 'd1)) begin
                    next_state = S7;
                end
                else if ((in_D != 'd0)) begin
                    next_state = S8;
                end
                else if (((in_B && in_A) && (in_D == 'd1))) begin
                    next_state = S14;
                end
                else if (~|(in_D)) begin
                    next_state = S19;
                end
                else if (((in_B == 'd1) == in_D)) begin
                    next_state = S2;
                end
                else if ((in_A < in_D)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S18;
                end
            S16: begin
                if (((in_B || in_C) || in_A)) begin
                    next_state = S10;
                end
                else if ((in_B && (in_A != 'd0))) begin
                    next_state = S12;
                end
                else if (((in_D != in_B) != 'd0)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S16;
                end
            S17: begin
                if (((in_C != in_D) ^ in_B)) begin
                    next_state = S15;
                end
                else if (~^(in_D)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S16;
                end
            S18: begin
                if (^((in_A > 'd1))) begin
                    next_state = S8;
                end
                else if (((in_D && in_C) != (in_A != in_C))) begin
                    next_state = S17;
                end
                else if ((in_B ^ (in_A && in_D))) begin
                    next_state = S18;
                end
                else begin
                    next_state = S15;
                end
            S19: begin
                if (~|((in_A && in_B))) begin
                    next_state = S17;
                end
                else if ((in_D == 'd0)) begin
                    next_state = S11;
                end
                else if (((in_A && in_D) == 'd1)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S0;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_20_80_64_4,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (((in_A || in_C) && in_A)) begin
                    next_state = S8;
                end
                else if (((in_C != 'd0) <= (in_B != in_D))) begin
                    next_state = S17;
                end
                else if (!(in_B)) begin
                    next_state = S19;
                end
                else if (!((in_D ^ in_B))) begin
                    next_state = S10;
                end
                else begin
                    next_state = S15;
                end
            S1: begin
                if (((in_C == 'd0) == 'd1)) begin
                    next_state = S9;
                end
                else if ((in_D ^ (in_C == 'd0))) begin
                    next_state = S7;
                end
                else if (((in_D != 'd0) == in_C)) begin
                    next_state = S3;
                end
                else if (((in_A && in_D) >= 'd0)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S17;
                end
            S2: begin
                if ((in_C == in_D)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S7;
                end
            S3: begin
                if ((in_A || in_D)) begin
                    next_state = S10;
                end
                else if ((in_B ^ !(in_C))) begin
                    next_state = S1;
                end
                else if (~^((in_C ^ in_A))) begin
                    next_state = S17;
                end
                else if ((in_C || in_B)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S11;
                end
            S4: begin
                if ((in_D != 'd1)) begin
                    next_state = S3;
                end
                else if ((~^(in_B) == 'd1)) begin
                    next_state = S17;
                end
                else if ((in_C != in_D)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S14;
                end
            S5: begin
                if ((|(in_C) == 'd0)) begin
                    next_state = S3;
                end
                else if ((in_B == (in_C && in_B))) begin
                    next_state = S2;
                end
                else if ((in_D == 'd1)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S7;
                end
            S6: begin
                if (((in_A || in_B) ^ (in_C == 'd0))) begin
                    next_state = S14;
                end
                else if ((in_C || in_D)) begin
                    next_state = S7;
                end
                else if (((in_C == 'd1) ^ (in_B == 'd0))) begin
                    next_state = S10;
                end
                else if (~^((in_C != 'd1))) begin
                    next_state = S5;
                end
                else if (((in_B ^ in_D) || in_C)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S6;
                end
            S7: begin
                if ((in_A <= (in_B == 'd0))) begin
                    next_state = S1;
                end
                else if ((~(in_C) || in_A)) begin
                    next_state = S19;
                end
                else if (|((in_D || in_B))) begin
                    next_state = S6;
                end
                else begin
                    next_state = S7;
                end
            S8: begin
                if (((in_C ^ in_D) == 'd0)) begin
                    next_state = S18;
                end
                else if ((in_B && in_A)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S13;
                end
            S9: begin
                if (((in_A == in_B) || ~(in_D))) begin
                    next_state = S2;
                end
                else if ((in_C && (in_B != 'd1))) begin
                    next_state = S6;
                end
                else begin
                    next_state = S8;
                end
            S10: begin
                if ((in_B || in_C)) begin
                    next_state = S16;
                end
                else if ((in_D || in_A)) begin
                    next_state = S18;
                end
                else if ((^(in_D) == 'd1)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S5;
                end
            S11: begin
                if (&(in_B)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S19;
                end
            S12: begin
                if ((in_A != 'd0)) begin
                    next_state = S4;
                end
                else if ((in_C ^ (in_D ^ in_B))) begin
                    next_state = S11;
                end
                else if (((in_C >= 'd1) || (in_B || in_D))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S9;
                end
            S13: begin
                if ((in_C || in_A)) begin
                    next_state = S17;
                end
                else begin
                    next_state = S18;
                end
            S14: begin
                if ((in_B < 'd1)) begin
                    next_state = S6;
                end
                else if (^(in_D)) begin
                    next_state = S15;
                end
                else if (((in_A ^ in_C) < (in_B || in_A))) begin
                    next_state = S14;
                end
                else if ((in_C ^ (in_B ^ in_D))) begin
                    next_state = S7;
                end
                else begin
                    next_state = S9;
                end
            S15: begin
                if (&(in_D)) begin
                    next_state = S13;
                end
                else if ((~^(in_D) && in_A)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S2;
                end
            S16: begin
                if ((^(in_D) < 'd1)) begin
                    next_state = S0;
                end
                else if (~&(in_A)) begin
                    next_state = S5;
                end
                else if (!(in_B)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S17;
                end
            S17: begin
                if (((in_C == in_A) ^ in_C)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S19;
                end
            S18: begin
                if (~|((in_A <= 'd1))) begin
                    next_state = S2;
                end
                else if (((in_D == 'd0) != 'd0)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S17;
                end
            S19: begin
                if (((in_C > 'd0) && in_D)) begin
                    next_state = S11;
                end
                else if (((in_A == 'd1) != 'd1)) begin
                    next_state = S16;
                end
                else if ((in_B && in_C)) begin
                    next_state = S15;
                end
                else if (((in_A != in_D) || (in_B ^ in_D))) begin
                    next_state = S4;
                end
                else begin
                    next_state = S14;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_40_40_32_2,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
            S1: begin
            S2: begin
                if ((in_B ^ in_A)) begin
                    next_state = S25;
                end
                else if (((in_D != 'd0) ^ in_A)) begin
                    next_state = S29;
                end
                else begin
                    next_state = S34;
                end
            S3: begin
            S4: begin
            S5: begin
                next_state = S2;
            S6: begin
            S7: begin
            S8: begin
                if (((in_D ^ in_B) && in_A)) begin
                    next_state = S20;
                end
                else begin
                    next_state = S33;
                end
            S9: begin
            S10: begin
                if (((in_D != 'd0) && (in_C ^ in_A))) begin
                    next_state = S5;
                end
                else if (((in_B != 'd0) > 'd1)) begin
                    next_state = S11;
                end
                else if ((in_B == |(in_C))) begin
                    next_state = S24;
                end
                else begin
                    next_state = S35;
                end
            S11: begin
            S12: begin
                if (|((in_D || in_C))) begin
                    next_state = S18;
                end
                else begin
                    next_state = S31;
                end
            S13: begin
                if (((in_C && in_B) || in_C)) begin
                    next_state = S4;
                end
                else if (~&((in_C > 'd1))) begin
                    next_state = S23;
                end
                else begin
                    next_state = S37;
                end
            S14: begin
                next_state = S1;
            S15: begin
                if (((in_D == 'd0) || in_C)) begin
                    next_state = S6;
                end
                else if ((in_A ^ in_C)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S17;
                end
            S16: begin
            S17: begin
            S18: begin
                if ((in_D == (in_B && in_A))) begin
                    next_state = S12;
                end
                else if (((in_B > 'd0) ^ (in_C && in_B))) begin
                    next_state = S22;
                end
                else begin
                    next_state = S30;
                end
            S19: begin
            S20: begin
                if (((in_C == 'd0) != (in_D && in_A))) begin
                    next_state = S9;
                end
                else if ((in_B == 'd1)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S26;
                end
            S21: begin
                next_state = S27;
            S22: begin
            S23: begin
                if ((in_B == 'd0)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S38;
                end
            S24: begin
                if (((in_B >= 'd1) || in_A)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S15;
                end
            S25: begin
            S26: begin
                if (((in_A || in_B) ^ (in_C || in_B))) begin
                    next_state = S14;
                end
                else begin
                    next_state = S21;
                end
            S27: begin
                if (~|((in_D ^ in_C))) begin
                    next_state = S3;
                end
                else if (((in_C != 'd1) || (in_D && in_B))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S19;
                end
            S28: begin
            S29: begin
                next_state = S39;
            S30: begin
            S31: begin
                if (((in_D ^ in_A) > 'd0)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S32;
                end
            S32: begin
            S33: begin
            S34: begin
            S35: begin
                next_state = S36;
            S36: begin
            S37: begin
            S38: begin
            S39: begin
                next_state = S28;
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_40_40_32_4,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                next_state = S14;
            S1: begin
                next_state = S23;
            S2: begin
                next_state = S8;
            S3: begin
            S4: begin
            S5: begin
            S6: begin
            S7: begin
                if (((in_C <= 'd1) || (in_B < 'd0))) begin
                    next_state = S4;
                end
                else begin
                    next_state = S18;
                end
            S8: begin
            S9: begin
            S10: begin
                next_state = S22;
            S11: begin
                next_state = S27;
            S12: begin
                if ((in_C != 'd1)) begin
                    next_state = S6;
                end
                else if ((~&(in_C) ^ ~&(in_D))) begin
                    next_state = S13;
                end
                else begin
                    next_state = S31;
                end
            S13: begin
                next_state = S19;
            S14: begin
            S15: begin
                next_state = S16;
            S16: begin
            S17: begin
                next_state = S33;
            S18: begin
                if ((in_A != 'd0)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S30;
                end
            S19: begin
                if ((in_A > 'd1)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S21;
                end
            S20: begin
                if ((in_C != 'd0)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S36;
                end
            S21: begin
                next_state = S2;
            S22: begin
                next_state = S34;
            S23: begin
                next_state = S25;
            S24: begin
                if (~&(in_D)) begin
                    next_state = S5;
                end
                else if (|(in_D)) begin
                    next_state = S12;
                end
                else if (((in_D == 'd0) && (in_C && in_D))) begin
                    next_state = S15;
                end
                else begin
                    next_state = S37;
                end
            S25: begin
                next_state = S20;
            S26: begin
                next_state = S29;
            S27: begin
                next_state = S24;
            S28: begin
                next_state = S10;
            S29: begin
            S30: begin
                if (((in_D && in_A) != 'd1)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S26;
                end
            S31: begin
                next_state = S1;
            S32: begin
                next_state = S7;
            S33: begin
            S34: begin
                next_state = S17;
            S35: begin
            S36: begin
                next_state = S32;
            S37: begin
            S38: begin
                if (&((in_A != 'd0))) begin
                    next_state = S28;
                end
                else begin
                    next_state = S39;
                end
            S39: begin
                if (((in_D ^ in_B) == 'd0)) begin
                    next_state = S35;
                end
                else begin
                    next_state = S38;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_40_40_64_2,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
            S1: begin
                next_state = S16;
            S2: begin
                next_state = S7;
            S3: begin
                if (((in_D != 'd0) && (in_B ^ in_C))) begin
                    next_state = S6;
                end
                else begin
                    next_state = S30;
                end
            S4: begin
            S5: begin
                if (&(~&(in_C))) begin
                    next_state = S15;
                end
                else if (!((in_D && in_B))) begin
                    next_state = S18;
                end
                else begin
                    next_state = S31;
                end
            S6: begin
                if (~|((in_A == in_D))) begin
                    next_state = S19;
                end
                else begin
                    next_state = S34;
                end
            S7: begin
                if (((in_D == 'd1) <= (in_B || in_D))) begin
                    next_state = S28;
                end
                else begin
                    next_state = S33;
                end
            S8: begin
            S9: begin
                next_state = S32;
            S10: begin
                next_state = S25;
            S11: begin
                next_state = S38;
            S12: begin
            S13: begin
            S14: begin
                next_state = S24;
            S15: begin
                if ((in_C == in_B)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S20;
                end
            S16: begin
                if ((|(in_B) || (in_A == 'd0))) begin
                    next_state = S1;
                end
                else begin
                    next_state = S17;
                end
            S17: begin
            S18: begin
                next_state = S12;
            S19: begin
                next_state = S13;
            S20: begin
                if ((in_A && ~|(in_B))) begin
                    next_state = S23;
                end
                else begin
                    next_state = S39;
                end
            S21: begin
            S22: begin
                if (~((in_D && in_A))) begin
                    next_state = S4;
                end
                else begin
                    next_state = S29;
                end
            S23: begin
            S24: begin
                if ((in_B && in_C)) begin
                    next_state = S2;
                end
                else if (((in_D ^ in_A) ^ in_B)) begin
                    next_state = S35;
                end
                else begin
                    next_state = S37;
                end
            S25: begin
            S26: begin
                next_state = S27;
            S27: begin
                next_state = S10;
            S28: begin
            S29: begin
                next_state = S9;
            S30: begin
            S31: begin
                next_state = S36;
            S32: begin
                if (~^(in_A)) begin
                    next_state = S0;
                end
                else if (~(in_C)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S26;
                end
            S33: begin
            S34: begin
            S35: begin
                if (~|(in_B)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S21;
                end
            S36: begin
            S37: begin
                next_state = S22;
            S38: begin
                next_state = S5;
            S39: begin
                next_state = S14;
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_40_40_64_4,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (((in_C && in_A) ^ in_C)) begin
                    next_state = S22;
                end
                else begin
                    next_state = S25;
                end
            S1: begin
                if (~&((in_C != in_B))) begin
                    next_state = S7;
                end
                else begin
                    next_state = S37;
                end
            S2: begin
                if ((in_B && in_C)) begin
                    next_state = S35;
                end
                else begin
                    next_state = S38;
                end
            S3: begin
            S4: begin
            S5: begin
                next_state = S21;
            S6: begin
            S7: begin
                next_state = S15;
            S8: begin
                next_state = S28;
            S9: begin
            S10: begin
                if (~&(|(in_A))) begin
                    next_state = S9;
                end
                else begin
                    next_state = S31;
                end
            S11: begin
                if (((in_B == 'd1) != (in_C ^ in_B))) begin
                    next_state = S29;
                end
                else begin
                    next_state = S36;
                end
            S12: begin
                if (((in_C && in_D) == 'd1)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S32;
                end
            S13: begin
                if (((in_C != in_A) || ~&(in_D))) begin
                    next_state = S2;
                end
                else begin
                    next_state = S23;
                end
            S14: begin
                next_state = S26;
            S15: begin
                if ((in_A != (in_B || in_D))) begin
                    next_state = S1;
                end
                else begin
                    next_state = S11;
                end
            S16: begin
            S17: begin
            S18: begin
                if ((in_A ^ (in_D != 'd0))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S10;
                end
            S19: begin
                next_state = S24;
            S20: begin
            S21: begin
                next_state = S5;
            S22: begin
                next_state = S3;
            S23: begin
            S24: begin
                next_state = S30;
            S25: begin
            S26: begin
                if ((in_A || ^(in_D))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S14;
                end
            S27: begin
                if ((in_D && in_B)) begin
                    next_state = S16;
                end
                else if (&((in_B >= 'd0))) begin
                    next_state = S19;
                end
                else if (~((in_C != in_B))) begin
                    next_state = S20;
                end
                else begin
                    next_state = S33;
                end
            S28: begin
            S29: begin
                next_state = S18;
            S30: begin
                next_state = S17;
            S31: begin
                next_state = S4;
            S32: begin
            S33: begin
                if (((in_D > 'd1) != 'd1)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S34;
                end
            S34: begin
            S35: begin
            S36: begin
            S37: begin
            S38: begin
                if ((!(in_A) && in_C)) begin
                    next_state = S13;
                end
                else if (^(in_A)) begin
                    next_state = S27;
                end
                else begin
                    next_state = S39;
                end
            S39: begin
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_40_80_32_2,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                next_state = S18;
            S1: begin
                if (((in_B != 'd1) ^ in_C)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S18;
                end
            S2: begin
                next_state = S15;
            S3: begin
                next_state = S35;
            S4: begin
                if (!((in_C ^ in_D))) begin
                    next_state = S7;
                end
                else if (((in_C != 'd0) == 'd0)) begin
                    next_state = S22;
                end
                else if (((in_B ^ in_C) >= in_D)) begin
                    next_state = S36;
                end
                else if ((in_B == 'd0)) begin
                    next_state = S32;
                end
                else begin
                    next_state = S39;
                end
            S5: begin
                if (~&((in_C || in_B))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S38;
                end
            S6: begin
                if ((in_D != (in_C == in_D))) begin
                    next_state = S4;
                end
                else if ((|(in_D) != 'd0)) begin
                    next_state = S33;
                end
                else if ((in_D != 'd0)) begin
                    next_state = S10;
                end
                else if ((in_B && (in_C != 'd0))) begin
                    next_state = S29;
                end
                else begin
                    next_state = S1;
                end
            S7: begin
                if (~(|(in_D))) begin
                    next_state = S25;
                end
                else begin
                    next_state = S30;
                end
            S8: begin
                if ((~&(in_C) && in_A)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S16;
                end
            S9: begin
            S10: begin
                if (~&(in_B)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S5;
                end
            S11: begin
            S12: begin
                if ((in_A || (in_D || in_C))) begin
                    next_state = S19;
                end
                else if ((in_A >= (in_D == 'd1))) begin
                    next_state = S30;
                end
                else begin
                    next_state = S10;
                end
            S13: begin
                if ((in_A ^ in_B)) begin
                    next_state = S21;
                end
                else begin
                    next_state = S22;
                end
            S14: begin
                if (((in_D == 'd0) && (in_C || in_A))) begin
                    next_state = S0;
                end
                else if (~(in_B)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S7;
                end
            S15: begin
                if ((^(in_A) != 'd0)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S32;
                end
            S16: begin
                if ((in_A == 'd1)) begin
                    next_state = S1;
                end
                else if ((|(in_C) || (in_B && in_A))) begin
                    next_state = S13;
                end
                else begin
                    next_state = S20;
                end
            S17: begin
                next_state = S23;
            S18: begin
                next_state = S2;
            S19: begin
                if (~&(in_C)) begin
                    next_state = S2;
                end
                else if (~^(in_C)) begin
                    next_state = S27;
                end
                else begin
                    next_state = S39;
                end
            S20: begin
                next_state = S37;
            S21: begin
                next_state = S38;
            S22: begin
                next_state = S14;
            S23: begin
                next_state = S11;
            S24: begin
                if (((in_C == 'd1) ^ (in_D && in_C))) begin
                    next_state = S29;
                end
                else if (((in_A ^ in_B) || in_D)) begin
                    next_state = S31;
                end
                else if (~^(in_D)) begin
                    next_state = S30;
                end
                else if ((in_D == in_C)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S1;
                end
            S25: begin
                next_state = S13;
            S26: begin
                if (((in_A && in_B) || (in_A == in_C))) begin
                    next_state = S34;
                end
                else if (((in_B == in_A) != in_B)) begin
                    next_state = S21;
                end
                else if (((in_C && in_D) != (in_C != 'd0))) begin
                    next_state = S19;
                end
                else begin
                    next_state = S17;
                end
            S27: begin
                next_state = S36;
            S28: begin
                if (~|((in_D == in_C))) begin
                    next_state = S12;
                end
                else begin
                    next_state = S20;
                end
            S29: begin
            S30: begin
                if ((in_A && (in_B && in_D))) begin
                    next_state = S6;
                end
                else if (((in_B ^ in_A) != in_D)) begin
                    next_state = S15;
                end
                else if ((in_C == in_B)) begin
                    next_state = S28;
                end
                else begin
                    next_state = S26;
                end
            S31: begin
                next_state = S23;
            S32: begin
                if (^(in_D)) begin
                    next_state = S9;
                end
                else if (((in_C ^ in_D) == in_B)) begin
                    next_state = S34;
                end
                else begin
                    next_state = S25;
                end
            S33: begin
            S34: begin
                next_state = S24;
            S35: begin
                next_state = S5;
            S36: begin
                next_state = S39;
            S37: begin
            S38: begin
                if ((in_D == 'd1)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S3;
                end
            S39: begin
                if ((in_A || (in_B == 'd0))) begin
                    next_state = S17;
                end
                else if ((in_C || &(in_D))) begin
                    next_state = S26;
                end
                else begin
                    next_state = S1;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_40_80_32_4,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_A == 'd1)) begin
                    next_state = S14;
                end
                else if (((in_C ^ in_D) == 'd1)) begin
                    next_state = S31;
                end
                else if ((in_C == in_D)) begin
                    next_state = S39;
                end
                else begin
                    next_state = S18;
                end
            S1: begin
                if (((in_D == 'd1) != 'd0)) begin
                    next_state = S24;
                end
                else if ((in_A <= 'd1)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S1;
                end
            S2: begin
                next_state = S4;
            S3: begin
                next_state = S23;
            S4: begin
                if ((^(in_A) || (in_B && in_A))) begin
                    next_state = S8;
                end
                else if (((in_B || in_D) ^ (in_B || in_A))) begin
                    next_state = S36;
                end
                else begin
                    next_state = S13;
                end
            S5: begin
                next_state = S34;
            S6: begin
                if (((in_C >= in_A) != 'd1)) begin
                    next_state = S16;
                end
                else if (((in_A || in_C) != 'd0)) begin
                    next_state = S28;
                end
                else if ((in_A && (in_B == in_D))) begin
                    next_state = S17;
                end
                else begin
                    next_state = S7;
                end
            S7: begin
                next_state = S9;
            S8: begin
                if (((in_B || in_A) || in_D)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S18;
                end
            S9: begin
                next_state = S38;
            S10: begin
                next_state = S35;
            S11: begin
            S12: begin
                next_state = S23;
            S13: begin
                if ((in_A || in_D)) begin
                    next_state = S0;
                end
                else if (((in_D > 'd1) ^ in_B)) begin
                    next_state = S7;
                end
                else if ((in_C != 'd1)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S1;
                end
            S14: begin
                if ((in_C || in_A)) begin
                    next_state = S9;
                end
                else if (~|(in_B)) begin
                    next_state = S11;
                end
                else if (((in_D && in_C) ^ ~(in_B))) begin
                    next_state = S37;
                end
                else if ((in_A != in_C)) begin
                    next_state = S25;
                end
                else begin
                    next_state = S15;
                end
            S15: begin
                if (|((in_B || in_D))) begin
                    next_state = S36;
                end
                else begin
                    next_state = S15;
                end
            S16: begin
                next_state = S26;
            S17: begin
                if ((in_A || in_D)) begin
                    next_state = S10;
                end
                else if ((&(in_B) != ~(in_C))) begin
                    next_state = S15;
                end
                else begin
                    next_state = S27;
                end
            S18: begin
                next_state = S18;
            S19: begin
                if (((in_B <= in_C) ^ in_B)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S29;
                end
            S20: begin
                if (((in_D && in_C) != in_B)) begin
                    next_state = S21;
                end
                else begin
                    next_state = S39;
                end
            S21: begin
                if ((in_B >= 'd0)) begin
                    next_state = S36;
                end
                else begin
                    next_state = S32;
                end
            S22: begin
                next_state = S15;
            S23: begin
                if (|(^(in_C))) begin
                    next_state = S10;
                end
                else if (((in_B && in_C) || in_B)) begin
                    next_state = S11;
                end
                else if ((in_A ^ in_B)) begin
                    next_state = S37;
                end
                else begin
                    next_state = S25;
                end
            S24: begin
                if ((in_B == 'd1)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S28;
                end
            S25: begin
                if (&((in_C != 'd0))) begin
                    next_state = S30;
                end
                else if (((in_A != 'd1) && in_C)) begin
                    next_state = S33;
                end
                else begin
                    next_state = S28;
                end
            S26: begin
            S27: begin
                if ((in_D && in_A)) begin
                    next_state = S20;
                end
                else if (!(in_A)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S5;
                end
            S28: begin
                if (((in_B != in_D) ^ in_B)) begin
                    next_state = S18;
                end
                else begin
                    next_state = S29;
                end
            S29: begin
            S30: begin
            S31: begin
                if (~(in_C)) begin
                    next_state = S17;
                end
                else begin
                    next_state = S2;
                end
            S32: begin
                next_state = S1;
            S33: begin
                if (((in_D == 'd0) ^ in_A)) begin
                    next_state = S4;
                end
                else if (((in_C != in_B) != 'd0)) begin
                    next_state = S22;
                end
                else if (((in_D ^ in_C) != (in_A || in_D))) begin
                    next_state = S25;
                end
                else begin
                    next_state = S24;
                end
            S34: begin
                next_state = S32;
            S35: begin
                if ((in_D && in_B)) begin
                    next_state = S2;
                end
                else if (!((in_B != in_D))) begin
                    next_state = S13;
                end
                else begin
                    next_state = S24;
                end
            S36: begin
            S37: begin
                next_state = S3;
            S38: begin
                next_state = S20;
            S39: begin
                if ((in_B != 'd0)) begin
                    next_state = S6;
                end
                else if ((in_C ^ (in_A || in_D))) begin
                    next_state = S19;
                end
                else begin
                    next_state = S17;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_40_80_64_2,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (((in_D && in_A) && in_D)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S28;
                end
            S1: begin
                next_state = S32;
            S2: begin
                next_state = S27;
            S3: begin
                next_state = S12;
            S4: begin
                next_state = S20;
            S5: begin
                if (((in_D ^ in_A) && in_B)) begin
                    next_state = S25;
                end
                else begin
                    next_state = S34;
                end
            S6: begin
            S7: begin
                if (~((in_D >= 'd0))) begin
                    next_state = S22;
                end
                else begin
                    next_state = S26;
                end
            S8: begin
                next_state = S2;
            S9: begin
                next_state = S37;
            S10: begin
                if (((in_D && in_A) || (in_B <= 'd0))) begin
                    next_state = S1;
                end
                else begin
                    next_state = S31;
                end
            S11: begin
                if ((in_A || (in_C && in_A))) begin
                    next_state = S10;
                end
                else if ((in_D != 'd1)) begin
                    next_state = S36;
                end
                else begin
                    next_state = S25;
                end
            S12: begin
                if (((in_C ^ in_A) && (in_B ^ in_C))) begin
                    next_state = S25;
                end
                else if ((in_D && (in_B ^ in_A))) begin
                    next_state = S26;
                end
                else if ((~|(in_C) ^ (in_A && in_C))) begin
                    next_state = S33;
                end
                else begin
                    next_state = S2;
                end
            S13: begin
                next_state = S23;
            S14: begin
                next_state = S2;
            S15: begin
                if ((in_D && (in_A ^ in_C))) begin
                    next_state = S35;
                end
                else begin
                    next_state = S3;
                end
            S16: begin
                if (((in_A == in_C) != 'd1)) begin
                    next_state = S18;
                end
                else begin
                    next_state = S37;
                end
            S17: begin
                next_state = S2;
            S18: begin
                next_state = S18;
            S19: begin
            S20: begin
                next_state = S9;
            S21: begin
                if (((in_C || in_A) ^ (in_B > 'd0))) begin
                    next_state = S17;
                end
                else begin
                    next_state = S23;
                end
            S22: begin
                if ((in_D == 'd0)) begin
                    next_state = S31;
                end
                else begin
                    next_state = S36;
                end
            S23: begin
                if (&(in_B)) begin
                    next_state = S5;
                end
                else if ((in_A == 'd1)) begin
                    next_state = S20;
                end
                else if (((in_B == 'd1) || in_C)) begin
                    next_state = S27;
                end
                else if (((in_D ^ in_A) == 'd0)) begin
                    next_state = S30;
                end
                else if (~&((in_B != 'd0))) begin
                    next_state = S31;
                end
                else begin
                    next_state = S34;
                end
            S24: begin
                next_state = S39;
            S25: begin
                if (((in_A != 'd1) && (in_D && in_C))) begin
                    next_state = S24;
                end
                else if ((in_D && in_A)) begin
                    next_state = S31;
                end
                else begin
                    next_state = S32;
                end
            S26: begin
                if (~^((in_B != 'd1))) begin
                    next_state = S15;
                end
                else if (~^((in_C >= 'd0))) begin
                    next_state = S38;
                end
                else if (((in_A != 'd0) || in_C)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S24;
                end
            S27: begin
                if (((in_A || in_D) || (in_B > 'd0))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S16;
                end
            S28: begin
                next_state = S33;
            S29: begin
                if ((in_C == 'd1)) begin
                    next_state = S4;
                end
                else if (^((in_C ^ in_B))) begin
                    next_state = S19;
                end
                else if (~&(in_D)) begin
                    next_state = S21;
                end
                else begin
                    next_state = S18;
                end
            S30: begin
            S31: begin
                next_state = S12;
            S32: begin
                if (~&(in_C)) begin
                    next_state = S24;
                end
                else begin
                    next_state = S39;
                end
            S33: begin
                if ((in_A == 'd0)) begin
                    next_state = S32;
                end
                else if (!((in_A && in_C))) begin
                    next_state = S2;
                end
                else begin
                    next_state = S24;
                end
            S34: begin
                if ((in_A && in_C)) begin
                    next_state = S38;
                end
                else begin
                    next_state = S22;
                end
            S35: begin
                next_state = S6;
            S36: begin
                if (((in_A != 'd0) <= 'd0)) begin
                    next_state = S7;
                end
                else if ((in_B ^ (in_D == 'd0))) begin
                    next_state = S26;
                end
                else if (((in_A && in_D) == 'd0)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S24;
                end
            S37: begin
                if (!(in_D)) begin
                    next_state = S3;
                end
                else if ((~&(in_B) && ~&(in_A))) begin
                    next_state = S8;
                end
                else if ((in_A ^ (in_D == in_C))) begin
                    next_state = S21;
                end
                else begin
                    next_state = S29;
                end
            S38: begin
                next_state = S1;
            S39: begin
                if ((~&(in_C) != 'd1)) begin
                    next_state = S13;
                end
                else if ((in_C ^ in_B)) begin
                    next_state = S14;
                end
                else if (!(in_D)) begin
                    next_state = S34;
                end
                else begin
                    next_state = S18;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,4_40_80_64_4,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                next_state = S20;
            S1: begin
                if (&((in_A && in_B))) begin
                    next_state = S10;
                end
                else begin
                    next_state = S13;
                end
            S2: begin
                next_state = S27;
            S3: begin
            S4: begin
                if (((in_D ^ in_A) != 'd1)) begin
                    next_state = S29;
                end
                else begin
                    next_state = S4;
                end
            S5: begin
                if ((in_A == 'd0)) begin
                    next_state = S36;
                end
                else begin
                    next_state = S17;
                end
            S6: begin
                if ((in_A ^ (in_C || in_A))) begin
                    next_state = S25;
                end
                else if ((in_C != 'd1)) begin
                    next_state = S30;
                end
                else begin
                    next_state = S38;
                end
            S7: begin
                if ((in_D && in_A)) begin
                    next_state = S36;
                end
                else if (~(in_C)) begin
                    next_state = S28;
                end
                else begin
                    next_state = S13;
                end
            S8: begin
                next_state = S15;
            S9: begin
                if ((!(in_B) != in_A)) begin
                    next_state = S2;
                end
                else if ((~|(in_A) ^ (in_D != in_A))) begin
                    next_state = S3;
                end
                else if (~&(~(in_C))) begin
                    next_state = S4;
                end
                else if (((in_B ^ in_A) == 'd1)) begin
                    next_state = S30;
                end
                else begin
                    next_state = S15;
                end
            S10: begin
                if ((~(in_A) && in_D)) begin
                    next_state = S39;
                end
                else begin
                    next_state = S26;
                end
            S11: begin
                next_state = S23;
            S12: begin
                if (((in_B > in_D) == ~(in_C))) begin
                    next_state = S38;
                end
                else begin
                    next_state = S31;
                end
            S13: begin
                next_state = S22;
            S14: begin
                next_state = S12;
            S15: begin
                if (((in_A || in_D) != (in_A ^ in_B))) begin
                    next_state = S6;
                end
                else if (((in_A || in_C) == 'd0)) begin
                    next_state = S17;
                end
                else begin
                    next_state = S5;
                end
            S16: begin
                next_state = S0;
            S17: begin
                if (((in_A == 'd0) || in_C)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S15;
                end
            S18: begin
                next_state = S31;
            S19: begin
                if (((in_A >= 'd0) ^ in_C)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S15;
                end
            S20: begin
            S21: begin
                if (((in_C && in_B) == in_D)) begin
                    next_state = S32;
                end
                else if ((in_B != (in_C != 'd0))) begin
                    next_state = S34;
                end
                else if (&((in_C ^ in_B))) begin
                    next_state = S17;
                end
                else begin
                    next_state = S13;
                end
            S22: begin
                next_state = S34;
            S23: begin
                if ((in_C != 'd1)) begin
                    next_state = S7;
                end
                else if (~((in_A || in_B))) begin
                    next_state = S12;
                end
                else begin
                    next_state = S39;
                end
            S24: begin
                if (|((in_B != in_A))) begin
                    next_state = S14;
                end
                else if ((in_C != 'd1)) begin
                    next_state = S18;
                end
                else if (~&((in_A || in_B))) begin
                    next_state = S29;
                end
                else begin
                    next_state = S5;
                end
            S25: begin
            S26: begin
                if ((in_B ^ (in_D == 'd0))) begin
                    next_state = S24;
                end
                else if ((in_A && (in_C ^ in_D))) begin
                    next_state = S37;
                end
                else begin
                    next_state = S15;
                end
            S27: begin
                next_state = S2;
            S28: begin
                if (|((in_A != in_D))) begin
                    next_state = S36;
                end
                else begin
                    next_state = S18;
                end
            S29: begin
                if (((in_B ^ in_A) && in_B)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S13;
                end
            S30: begin
                if (~^(in_C)) begin
                    next_state = S22;
                end
                else if (~&(!(in_D))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S32;
                end
            S31: begin
                if ((in_C && in_B)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S21;
                end
            S32: begin
            S33: begin
                next_state = S19;
            S34: begin
                next_state = S35;
            S35: begin
                if ((in_B && in_A)) begin
                    next_state = S26;
                end
                else begin
                    next_state = S31;
                end
            S36: begin
                if (((in_A != 'd0) == (in_C ^ in_A))) begin
                    next_state = S10;
                end
                else if (&(in_A)) begin
                    next_state = S33;
                end
                else if (((in_A && in_D) && (in_C && in_B))) begin
                    next_state = S31;
                end
                else begin
                    next_state = S12;
                end
            S37: begin
            S38: begin
                if ((in_A != in_C)) begin
                    next_state = S31;
                end
                else begin
                    next_state = S18;
                end
            S39: begin
                if (&(in_C)) begin
                    next_state = S0;
                end
                else if ((in_D >= in_B)) begin
                    next_state = S1;
                end
                else if (!(in_C)) begin
                    next_state = S5;
                end
                else if (((in_C == 'd1) && in_A)) begin
                    next_state = S9;
                end
                else if ((in_B != in_D)) begin
                    next_state = S28;
                end
                else begin
                    next_state = S20;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_20_40_32_2,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (!((in_E ^ in_G))) begin
                    next_state = S2;
                end
                else if ((|(in_F) == 'd0)) begin
                    next_state = S4;
                end
                else if ((in_F != in_A)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S10;
                end
            S1: begin
                next_state = S19;
            S2: begin
                next_state = S8;
            S3: begin
            S4: begin
                if (((in_B <= 'd1) ^ (in_G ^ in_H))) begin
                    next_state = S1;
                end
                else if (((in_A != in_E) != in_F)) begin
                    next_state = S5;
                end
                else if ((in_C == 'd1)) begin
                    next_state = S9;
                end
                else if ((in_E != (in_F || in_G))) begin
                    next_state = S10;
                end
                else if (((in_B && in_H) || ~&(in_B))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S2;
                end
            S5: begin
                if ((in_G != ~(in_D))) begin
                    next_state = S14;
                end
                else begin
                    next_state = S9;
                end
            S6: begin
                if ((in_D ^ in_A)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S10;
                end
            S7: begin
                if ((in_E != 'd0)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S10;
                end
            S8: begin
                if ((in_A && (in_B && in_A))) begin
                    next_state = S2;
                end
                else begin
                    next_state = S19;
                end
            S9: begin
                next_state = S14;
            S10: begin
                if (((in_G ^ in_D) != 'd1)) begin
                    next_state = S18;
                end
                else begin
                    next_state = S10;
                end
            S11: begin
                if (((in_B && in_E) || in_B)) begin
                    next_state = S16;
                end
                else if ((&(in_B) == 'd0)) begin
                    next_state = S17;
                end
                else begin
                    next_state = S18;
                end
            S12: begin
            S13: begin
                if (((in_G != 'd0) != in_C)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S18;
                end
            S14: begin
                next_state = S10;
            S15: begin
                if ((in_A != 'd0)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S3;
                end
            S16: begin
                if (~((in_A || in_G))) begin
                    next_state = S6;
                end
                else if ((in_F < 'd1)) begin
                    next_state = S0;
                end
                else if ((in_D && (in_B == in_H))) begin
                    next_state = S17;
                end
                else begin
                    next_state = S5;
                end
            S17: begin
                next_state = S12;
            S18: begin
                next_state = S2;
            S19: begin
                next_state = S11;
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_20_40_32_4,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_D && (in_C == 'd0))) begin
                    next_state = S4;
                end
                else begin
                    next_state = S11;
                end
            S1: begin
                if ((in_F ^ in_A)) begin
                    next_state = S11;
                end
                else if ((in_C && (in_B < 'd0))) begin
                    next_state = S12;
                end
                else if (((in_H || in_E) != in_D)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S16;
                end
            S2: begin
                if ((~&(in_D) && in_C)) begin
                    next_state = S7;
                end
                else if ((in_B && (in_A == in_D))) begin
                    next_state = S10;
                end
                else begin
                    next_state = S18;
                end
            S3: begin
                if (~|((in_E == 'd1))) begin
                    next_state = S5;
                end
                else begin
                    next_state = S13;
                end
            S4: begin
                if (((in_E == 'd0) == in_D)) begin
                    next_state = S6;
                end
                else if ((in_H == 'd0)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S2;
                end
            S5: begin
                next_state = S0;
            S6: begin
                if ((in_D <= 'd1)) begin
                    next_state = S9;
                end
                else if ((in_A && in_G)) begin
                    next_state = S17;
                end
                else begin
                    next_state = S3;
                end
            S7: begin
                if (((in_E != in_H) == 'd1)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S14;
                end
            S8: begin
                if (&((in_G == 'd1))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S5;
                end
            S9: begin
                if (&((in_B ^ in_H))) begin
                    next_state = S9;
                end
                else begin
                    next_state = S12;
                end
            S10: begin
                next_state = S2;
            S11: begin
                next_state = S17;
            S12: begin
                next_state = S1;
            S13: begin
                next_state = S13;
            S14: begin
                if (((in_B != in_F) ^ !(in_C))) begin
                    next_state = S17;
                end
                else if (((in_C != 'd0) == (in_G == in_D))) begin
                    next_state = S19;
                end
                else if (((in_B && in_F) && ^(in_E))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S18;
                end
            S15: begin
                if (((in_B == in_A) ^ (in_F ^ in_H))) begin
                    next_state = S1;
                end
                else if (((in_H && in_C) <= (in_B && in_C))) begin
                    next_state = S3;
                end
                else if (!((in_B == 'd0))) begin
                    next_state = S16;
                end
                else begin
                    next_state = S6;
                end
            S16: begin
                if ((in_G != 'd1)) begin
                    next_state = S13;
                end
                else if (~(in_B)) begin
                    next_state = S19;
                end
                else begin
                    next_state = S3;
                end
            S17: begin
            S18: begin
            S19: begin
                next_state = S8;
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_20_40_64_2,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (((in_H ^ in_D) != 'd0)) begin
                    next_state = S18;
                end
                else begin
                    next_state = S15;
                end
            S1: begin
                if ((in_B && ^(in_H))) begin
                    next_state = S1;
                end
                else if ((in_C || (in_H && in_F))) begin
                    next_state = S10;
                end
                else begin
                    next_state = S8;
                end
            S2: begin
                if ((in_D ^ ^(in_A))) begin
                    next_state = S6;
                end
                else if ((~|(in_D) ^ (in_H < 'd0))) begin
                    next_state = S2;
                end
                else if (((in_A || in_E) && (in_C != in_H))) begin
                    next_state = S11;
                end
                else begin
                    next_state = S19;
                end
            S3: begin
                if ((in_E <= 'd0)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S9;
                end
            S4: begin
                if (!(in_A)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S13;
                end
            S5: begin
                next_state = S16;
            S6: begin
                next_state = S3;
            S7: begin
                next_state = S18;
            S8: begin
                if ((~|(in_C) == 'd1)) begin
                    next_state = S1;
                end
                else if ((in_B == (in_C ^ in_A))) begin
                    next_state = S12;
                end
                else begin
                    next_state = S15;
                end
            S9: begin
                next_state = S10;
            S10: begin
                if (((in_D <= in_E) <= in_B)) begin
                    next_state = S5;
                end
                else if (((in_A == in_C) != 'd0)) begin
                    next_state = S17;
                end
                else if (((in_G && in_D) && (in_F ^ in_C))) begin
                    next_state = S0;
                end
                else if (&((in_E || in_H))) begin
                    next_state = S1;
                end
                else begin
                    next_state = S7;
                end
            S11: begin
                if (((in_G == in_H) || (in_F >= 'd1))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S16;
                end
            S12: begin
                if (((in_G == 'd1) && (in_A && in_B))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S4;
                end
            S13: begin
            S14: begin
                if ((~(in_G) && (in_C ^ in_E))) begin
                    next_state = S4;
                end
                else if ((in_F ^ !(in_B))) begin
                    next_state = S19;
                end
                else if (~|((in_D || in_G))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S16;
                end
            S15: begin
                next_state = S7;
            S16: begin
                if (^(in_G)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S2;
                end
            S17: begin
                if ((|(in_A) && in_G)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S17;
                end
            S18: begin
                next_state = S10;
            S19: begin
                next_state = S14;
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_20_40_64_4,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                next_state = S0;
            S1: begin
                if ((in_F >= 'd1)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S1;
                end
            S2: begin
            S3: begin
                if (((in_C == 'd1) ^ (in_B == 'd1))) begin
                    next_state = S16;
                end
                else begin
                    next_state = S18;
                end
            S4: begin
                next_state = S18;
            S5: begin
            S6: begin
                next_state = S15;
            S7: begin
                if ((in_C && in_E)) begin
                    next_state = S16;
                end
                else if ((in_C && in_F)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S18;
                end
            S8: begin
                if (((in_F || in_D) || (in_A ^ in_D))) begin
                    next_state = S18;
                end
                else begin
                    next_state = S6;
                end
            S9: begin
                if ((in_B ^ !(in_H))) begin
                    next_state = S0;
                end
                else begin
                    next_state = S5;
                end
            S10: begin
                if ((in_D ^ (in_H ^ in_A))) begin
                    next_state = S3;
                end
                else if (((in_G ^ in_C) == 'd1)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S12;
                end
            S11: begin
                if (&((in_B || in_C))) begin
                    next_state = S5;
                end
                else if ((in_H && (in_F ^ in_C))) begin
                    next_state = S8;
                end
                else if (!((in_D || in_C))) begin
                    next_state = S12;
                end
                else if (~|((in_G <= 'd0))) begin
                    next_state = S14;
                end
                else begin
                    next_state = S0;
                end
            S12: begin
                if (((in_G != in_H) == in_D)) begin
                    next_state = S19;
                end
                else if ((in_D ^ in_C)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S1;
                end
            S13: begin
            S14: begin
                if ((in_F ^ (in_A && in_G))) begin
                    next_state = S1;
                end
                else if (((in_F <= 'd1) ^ (in_D && in_G))) begin
                    next_state = S15;
                end
                else begin
                    next_state = S19;
                end
            S15: begin
            S16: begin
                if ((in_D == in_F)) begin
                    next_state = S4;
                end
                else if ((in_C ^ (in_E != 'd1))) begin
                    next_state = S7;
                end
                else if (((in_H && in_C) && in_F)) begin
                    next_state = S9;
                end
                else if ((in_F || (in_H != 'd0))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S18;
                end
            S17: begin
                next_state = S13;
            S18: begin
                if (((in_F && in_H) ^ in_D)) begin
                    next_state = S2;
                end
                else if (((in_H && in_D) ^ ~^(in_F))) begin
                    next_state = S6;
                end
                else if ((~&(in_C) == 'd0)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S17;
                end
            S19: begin
                next_state = S3;
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_20_80_32_2,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (~^(in_G)) begin
                    next_state = S5;
                end
                else if (((in_A > 'd0) || (in_G || in_C))) begin
                    next_state = S0;
                end
                else if (((in_E != 'd1) || in_F)) begin
                    next_state = S18;
                end
                else begin
                    next_state = S16;
                end
            S1: begin
                if ((~(in_F) || in_G)) begin
                    next_state = S4;
                end
                else if (|(in_B)) begin
                    next_state = S12;
                end
                else if ((in_D != 'd0)) begin
                    next_state = S19;
                end
                else if ((in_G == in_A)) begin
                    next_state = S18;
                end
                else if (~((in_H != 'd1))) begin
                    next_state = S10;
                end
                else if (((in_A ^ in_F) ^ in_A)) begin
                    next_state = S3;
                end
                else if (~^((in_B ^ in_E))) begin
                    next_state = S8;
                end
                else if ((in_A != (in_G == 'd1))) begin
                    next_state = S11;
                end
                else if ((in_A != in_C)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S5;
                end
            S2: begin
                if ((in_D < 'd0)) begin
                    next_state = S16;
                end
                else if (|(~^(in_G))) begin
                    next_state = S17;
                end
                else begin
                    next_state = S6;
                end
            S3: begin
                if (((in_C > 'd1) != 'd0)) begin
                    next_state = S2;
                end
                else if ((in_G || in_B)) begin
                    next_state = S7;
                end
                else if ((!(in_C) || (in_F ^ in_H))) begin
                    next_state = S13;
                end
                else begin
                    next_state = S3;
                end
            S4: begin
                if (((in_H ^ in_B) && (in_A ^ in_C))) begin
                    next_state = S7;
                end
                else begin
                    next_state = S4;
                end
            S5: begin
                if (((in_G || in_C) == 'd1)) begin
                    next_state = S14;
                end
                else if ((in_B == in_D)) begin
                    next_state = S9;
                end
                else if ((in_C != in_F)) begin
                    next_state = S15;
                end
                else if ((in_H || (in_B ^ in_F))) begin
                    next_state = S12;
                end
                else if (((in_H && in_F) && in_B)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S3;
                end
            S6: begin
                if (~(^(in_B))) begin
                    next_state = S9;
                end
                else if (((in_A || in_H) != 'd0)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S4;
                end
            S7: begin
                if ((in_E < 'd1)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S6;
                end
            S8: begin
                if (((in_D && in_C) == in_G)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S16;
                end
            S9: begin
                if (((in_B == in_E) ^ in_F)) begin
                    next_state = S6;
                end
                else if (((in_F ^ in_D) != 'd1)) begin
                    next_state = S14;
                end
                else if (~|(in_D)) begin
                    next_state = S7;
                end
                else if ((in_A ^ in_D)) begin
                    next_state = S18;
                end
                else begin
                    next_state = S11;
                end
            S10: begin
                if ((in_B != 'd1)) begin
                    next_state = S8;
                end
                else if ((in_E != (in_C == in_F))) begin
                    next_state = S1;
                end
                else begin
                    next_state = S13;
                end
            S11: begin
                next_state = S19;
            S12: begin
                if ((in_A ^ (in_H || in_A))) begin
                    next_state = S18;
                end
                else if ((~^(in_C) > 'd1)) begin
                    next_state = S9;
                end
                else if (&((in_F > in_A))) begin
                    next_state = S12;
                end
                else if ((in_C < (in_E ^ in_A))) begin
                    next_state = S16;
                end
                else begin
                    next_state = S15;
                end
            S13: begin
                if ((in_G || in_B)) begin
                    next_state = S8;
                end
                else if (&((in_H != in_E))) begin
                    next_state = S10;
                end
                else if (|(in_C)) begin
                    next_state = S15;
                end
                else if (((in_C ^ in_G) && in_D)) begin
                    next_state = S12;
                end
                else if (~(in_H)) begin
                    next_state = S0;
                end
                else if ((~^(in_A) ^ ~&(in_F))) begin
                    next_state = S19;
                end
                else begin
                    next_state = S13;
                end
            S14: begin
                if (((in_C && in_G) || (in_A && in_C))) begin
                    next_state = S3;
                end
                else if ((in_E == 'd0)) begin
                    next_state = S9;
                end
                else if (~(in_A)) begin
                    next_state = S11;
                end
                else if ((~&(in_C) ^ in_F)) begin
                    next_state = S18;
                end
                else if (((in_F && in_D) || in_A)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S5;
                end
            S15: begin
                if ((in_B ^ in_C)) begin
                    next_state = S0;
                end
                else if ((in_B && in_H)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S7;
                end
            S16: begin
                if ((in_G == 'd0)) begin
                    next_state = S10;
                end
                else if ((in_E == in_B)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S4;
                end
            S17: begin
                if (((in_F && in_G) || in_E)) begin
                    next_state = S6;
                end
                else if ((in_H == 'd0)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S10;
                end
            S18: begin
                if (~&((in_E && in_F))) begin
                    next_state = S1;
                end
                else begin
                    next_state = S13;
                end
            S19: begin
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_20_80_32_4,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (((in_E == 'd1) != 'd0)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S14;
                end
            S1: begin
                if (^(~|(in_C))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S2;
                end
            S2: begin
                if (~^(in_D)) begin
                    next_state = S10;
                end
                else if (^(in_F)) begin
                    next_state = S18;
                end
                else if (~(in_D)) begin
                    next_state = S17;
                end
                else begin
                    next_state = S7;
                end
            S3: begin
                if ((^(in_C) != 'd1)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S14;
                end
            S4: begin
                if ((in_H && in_B)) begin
                    next_state = S14;
                end
                else if (((in_G && in_F) == 'd0)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S4;
                end
            S5: begin
                if ((in_C == (in_A != in_F))) begin
                    next_state = S16;
                end
                else if ((in_D == (in_F >= in_H))) begin
                    next_state = S14;
                end
                else begin
                    next_state = S11;
                end
            S6: begin
                if ((in_H && (in_A ^ in_G))) begin
                    next_state = S2;
                end
                else if ((in_F <= 'd0)) begin
                    next_state = S7;
                end
                else if (~|(in_A)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S3;
                end
            S7: begin
                next_state = S1;
            S8: begin
                if ((in_C != 'd0)) begin
                    next_state = S12;
                end
                else if ((in_F >= 'd1)) begin
                    next_state = S2;
                end
                else if (((in_E && in_F) && in_B)) begin
                    next_state = S6;
                end
                else if (~&(in_E)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S8;
                end
            S9: begin
                if ((in_B ^ in_A)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S5;
                end
            S10: begin
                if ((in_G == 'd0)) begin
                    next_state = S16;
                end
                else if (~&((in_A ^ in_D))) begin
                    next_state = S6;
                end
                else if (&(in_F)) begin
                    next_state = S1;
                end
                else if ((in_H ^ (in_A || in_F))) begin
                    next_state = S9;
                end
                else begin
                    next_state = S11;
                end
            S11: begin
                if ((in_G ^ &(in_E))) begin
                    next_state = S9;
                end
                else if (((in_G != 'd1) || (in_A && in_E))) begin
                    next_state = S6;
                end
                else if ((in_G && (in_A == in_E))) begin
                    next_state = S8;
                end
                else if ((in_E <= 'd1)) begin
                    next_state = S7;
                end
                else if (!(in_D)) begin
                    next_state = S14;
                end
                else if ((~^(in_G) ^ (in_A == 'd1))) begin
                    next_state = S13;
                end
                else if (^((in_H ^ in_F))) begin
                    next_state = S5;
                end
                else begin
                    next_state = S3;
                end
            S12: begin
                if (((in_H <= 'd1) != 'd0)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S3;
                end
            S13: begin
                if (((in_A == 'd0) || ~|(in_D))) begin
                    next_state = S11;
                end
                else if ((in_B == (in_F != 'd0))) begin
                    next_state = S17;
                end
                else if ((in_H || (in_D < 'd1))) begin
                    next_state = S19;
                end
                else if ((in_D && in_E)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S1;
                end
            S14: begin
                if (((in_A == 'd0) ^ (in_B ^ in_G))) begin
                    next_state = S0;
                end
                else if (|(in_F)) begin
                    next_state = S8;
                end
                else if (^((in_G && in_H))) begin
                    next_state = S9;
                end
                else if ((in_B ^ ~&(in_F))) begin
                    next_state = S6;
                end
                else begin
                    next_state = S13;
                end
            S15: begin
                if ((in_D && in_C)) begin
                    next_state = S4;
                end
                else if (((in_F == 'd1) || in_A)) begin
                    next_state = S6;
                end
                else if (((in_C < in_B) ^ (in_F == 'd0))) begin
                    next_state = S18;
                end
                else begin
                    next_state = S3;
                end
            S16: begin
                if ((in_D || (in_C != in_H))) begin
                    next_state = S14;
                end
                else if (~(in_A)) begin
                    next_state = S19;
                end
                else if (~|((in_G != 'd0))) begin
                    next_state = S16;
                end
                else begin
                    next_state = S17;
                end
            S17: begin
                if (&(in_G)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S3;
                end
            S18: begin
                if (((in_D > in_B) && (in_G || in_E))) begin
                    next_state = S2;
                end
                else begin
                    next_state = S3;
                end
            S19: begin
                if (~^(in_F)) begin
                    next_state = S1;
                end
                else if (((in_C ^ in_A) != 'd0)) begin
                    next_state = S15;
                end
                else if ((in_B == 'd1)) begin
                    next_state = S17;
                end
                else if ((in_F && in_D)) begin
                    next_state = S14;
                end
                else if (|(~&(in_B))) begin
                    next_state = S6;
                end
                else if ((in_F != 'd1)) begin
                    next_state = S19;
                end
                else begin
                    next_state = S13;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_20_80_64_2,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_D && &(in_B))) begin
                    next_state = S7;
                end
                else if (((in_H <= 'd0) != 'd0)) begin
                    next_state = S8;
                end
                else if (((in_H != 'd0) == 'd0)) begin
                    next_state = S11;
                end
                else if (((in_H || in_F) && in_D)) begin
                    next_state = S13;
                end
                else if ((in_C || in_B)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S16;
                end
            S1: begin
                if ((in_B < (in_F ^ in_C))) begin
                    next_state = S9;
                end
                else begin
                    next_state = S7;
                end
            S2: begin
                if ((in_C == 'd0)) begin
                    next_state = S3;
                end
                else if ((in_G != 'd0)) begin
                    next_state = S10;
                end
                else if (((in_G || in_H) || (in_A || in_D))) begin
                    next_state = S12;
                end
                else begin
                    next_state = S18;
                end
            S3: begin
                if (^(in_H)) begin
                    next_state = S13;
                end
                else if (!((in_B > 'd0))) begin
                    next_state = S10;
                end
                else begin
                    next_state = S3;
                end
            S4: begin
                next_state = S8;
            S5: begin
                if (((in_D ^ in_G) && (in_E == in_F))) begin
                    next_state = S1;
                end
                else if (((in_C && in_H) == 'd0)) begin
                    next_state = S12;
                end
                else if ((in_D ^ in_E)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S2;
                end
            S6: begin
                next_state = S4;
            S7: begin
                if (((in_E != in_C) == in_G)) begin
                    next_state = S18;
                end
                else if ((in_D && in_H)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S1;
                end
            S8: begin
                if ((in_H ^ in_G)) begin
                    next_state = S15;
                end
                else if (((in_D || in_B) ^ (in_F ^ in_C))) begin
                    next_state = S3;
                end
                else if ((in_G <= 'd0)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S16;
                end
            S9: begin
                if ((in_H == in_F)) begin
                    next_state = S17;
                end
                else if ((in_A || (in_C || in_G))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S15;
                end
            S10: begin
                if ((~&(in_H) ^ in_D)) begin
                    next_state = S9;
                end
                else if (!(!(in_A))) begin
                    next_state = S19;
                end
                else if (((in_E ^ in_G) == 'd0)) begin
                    next_state = S11;
                end
                else if ((in_F != 'd1)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S14;
                end
            S11: begin
                if ((in_B != 'd0)) begin
                    next_state = S16;
                end
                else if ((in_A && in_B)) begin
                    next_state = S10;
                end
                else if ((in_D ^ (in_F ^ in_B))) begin
                    next_state = S6;
                end
                else begin
                    next_state = S12;
                end
            S12: begin
                if ((in_E != in_A)) begin
                    next_state = S6;
                end
                else if ((in_G || in_F)) begin
                    next_state = S18;
                end
                else if (~^((in_H == 'd0))) begin
                    next_state = S5;
                end
                else begin
                    next_state = S14;
                end
            S13: begin
                if (((in_H != 'd0) == (in_E != 'd1))) begin
                    next_state = S16;
                end
                else if ((in_F > 'd0)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S5;
                end
            S14: begin
                next_state = S5;
            S15: begin
                if ((in_D || (in_C ^ in_G))) begin
                    next_state = S14;
                end
                else if ((in_E != 'd1)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S16;
                end
            S16: begin
                if (~&((in_B == 'd0))) begin
                    next_state = S2;
                end
                else begin
                    next_state = S10;
                end
            S17: begin
                if (!(in_F)) begin
                    next_state = S11;
                end
                else if (|(in_A)) begin
                    next_state = S0;
                end
                else if ((|(in_D) != 'd1)) begin
                    next_state = S18;
                end
                else if ((in_B || in_F)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S1;
                end
            S18: begin
                if (((in_G && in_A) ^ in_H)) begin
                    next_state = S16;
                end
                else if ((in_D != 'd1)) begin
                    next_state = S17;
                end
                else begin
                    next_state = S14;
                end
            S19: begin
                if (((in_H != 'd0) || in_E)) begin
                    next_state = S0;
                end
                else if ((in_A != 'd0)) begin
                    next_state = S4;
                end
                else if ((in_D && (in_C ^ in_E))) begin
                    next_state = S11;
                end
                else if (((in_B == 'd1) != 'd1)) begin
                    next_state = S12;
                end
                else if (^(~(in_H))) begin
                    next_state = S7;
                end
                else if (((in_A || in_F) != 'd0)) begin
                    next_state = S3;
                end
                else if ((in_H != 'd1)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S16;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_20_80_64_4,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_H != 'd1)) begin
                    next_state = S19;
                end
                else begin
                    next_state = S9;
                end
            S1: begin
                if (~^(in_F)) begin
                    next_state = S17;
                end
                else if ((~^(in_A) && (in_H != 'd0))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S1;
                end
            S2: begin
                if (((in_E != 'd1) && (in_F && in_D))) begin
                    next_state = S13;
                end
                else if (((in_A <= 'd1) ^ (in_E ^ in_C))) begin
                    next_state = S15;
                end
                else if (~&(in_F)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S16;
                end
            S3: begin
                if ((~(in_G) == (in_C || in_F))) begin
                    next_state = S6;
                end
                else if ((in_E != 'd1)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S17;
                end
            S4: begin
                if (|(|(in_G))) begin
                    next_state = S3;
                end
                else if ((~&(in_F) < (in_B ^ in_E))) begin
                    next_state = S12;
                end
                else if (((in_C || in_B) == (in_A < 'd0))) begin
                    next_state = S4;
                end
                else if (((in_A > 'd1) && (in_G ^ in_C))) begin
                    next_state = S2;
                end
                else if ((in_H != 'd1)) begin
                    next_state = S16;
                end
                else if ((in_E ^ (in_F == in_A))) begin
                    next_state = S6;
                end
                else begin
                    next_state = S11;
                end
            S5: begin
                if ((in_H && in_D)) begin
                    next_state = S9;
                end
                else if (!(in_C)) begin
                    next_state = S18;
                end
                else if (((in_B == 'd1) != 'd0)) begin
                    next_state = S11;
                end
                else if ((in_E != 'd1)) begin
                    next_state = S4;
                end
                else if ((in_B != 'd0)) begin
                    next_state = S0;
                end
                else if ((in_F <= 'd1)) begin
                    next_state = S5;
                end
                else if ((in_D != &(in_A))) begin
                    next_state = S6;
                end
                else begin
                    next_state = S10;
                end
            S6: begin
                if (!((in_B && in_G))) begin
                    next_state = S3;
                end
                else if (~|((in_G || in_E))) begin
                    next_state = S15;
                end
                else if (((in_H || in_E) == 'd0)) begin
                    next_state = S10;
                end
                else if (((in_B == in_E) != 'd1)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S18;
                end
            S7: begin
                if ((in_H && in_B)) begin
                    next_state = S2;
                end
                else if (!(in_H)) begin
                    next_state = S16;
                end
                else if ((~&(in_E) ^ in_H)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S8;
                end
            S8: begin
                if ((in_A || in_B)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S4;
                end
            S9: begin
                if (((in_A != 'd0) && (in_G || in_C))) begin
                    next_state = S2;
                end
                else if (((in_G == 'd0) ^ !(in_H))) begin
                    next_state = S6;
                end
                else if ((in_H ^ in_G)) begin
                    next_state = S7;
                end
                else if (((in_E > 'd0) != 'd0)) begin
                    next_state = S10;
                end
                else if (((in_A && in_H) || in_E)) begin
                    next_state = S18;
                end
                else if (((in_C == 'd0) ^ in_B)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S13;
                end
            S10: begin
                if ((in_G && in_F)) begin
                    next_state = S1;
                end
                else if ((in_D || in_H)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S14;
                end
            S11: begin
                if ((in_D && in_G)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S4;
                end
            S12: begin
                if (^(in_C)) begin
                    next_state = S3;
                end
                else if (~(in_B)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S7;
                end
            S13: begin
                if (~|((in_A != 'd1))) begin
                    next_state = S11;
                end
                else if (((in_E == 'd0) ^ in_H)) begin
                    next_state = S8;
                end
                else if (((in_B && in_G) == 'd1)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S7;
                end
            S14: begin
                if (((in_F == in_C) ^ in_B)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S16;
                end
            S15: begin
            S16: begin
                if (&(in_G)) begin
                    next_state = S10;
                end
                else if ((^(in_H) || (in_B && in_G))) begin
                    next_state = S19;
                end
                else if (~|(in_D)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S12;
                end
            S17: begin
                if ((in_A || in_B)) begin
                    next_state = S9;
                end
                else if (((in_A != 'd0) ^ (in_G ^ in_C))) begin
                    next_state = S15;
                end
                else if (((in_C ^ in_B) ^ (in_D <= 'd0))) begin
                    next_state = S16;
                end
                else if (((in_F ^ in_D) > in_F)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S10;
                end
            S18: begin
                if ((^(in_A) || ^(in_G))) begin
                    next_state = S3;
                end
                else if ((in_A == 'd1)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S11;
                end
            S19: begin
                if (((in_E == 'd1) || in_C)) begin
                    next_state = S7;
                end
                else if (((in_G != 'd1) <= 'd0)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S2;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 5;

    parameter S0 = 5'b00000;
    parameter S1 = 5'b00001;
    parameter S2 = 5'b00010;
    parameter S3 = 5'b00011;
    parameter S4 = 5'b00100;
    parameter S5 = 5'b00101;
    parameter S6 = 5'b00110;
    parameter S7 = 5'b00111;
    parameter S8 = 5'b01000;
    parameter S9 = 5'b01001;
    parameter S10 = 5'b01010;
    parameter S11 = 5'b01011;
    parameter S12 = 5'b01100;
    parameter S13 = 5'b01101;
    parameter S14 = 5'b01110;
    parameter S15 = 5'b01111;
    parameter S16 = 5'b10000;
    parameter S17 = 5'b10001;
    parameter S18 = 5'b10010;
    parameter S19 = 5'b10011;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_40_40_32_2,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
            S1: begin
                next_state = S2;
            S2: begin
                if (((in_D && in_E) != 'd1)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S6;
                end
            S3: begin
                if (((in_B == 'd0) ^ !(in_C))) begin
                    next_state = S12;
                end
                else begin
                    next_state = S23;
                end
            S4: begin
                if ((in_H != 'd0)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S36;
                end
            S5: begin
                if ((in_B >= 'd1)) begin
                    next_state = S29;
                end
                else begin
                    next_state = S35;
                end
            S6: begin
            S7: begin
            S8: begin
                next_state = S33;
            S9: begin
                next_state = S16;
            S10: begin
                if (((in_E > 'd0) == 'd0)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S9;
                end
            S11: begin
                next_state = S19;
            S12: begin
                next_state = S17;
            S13: begin
                next_state = S22;
            S14: begin
                next_state = S32;
            S15: begin
                next_state = S18;
            S16: begin
                if (&(^(in_F))) begin
                    next_state = S7;
                end
                else if (((in_C && in_E) ^ in_F)) begin
                    next_state = S27;
                end
                else begin
                    next_state = S39;
                end
            S17: begin
                next_state = S13;
            S18: begin
            S19: begin
                next_state = S15;
            S20: begin
                next_state = S28;
            S21: begin
            S22: begin
                if (((in_C != 'd1) == 'd0)) begin
                    next_state = S8;
                end
                else if ((in_B && in_F)) begin
                    next_state = S10;
                end
                else begin
                    next_state = S25;
                end
            S23: begin
                next_state = S38;
            S24: begin
                next_state = S26;
            S25: begin
            S26: begin
                next_state = S30;
            S27: begin
            S28: begin
            S29: begin
                if (!((in_E != in_F))) begin
                    next_state = S11;
                end
                else begin
                    next_state = S34;
                end
            S30: begin
                next_state = S37;
            S31: begin
                next_state = S24;
            S32: begin
            S33: begin
            S34: begin
                next_state = S21;
            S35: begin
                next_state = S31;
            S36: begin
                next_state = S1;
            S37: begin
            S38: begin
                next_state = S0;
            S39: begin
                if ((in_E != 'd0)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S20;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_40_40_32_4,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (&(^(in_E))) begin
                    next_state = S6;
                end
                else if (^(|(in_F))) begin
                    next_state = S11;
                end
                else if (((in_F && in_D) && in_E)) begin
                    next_state = S15;
                end
                else begin
                    next_state = S18;
                end
            S1: begin
                if ((in_G != (in_E || in_H))) begin
                    next_state = S17;
                end
                else begin
                    next_state = S29;
                end
            S2: begin
                if ((in_H < 'd1)) begin
                    next_state = S30;
                end
                else begin
                    next_state = S33;
                end
            S3: begin
                if (~^((in_D == 'd0))) begin
                    next_state = S26;
                end
                else begin
                    next_state = S37;
                end
            S4: begin
                if (((in_B && in_F) ^ ~&(in_B))) begin
                    next_state = S2;
                end
                else begin
                    next_state = S32;
                end
            S5: begin
                if (~(!(in_A))) begin
                    next_state = S19;
                end
                else begin
                    next_state = S27;
                end
            S6: begin
            S7: begin
            S8: begin
                next_state = S7;
            S9: begin
            S10: begin
                if ((in_C || !(in_G))) begin
                    next_state = S22;
                end
                else begin
                    next_state = S23;
                end
            S11: begin
                if ((in_B == 'd1)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S31;
                end
            S12: begin
                next_state = S0;
            S13: begin
            S14: begin
            S15: begin
            S16: begin
            S17: begin
                next_state = S36;
            S18: begin
                next_state = S4;
            S19: begin
            S20: begin
            S21: begin
            S22: begin
            S23: begin
            S24: begin
                if (((in_E || in_H) || in_G)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S21;
                end
            S25: begin
                next_state = S13;
            S26: begin
                if ((in_A != 'd1)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S35;
                end
            S27: begin
            S28: begin
                if (((in_D && in_E) == 'd1)) begin
                    next_state = S25;
                end
                else begin
                    next_state = S34;
                end
            S29: begin
            S30: begin
                next_state = S3;
            S31: begin
                if (((in_G <= in_E) != 'd1)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S10;
                end
            S32: begin
            S33: begin
                next_state = S9;
            S34: begin
                next_state = S28;
            S35: begin
            S36: begin
                next_state = S38;
            S37: begin
                next_state = S39;
            S38: begin
                if (|((in_D && in_E))) begin
                    next_state = S1;
                end
                else begin
                    next_state = S24;
                end
            S39: begin
                if ((in_B == 'd1)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S20;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_40_40_64_2,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
            S1: begin
            S2: begin
                next_state = S8;
            S3: begin
                next_state = S36;
            S4: begin
                next_state = S39;
            S5: begin
                next_state = S11;
            S6: begin
                if (!((in_E == 'd1))) begin
                    next_state = S1;
                end
                else begin
                    next_state = S37;
                end
            S7: begin
            S8: begin
                if (&(in_F)) begin
                    next_state = S33;
                end
                else begin
                    next_state = S35;
                end
            S9: begin
            S10: begin
                next_state = S27;
            S11: begin
                if (~|((in_A <= 'd1))) begin
                    next_state = S21;
                end
                else begin
                    next_state = S34;
                end
            S12: begin
                next_state = S30;
            S13: begin
                next_state = S26;
            S14: begin
            S15: begin
                next_state = S23;
            S16: begin
            S17: begin
                if ((in_A != in_E)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S31;
                end
            S18: begin
            S19: begin
                next_state = S20;
            S20: begin
                if ((in_F && in_H)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S32;
                end
            S21: begin
                if (((in_C && in_E) && (in_A < 'd1))) begin
                    next_state = S0;
                end
                else if (((in_H == 'd0) || (in_C || in_D))) begin
                    next_state = S3;
                end
                else begin
                    next_state = S5;
                end
            S22: begin
                if (((in_A >= 'd0) && (in_C ^ in_A))) begin
                    next_state = S2;
                end
                else begin
                    next_state = S17;
                end
            S23: begin
            S24: begin
                if (~&((in_B != 'd0))) begin
                    next_state = S9;
                end
                else begin
                    next_state = S29;
                end
            S25: begin
            S26: begin
            S27: begin
                if ((in_B == in_A)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S15;
                end
            S28: begin
                next_state = S25;
            S29: begin
                next_state = S28;
            S30: begin
                next_state = S6;
            S31: begin
            S32: begin
                if (((in_D || in_C) < in_G)) begin
                    next_state = S18;
                end
                else begin
                    next_state = S38;
                end
            S33: begin
            S34: begin
                next_state = S16;
            S35: begin
                next_state = S24;
            S36: begin
            S37: begin
            S38: begin
            S39: begin
                if (((in_E == 'd1) || in_F)) begin
                    next_state = S10;
                end
                else if (((in_A != in_C) == 'd1)) begin
                    next_state = S13;
                end
                else if ((in_E == 'd0)) begin
                    next_state = S14;
                end
                else if ((in_G == 'd0)) begin
                    next_state = S19;
                end
                else begin
                    next_state = S22;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_40_40_64_4,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
            S1: begin
            S2: begin
                next_state = S26;
            S3: begin
            S4: begin
                next_state = S31;
            S5: begin
            S6: begin
            S7: begin
            S8: begin
                next_state = S10;
            S9: begin
            S10: begin
                next_state = S39;
            S11: begin
            S12: begin
                next_state = S15;
            S13: begin
                next_state = S0;
            S14: begin
                if (~^(in_D)) begin
                    next_state = S17;
                end
                else begin
                    next_state = S19;
                end
            S15: begin
                next_state = S7;
            S16: begin
                if (((in_A == 'd1) != in_B)) begin
                    next_state = S9;
                end
                else if (((in_G != 'd0) ^ (in_B ^ in_D))) begin
                    next_state = S18;
                end
                else begin
                    next_state = S27;
                end
            S17: begin
            S18: begin
                if ((in_H != 'd1)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S33;
                end
            S19: begin
                next_state = S12;
            S20: begin
            S21: begin
                if ((in_A ^ in_D)) begin
                    next_state = S23;
                end
                else begin
                    next_state = S28;
                end
            S22: begin
                if (((in_F && in_D) || in_C)) begin
                    next_state = S5;
                end
                else if (((in_H && in_F) || in_G)) begin
                    next_state = S16;
                end
                else if ((in_D == ~^(in_E))) begin
                    next_state = S20;
                end
                else if ((in_E == in_D)) begin
                    next_state = S37;
                end
                else begin
                    next_state = S38;
                end
            S23: begin
                next_state = S1;
            S24: begin
                next_state = S25;
            S25: begin
                if ((in_D == in_B)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S6;
                end
            S26: begin
                if (~^(in_H)) begin
                    next_state = S8;
                end
                else begin
                    next_state = S32;
                end
            S27: begin
            S28: begin
                next_state = S29;
            S29: begin
            S30: begin
                if ((in_E != 'd0)) begin
                    next_state = S11;
                end
                else if ((in_H || (in_C == in_A))) begin
                    next_state = S21;
                end
                else begin
                    next_state = S35;
                end
            S31: begin
            S32: begin
            S33: begin
                if ((in_A != in_H)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S13;
                end
            S34: begin
                next_state = S30;
            S35: begin
            S36: begin
                if (~^((in_C || in_B))) begin
                    next_state = S14;
                end
                else begin
                    next_state = S34;
                end
            S37: begin
            S38: begin
                next_state = S24;
            S39: begin
                if (((in_H || in_F) ^ ~|(in_B))) begin
                    next_state = S22;
                end
                else begin
                    next_state = S36;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_40_80_32_2,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_B || (in_E || in_G))) begin
                    next_state = S25;
                end
                else begin
                    next_state = S13;
                end
            S1: begin
                if ((in_D || in_E)) begin
                    next_state = S21;
                end
                else if (~(~&(in_A))) begin
                    next_state = S22;
                end
                else begin
                    next_state = S39;
                end
            S2: begin
                if (((in_A == 'd1) != 'd0)) begin
                    next_state = S7;
                end
                else if (((in_H && in_E) || (in_A || in_E))) begin
                    next_state = S24;
                end
                else if ((~&(in_B) || in_C)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S27;
                end
            S3: begin
                if ((in_H || (in_G && in_C))) begin
                    next_state = S18;
                end
                else if ((in_D == 'd0)) begin
                    next_state = S28;
                end
                else if ((in_C ^ in_A)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S31;
                end
            S4: begin
                next_state = S0;
            S5: begin
                next_state = S7;
            S6: begin
                if (((in_G && in_D) || ^(in_H))) begin
                    next_state = S38;
                end
                else if (((in_H ^ in_G) != 'd0)) begin
                    next_state = S26;
                end
                else begin
                    next_state = S21;
                end
            S7: begin
                if (((in_D && in_F) == 'd1)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S8;
                end
            S8: begin
                if ((in_A != (in_H == 'd1))) begin
                    next_state = S29;
                end
                else if ((in_C == 'd1)) begin
                    next_state = S30;
                end
                else begin
                    next_state = S12;
                end
            S9: begin
                next_state = S20;
            S10: begin
                if (~^((in_G ^ in_A))) begin
                    next_state = S30;
                end
                else begin
                    next_state = S2;
                end
            S11: begin
                if (((in_B <= 'd1) || (in_F != in_E))) begin
                    next_state = S8;
                end
                else if ((~^(in_B) ^ (in_C ^ in_F))) begin
                    next_state = S15;
                end
                else begin
                    next_state = S0;
                end
            S12: begin
                next_state = S27;
            S13: begin
                if ((in_G || in_F)) begin
                    next_state = S1;
                end
                else begin
                    next_state = S16;
                end
            S14: begin
                if (~((in_B == 'd0))) begin
                    next_state = S35;
                end
                else if (((in_D || in_G) == 'd1)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S2;
                end
            S15: begin
                next_state = S27;
            S16: begin
                next_state = S14;
            S17: begin
                next_state = S30;
            S18: begin
                if ((in_D && in_B)) begin
                    next_state = S3;
                end
                else if (((in_H != in_C) == 'd1)) begin
                    next_state = S5;
                end
                else if ((!(in_E) ^ in_B)) begin
                    next_state = S10;
                end
                else if (~|(in_H)) begin
                    next_state = S16;
                end
                else begin
                    next_state = S7;
                end
            S19: begin
                if (((in_A == 'd0) <= 'd1)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S36;
                end
            S20: begin
                next_state = S31;
            S21: begin
                next_state = S32;
            S22: begin
                if ((in_G || (in_F ^ in_H))) begin
                    next_state = S32;
                end
                else if (((in_D && in_G) || in_A)) begin
                    next_state = S34;
                end
                else begin
                    next_state = S2;
                end
            S23: begin
                next_state = S11;
            S24: begin
                if (&((in_G == 'd0))) begin
                    next_state = S9;
                end
                else if ((in_G == 'd0)) begin
                    next_state = S14;
                end
                else if ((in_C ^ in_F)) begin
                    next_state = S26;
                end
                else begin
                    next_state = S32;
                end
            S25: begin
                next_state = S20;
            S26: begin
            S27: begin
                if ((in_E == (in_A != in_D))) begin
                    next_state = S37;
                end
                else begin
                    next_state = S33;
                end
            S28: begin
                next_state = S19;
            S29: begin
                next_state = S12;
            S30: begin
                if (((in_D ^ in_F) ^ in_H)) begin
                    next_state = S0;
                end
                else if (|(in_D)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S33;
                end
            S31: begin
                next_state = S34;
            S32: begin
            S33: begin
            S34: begin
                if (((in_A ^ in_H) ^ in_B)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S36;
                end
            S35: begin
            S36: begin
                if (((in_E == in_H) || in_A)) begin
                    next_state = S37;
                end
                else begin
                    next_state = S34;
                end
            S37: begin
                if ((in_A ^ ~^(in_C))) begin
                    next_state = S39;
                end
                else if (((in_C ^ in_A) != 'd0)) begin
                    next_state = S34;
                end
                else if (((in_H || in_E) && (in_F || in_E))) begin
                    next_state = S20;
                end
                else begin
                    next_state = S10;
                end
            S38: begin
                if ((in_B && in_D)) begin
                    next_state = S17;
                end
                else begin
                    next_state = S21;
                end
            S39: begin
                if ((in_D || (in_A && in_C))) begin
                    next_state = S4;
                end
                else if (^(in_A)) begin
                    next_state = S20;
                end
                else if ((in_E == 'd0)) begin
                    next_state = S23;
                end
                else if (~|(~|(in_D))) begin
                    next_state = S26;
                end
                else begin
                    next_state = S39;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_40_80_32_4,"
`define WIDTH 32
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                next_state = S33;
            S1: begin
                if ((~|(in_A) || in_H)) begin
                    next_state = S4;
                end
                else if ((in_F && (in_A != 'd0))) begin
                    next_state = S9;
                end
                else if ((in_F ^ (in_E != 'd1))) begin
                    next_state = S19;
                end
                else begin
                    next_state = S5;
                end
            S2: begin
                if ((!(in_G) ^ (in_H == 'd0))) begin
                    next_state = S6;
                end
                else if ((in_H != 'd1)) begin
                    next_state = S36;
                end
                else if (((in_B && in_E) ^ in_D)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S30;
                end
            S3: begin
                if ((in_F == (in_E || in_F))) begin
                    next_state = S10;
                end
                else if ((^(in_E) ^ (in_G && in_E))) begin
                    next_state = S35;
                end
                else begin
                    next_state = S1;
                end
            S4: begin
                if ((in_G != 'd1)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S35;
                end
            S5: begin
                if (((in_D && in_F) != 'd1)) begin
                    next_state = S23;
                end
                else begin
                    next_state = S36;
                end
            S6: begin
                if ((in_E != 'd0)) begin
                    next_state = S26;
                end
                else begin
                    next_state = S0;
                end
            S7: begin
                if (((in_D ^ in_B) <= 'd0)) begin
                    next_state = S27;
                end
                else if ((in_D && (in_A || in_H))) begin
                    next_state = S9;
                end
                else if (((in_G || in_B) ^ in_H)) begin
                    next_state = S34;
                end
                else begin
                    next_state = S26;
                end
            S8: begin
                if (((in_H || in_A) ^ (in_F ^ in_D))) begin
                    next_state = S28;
                end
                else if ((!(in_C) <= 'd0)) begin
                    next_state = S29;
                end
                else if (~^(in_D)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S7;
                end
            S9: begin
                if ((in_A == 'd1)) begin
                    next_state = S3;
                end
                else if (((in_G != in_C) != in_G)) begin
                    next_state = S13;
                end
                else begin
                    next_state = S27;
                end
            S10: begin
                next_state = S30;
            S11: begin
                if (~|((in_B >= in_D))) begin
                    next_state = S20;
                end
                else begin
                    next_state = S37;
                end
            S12: begin
                if ((in_F ^ (in_B && in_H))) begin
                    next_state = S31;
                end
                else if (((in_A != 'd1) == 'd0)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S4;
                end
            S13: begin
            S14: begin
                if (((in_F != 'd1) && in_A)) begin
                    next_state = S1;
                end
                else if (((in_E ^ in_G) != 'd0)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S10;
                end
            S15: begin
                if ((in_H && in_E)) begin
                    next_state = S0;
                end
                else if (((in_F == 'd1) && in_H)) begin
                    next_state = S21;
                end
                else if ((in_A ^ in_F)) begin
                    next_state = S7;
                end
                else begin
                    next_state = S11;
                end
            S16: begin
            S17: begin
                if ((in_A ^ in_D)) begin
                    next_state = S34;
                end
                else begin
                    next_state = S25;
                end
            S18: begin
                if (((in_B == in_A) != 'd0)) begin
                    next_state = S27;
                end
                else begin
                    next_state = S39;
                end
            S19: begin
                next_state = S17;
            S20: begin
                if ((in_E && ~(in_G))) begin
                    next_state = S16;
                end
                else if (((in_B == 'd1) && (in_D ^ in_G))) begin
                    next_state = S39;
                end
                else begin
                    next_state = S9;
                end
            S21: begin
            S22: begin
                if ((in_H || in_E)) begin
                    next_state = S37;
                end
                else begin
                    next_state = S27;
                end
            S23: begin
                if (&(in_A)) begin
                    next_state = S18;
                end
                else if (((in_B != in_D) != in_G)) begin
                    next_state = S24;
                end
                else begin
                    next_state = S4;
                end
            S24: begin
                if (~((in_A != in_H))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S15;
                end
            S25: begin
                next_state = S14;
            S26: begin
                next_state = S10;
            S27: begin
                next_state = S1;
            S28: begin
                next_state = S25;
            S29: begin
                if ((in_G < in_C)) begin
                    next_state = S11;
                end
                else if (((in_H ^ in_A) == 'd1)) begin
                    next_state = S38;
                end
                else begin
                    next_state = S19;
                end
            S30: begin
                if ((in_H && (in_G == 'd1))) begin
                    next_state = S12;
                end
                else begin
                    next_state = S17;
                end
            S31: begin
                if ((in_D > 'd0)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S22;
                end
            S32: begin
            S33: begin
                if ((^(in_C) || in_G)) begin
                    next_state = S20;
                end
                else begin
                    next_state = S16;
                end
            S34: begin
                if (((in_A == 'd0) != 'd1)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S33;
                end
            S35: begin
                if (&((in_D == 'd0))) begin
                    next_state = S18;
                end
                else begin
                    next_state = S8;
                end
            S36: begin
                next_state = S2;
            S37: begin
                if ((in_D == (in_A || in_H))) begin
                    next_state = S32;
                end
                else begin
                    next_state = S14;
                end
            S38: begin
            S39: begin
                if ((in_H || (in_D && in_F))) begin
                    next_state = S22;
                end
                else if (&(in_E)) begin
                    next_state = S37;
                end
                else begin
                    next_state = S39;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 32
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_40_80_64_2,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if (((in_D ^ in_G) || (in_E && in_F))) begin
                    next_state = S21;
                end
                else if ((in_G ^ (in_H || in_E))) begin
                    next_state = S32;
                end
                else if (((in_G ^ in_F) && in_C)) begin
                    next_state = S19;
                end
                else if (((in_A != 'd1) == |(in_E))) begin
                    next_state = S16;
                end
                else begin
                    next_state = S12;
                end
            S1: begin
                if (((in_D || in_F) == 'd0)) begin
                    next_state = S2;
                end
                else if (((in_C && in_G) != 'd0)) begin
                    next_state = S3;
                end
                else begin
                    next_state = S25;
                end
            S2: begin
            S3: begin
                if ((in_D != 'd1)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S7;
                end
            S4: begin
                if (((in_G ^ in_C) == 'd0)) begin
                    next_state = S24;
                end
                else begin
                    next_state = S26;
                end
            S5: begin
                next_state = S17;
            S6: begin
                if (((in_F <= 'd1) ^ in_C)) begin
                    next_state = S14;
                end
                else begin
                    next_state = S38;
                end
            S7: begin
            S8: begin
                next_state = S7;
            S9: begin
                if (^(in_B)) begin
                    next_state = S0;
                end
                else if (((in_H ^ in_D) != 'd1)) begin
                    next_state = S20;
                end
                else if (|(in_C)) begin
                    next_state = S10;
                end
                else if (!(in_D)) begin
                    next_state = S17;
                end
                else begin
                    next_state = S19;
                end
            S10: begin
            S11: begin
                if ((in_A ^ (in_C ^ in_G))) begin
                    next_state = S27;
                end
                else begin
                    next_state = S33;
                end
            S12: begin
                if (((in_B || in_A) == (in_B ^ in_A))) begin
                    next_state = S11;
                end
                else begin
                    next_state = S37;
                end
            S13: begin
                if (((in_E > 'd1) == 'd1)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S28;
                end
            S14: begin
                next_state = S9;
            S15: begin
                if ((~|(in_E) || in_C)) begin
                    next_state = S6;
                end
                else if (~|(in_B)) begin
                    next_state = S35;
                end
                else begin
                    next_state = S25;
                end
            S16: begin
                if (((in_F != 'd1) != in_E)) begin
                    next_state = S15;
                end
                else if ((in_A >= 'd1)) begin
                    next_state = S7;
                end
                else if ((in_D || in_F)) begin
                    next_state = S24;
                end
                else begin
                    next_state = S34;
                end
            S17: begin
                next_state = S19;
            S18: begin
                if ((in_B != 'd0)) begin
                    next_state = S22;
                end
                else begin
                    next_state = S4;
                end
            S19: begin
            S20: begin
                if ((in_H || in_B)) begin
                    next_state = S23;
                end
                else begin
                    next_state = S36;
                end
            S21: begin
                next_state = S16;
            S22: begin
                if (((in_A && in_H) != 'd1)) begin
                    next_state = S4;
                end
                else if ((in_E || in_A)) begin
                    next_state = S29;
                end
                else begin
                    next_state = S1;
                end
            S23: begin
                if ((in_E ^ in_G)) begin
                    next_state = S8;
                end
                else if ((~(in_H) && (in_G ^ in_C))) begin
                    next_state = S37;
                end
                else if ((in_F <= 'd0)) begin
                    next_state = S4;
                end
                else begin
                    next_state = S15;
                end
            S24: begin
                if ((in_A ^ in_H)) begin
                    next_state = S1;
                end
                else if ((in_G > in_E)) begin
                    next_state = S10;
                end
                else if (((in_E && in_A) || in_G)) begin
                    next_state = S31;
                end
                else if ((in_H != in_D)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S22;
                end
            S25: begin
                if ((~|(in_H) >= (in_E == in_A))) begin
                    next_state = S27;
                end
                else begin
                    next_state = S35;
                end
            S26: begin
                next_state = S18;
            S27: begin
            S28: begin
                if ((in_E < 'd1)) begin
                    next_state = S36;
                end
                else if ((in_E ^ (in_B >= 'd1))) begin
                    next_state = S23;
                end
                else if (~|(in_D)) begin
                    next_state = S28;
                end
                else begin
                    next_state = S26;
                end
            S29: begin
                if ((in_H ^ ~|(in_A))) begin
                    next_state = S30;
                end
                else begin
                    next_state = S39;
                end
            S30: begin
                next_state = S34;
            S31: begin
            S32: begin
                if ((in_A ^ in_G)) begin
                    next_state = S19;
                end
                else begin
                    next_state = S22;
                end
            S33: begin
                if ((in_B ^ (in_E ^ in_D))) begin
                    next_state = S13;
                end
                else if (((in_A || in_C) || (in_B != in_E))) begin
                    next_state = S14;
                end
                else begin
                    next_state = S23;
                end
            S34: begin
                if (((in_C ^ in_B) && in_H)) begin
                    next_state = S19;
                end
                else begin
                    next_state = S29;
                end
            S35: begin
                if ((in_G ^ in_H)) begin
                    next_state = S10;
                end
                else if ((&(in_D) || in_F)) begin
                    next_state = S0;
                end
                else begin
                    next_state = S23;
                end
            S36: begin
                next_state = S11;
            S37: begin
                next_state = S28;
            S38: begin
                next_state = S34;
            S39: begin
                if (((in_G && in_C) && in_G)) begin
                    next_state = S5;
                end
                else begin
                    next_state = S0;
                end
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
fsm,8_40_80_64_4,"
`define WIDTH 64
module fsm(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    output reg [LOG2_NUM_NODES-1:0] fsm_out;
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end
    always_comb begin
        case(state)
            S0: begin
                if ((in_C || in_D)) begin
                    next_state = S11;
                end
                else begin
                    next_state = S25;
                end
            S1: begin
                if (&(in_A)) begin
                    next_state = S31;
                end
                else if (~(in_A)) begin
                    next_state = S22;
                end
                else if ((in_H < 'd1)) begin
                    next_state = S17;
                end
                else if (~|((in_H != 'd0))) begin
                    next_state = S8;
                end
                else begin
                    next_state = S10;
                end
            S2: begin
                if (((in_F == in_G) && (in_C && in_F))) begin
                    next_state = S1;
                end
                else if ((in_D != 'd0)) begin
                    next_state = S20;
                end
                else if ((~^(in_B) && in_A)) begin
                    next_state = S36;
                end
                else begin
                    next_state = S28;
                end
            S3: begin
            S4: begin
                if (((in_G != 'd1) || ~&(in_C))) begin
                    next_state = S16;
                end
                else if (&((in_D || in_B))) begin
                    next_state = S28;
                end
                else if ((in_C != 'd1)) begin
                    next_state = S30;
                end
                else begin
                    next_state = S32;
                end
            S5: begin
                if (((in_H ^ in_D) ^ (in_C == 'd1))) begin
                    next_state = S8;
                end
                else if (((in_F && in_B) == 'd1)) begin
                    next_state = S9;
                end
                else begin
                    next_state = S18;
                end
            S6: begin
                if ((in_A != 'd1)) begin
                    next_state = S38;
                end
                else begin
                    next_state = S37;
                end
            S7: begin
            S8: begin
                next_state = S13;
            S9: begin
                next_state = S17;
            S10: begin
                next_state = S14;
            S11: begin
                if (~|(in_G)) begin
                    next_state = S2;
                end
                else begin
                    next_state = S23;
                end
            S12: begin
            S13: begin
                if (((in_B < 'd0) && in_G)) begin
                    next_state = S6;
                end
                else if ((~&(in_B) == 'd0)) begin
                    next_state = S22;
                end
                else begin
                    next_state = S23;
                end
            S14: begin
                next_state = S3;
            S15: begin
                if ((in_A && in_G)) begin
                    next_state = S5;
                end
                else if (~^(in_A)) begin
                    next_state = S9;
                end
                else if (((in_C && in_F) ^ (in_G == in_C))) begin
                    next_state = S21;
                end
                else begin
                    next_state = S0;
                end
            S16: begin
                if (~(in_G)) begin
                    next_state = S35;
                end
                else if (((in_A != 'd0) ^ ~^(in_F))) begin
                    next_state = S32;
                end
                else begin
                    next_state = S7;
                end
            S17: begin
                if ((in_F != 'd1)) begin
                    next_state = S29;
                end
                else begin
                    next_state = S12;
                end
            S18: begin
                next_state = S12;
            S19: begin
                if ((^(in_B) != in_H)) begin
                    next_state = S0;
                end
                else if (((in_B == in_E) == 'd0)) begin
                    next_state = S24;
                end
                else if (((in_C && in_E) ^ ~(in_D))) begin
                    next_state = S10;
                end
                else begin
                    next_state = S11;
                end
            S20: begin
                next_state = S0;
            S21: begin
                if ((in_E && (in_H == in_A))) begin
                    next_state = S4;
                end
                else if ((in_G ^ (in_B && in_H))) begin
                    next_state = S7;
                end
                else begin
                    next_state = S26;
                end
            S22: begin
                if ((in_C >= 'd0)) begin
                    next_state = S6;
                end
                else begin
                    next_state = S30;
                end
            S23: begin
                if (((in_E != in_D) ^ in_F)) begin
                    next_state = S25;
                end
                else begin
                    next_state = S34;
                end
            S24: begin
            S25: begin
                if (((in_B && in_F) == 'd0)) begin
                    next_state = S15;
                end
                else if (|((in_H != 'd1))) begin
                    next_state = S18;
                end
                else if ((in_D ^ (in_A > in_F))) begin
                    next_state = S26;
                end
                else if (~(in_B)) begin
                    next_state = S27;
                end
                else begin
                    next_state = S33;
                end
            S26: begin
                if (((in_H && in_C) && in_G)) begin
                    next_state = S12;
                end
                else begin
                    next_state = S9;
                end
            S27: begin
                if ((in_G == 'd0)) begin
                    next_state = S19;
                end
                else if ((in_G || (in_C == 'd0))) begin
                    next_state = S37;
                end
                else if ((in_H == 'd0)) begin
                    next_state = S18;
                end
                else begin
                    next_state = S24;
                end
            S28: begin
                if ((^(in_A) != 'd1)) begin
                    next_state = S23;
                end
                else if ((in_B != 'd0)) begin
                    next_state = S8;
                end
                else if (((in_G ^ in_A) != 'd1)) begin
                    next_state = S24;
                end
                else begin
                    next_state = S34;
                end
            S29: begin
                next_state = S32;
            S30: begin
                if ((in_C != 'd0)) begin
                    next_state = S39;
                end
                else begin
                    next_state = S38;
                end
            S31: begin
                next_state = S10;
            S32: begin
                next_state = S24;
            S33: begin
            S34: begin
                next_state = S2;
            S35: begin
                if ((in_G || (in_E == 'd0))) begin
                    next_state = S24;
                end
                else if (((in_A == 'd0) ^ (in_D && in_E))) begin
                    next_state = S32;
                end
                else if (((in_H < 'd0) <= 'd1)) begin
                    next_state = S38;
                end
                else begin
                    next_state = S10;
                end
            S36: begin
                next_state = S17;
            S37: begin
                next_state = S13;
            S38: begin
                next_state = S10;
            S39: begin
                next_state = S28;
            end
        endcase
    end
endmodule",,"
`define WIDTH 64
module fsm_tb(
    clk,
    reset_,
    in_A,
    in_B,
    in_C,
    in_D,
    in_E,
    in_F,
    in_G,
    in_H,
    fsm_out
);
    parameter WIDTH = `WIDTH;
    localparam LOG2_NUM_NODES = 6;

    parameter S0 = 6'b000000;
    parameter S1 = 6'b000001;
    parameter S2 = 6'b000010;
    parameter S3 = 6'b000011;
    parameter S4 = 6'b000100;
    parameter S5 = 6'b000101;
    parameter S6 = 6'b000110;
    parameter S7 = 6'b000111;
    parameter S8 = 6'b001000;
    parameter S9 = 6'b001001;
    parameter S10 = 6'b001010;
    parameter S11 = 6'b001011;
    parameter S12 = 6'b001100;
    parameter S13 = 6'b001101;
    parameter S14 = 6'b001110;
    parameter S15 = 6'b001111;
    parameter S16 = 6'b010000;
    parameter S17 = 6'b010001;
    parameter S18 = 6'b010010;
    parameter S19 = 6'b010011;
    parameter S20 = 6'b010100;
    parameter S21 = 6'b010101;
    parameter S22 = 6'b010110;
    parameter S23 = 6'b010111;
    parameter S24 = 6'b011000;
    parameter S25 = 6'b011001;
    parameter S26 = 6'b011010;
    parameter S27 = 6'b011011;
    parameter S28 = 6'b011100;
    parameter S29 = 6'b011101;
    parameter S30 = 6'b011110;
    parameter S31 = 6'b011111;
    parameter S32 = 6'b100000;
    parameter S33 = 6'b100001;
    parameter S34 = 6'b100010;
    parameter S35 = 6'b100011;
    parameter S36 = 6'b100100;
    parameter S37 = 6'b100101;
    parameter S38 = 6'b100110;
    parameter S39 = 6'b100111;

    input clk;
    input reset_;
    input [WIDTH-1:0] in_A;
    input [WIDTH-1:0] in_B;
    input [WIDTH-1:0] in_C;
    input [WIDTH-1:0] in_D;
    input [WIDTH-1:0] in_E;
    input [WIDTH-1:0] in_F;
    input [WIDTH-1:0] in_G;
    input [WIDTH-1:0] in_H;
    input reg [LOG2_NUM_NODES-1:0] fsm_out;
    wire tb_reset;
    assign tb_reset = (reset_ == 1'b0);
    reg [LOG2_NUM_NODES-1:0] state, next_state;
    always_ff @(posedge clk or negedge reset_) begin
        if (!reset_) begin
            state <= S0;
        end else begin
            state <= next_state;
        end
    end

endmodule
bind fsm fsm_tb #(
    .WIDTH(WIDTH)
) fsm_tb_inst (.*);
    "
